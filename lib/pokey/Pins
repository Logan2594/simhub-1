/Volumes/src/simhub/src/.clang-format:1:---
/Volumes/src/simhub/src/.clang-format:4:AccessModifierOffset: -4
/Volumes/src/simhub/src/.clang-format:54:  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
/Volumes/src/simhub/src/.clang-format:56:  - Regex:           '^(<|"(gtest|isl|json)/)'
/Volumes/src/simhub/src/.clang-format:58:  - Regex:           '.*'
/Volumes/src/simhub/src/app/main.cpp:22:    @param cmdline::parser pointer - command line parameters passed in by user
/Volumes/src/simhub/src/app/main.cpp:27:    cli->add<std::string>("config", 'c', "config file", false, "config/config.cfg");
/Volumes/src/simhub/src/app/main.cpp:28:    cli->add<std::string>("logConfig", 'l', "log config file", false, "config/zlog.conf");
/Volumes/src/simhub/src/app/main.cpp:32:    cli->add<bool>("polly", 'p', "Use Amazon Polly", false, true);
/Volumes/src/simhub/src/app/main.cpp:33:    cli->add<bool>("kinesis", 'k', "Use Amazon Kinesis", false, true);
/Volumes/src/simhub/src/app/main.cpp:36:    cli->set_program_name("simhub");
/Volumes/src/simhub/src/app/main.cpp:37:    cli->footer("\n");
/Volumes/src/simhub/src/app/main.cpp:49:        SimHubEventController::EventControllerInstance()->ceaseEventLoop();
/Volumes/src/simhub/src/app/main.cpp:54:        // -- destroy and reload event controller
/Volumes/src/simhub/src/app/main.cpp:55:        // -- cheat a little and capture SIGQUIT so we can use ctrl+\
/Volumes/src/simhub/src/app/main.cpp:60:        SimHubEventController::EventControllerInstance()->ceaseEventLoop();
/Volumes/src/simhub/src/app/main.cpp:78:    simhubController->enablePolly();
/Volumes/src/simhub/src/app/main.cpp:79:    simhubController->enableKinesis();
/Volumes/src/simhub/src/app/main.cpp:82:    if (simhubController->loadPokeyPlugin()) {
/Volumes/src/simhub/src/app/main.cpp:83:        if (simhubController->loadPrepare3dPlugin()) {
/Volumes/src/simhub/src/app/main.cpp:86:            simhubController->runEventLoop([=](std::shared_ptr<Attribute> value) {
/Volumes/src/simhub/src/app/main.cpp:87:                bool deliveryResult = simhubController->deliverValue(value);
/Volumes/src/simhub/src/app/main.cpp:90:                simhubController->deliverKinesisValue(value);
/Volumes/src/simhub/src/app/simhub.cpp:60:        tokens.push_back(sequence.substr(i, pos-i));
/Volumes/src/simhub/src/app/simhub.cpp:71: * rudimentary converter from libconfig content to JSON content -
/Volumes/src/simhub/src/app/simhub.cpp:106:            jsonStream << "\"_line_comment_" << lineIdx << "\": \"" << tokens[tokens.size() - 1] << "\"," << std::endl;
/Volumes/src/simhub/src/app/simhub.cpp:136: * serves GET requests on http://localhost/configuration - returns
/Volumes/src/simhub/src/app/simhub.cpp:141:    std::string config_json = libconfigToJSON(_configManager->pokeyConfigurationFilename());
/Volumes/src/simhub/src/app/simhub.cpp:153:    httpListenURI << "http://" << _configManager->httpListenAddress() << ":" << _configManager->httpListenPort();
/Volumes/src/simhub/src/app/simhub.cpp:157:    _configurationHTTPListener->open().wait();
/Volumes/src/simhub/src/app/simhub.cpp:158:    _configurationHTTPListener->support(web::http::methods::GET, std::bind(&SimHubEventController::httpGETConfigurationHandler, this, std::placeholders::_1));
/Volumes/src/simhub/src/app/simhub.cpp:169:        _awsHelper.polly()->shutdown();
/Volumes/src/simhub/src/app/simhub.cpp:173:        _awsHelper.kinesis()->shutdown();
/Volumes/src/simhub/src/app/simhub.cpp:183:    _awsHelper.polly()->say("Simulator is ready.");
/Volumes/src/simhub/src/app/simhub.cpp:197:                std::chrono::milliseconds ts = entry.second.second->timestamp();
/Volumes/src/simhub/src/app/simhub.cpp:200:                    entry.second.second->resetTimestamp();
/Volumes/src/simhub/src/app/simhub.cpp:201:                    logger.log(LOG_INFO, "sustaining value: %s", entry.second.second->name().c_str());
/Volumes/src/simhub/src/app/simhub.cpp:219:    std::string name = value->name();
/Volumes/src/simhub/src/app/simhub.cpp:220:    std::string val = value->valueToString();
/Volumes/src/simhub/src/app/simhub.cpp:221:    std::string ts = value->timestampAsString();
/Volumes/src/simhub/src/app/simhub.cpp:222:    std::string description = value->description();
/Volumes/src/simhub/src/app/simhub.cpp:223:    std::string units = value->units();
/Volumes/src/simhub/src/app/simhub.cpp:237:    _awsHelper.kinesis()->putRecord(data);
/Volumes/src/simhub/src/app/simhub.cpp:248:    const libconfig::Setting &aws = _configManager->config()->lookup("aws");
/Volumes/src/simhub/src/app/simhub.cpp:283:    if (mapContains(_configManager->mapManager()->sustainMap(), value->name())) {
/Volumes/src/simhub/src/app/simhub.cpp:286:        _sustainValues[value->name()].second = value;
/Volumes/src/simhub/src/app/simhub.cpp:287:        _sustainValues[value->name()].first = std::chrono::milliseconds(_configManager->mapManager()->sustainMap()[value->name()]);
/Volumes/src/simhub/src/app/simhub.cpp:291:    // determine value destination from the source - very simple at the moment
/Volumes/src/simhub/src/app/simhub.cpp:292:    // (just deliver to whatever instance is not the source) - may want more
/Volumes/src/simhub/src/app/simhub.cpp:295:    if (value->ownerPlugin() == _pokeyMethods.plugin_instance) {
/Volumes/src/simhub/src/app/simhub.cpp:298:    else if (value->ownerPlugin() == _prepare3dMethods.plugin_instance) {
/Volumes/src/simhub/src/app/simhub.cpp:301:        if (value->name() == "N_ELEC_PANEL_LOWER_LEFT") {
/Volumes/src/simhub/src/app/simhub.cpp:302:                  _awsHelper.polly()->say("dc volts %i", c_value->value);
/Volumes/src/simhub/src/app/simhub.cpp:309:    if (c_value->type == CONFIG_STRING) {
/Volumes/src/simhub/src/app/simhub.cpp:310:        free(c_value->value.string_value);
/Volumes/src/simhub/src/app/simhub.cpp:313:    free(c_value->name);
/Volumes/src/simhub/src/app/simhub.cpp:333:        if (_configManager->mapManager()->find(data->name, &mapEntry)) {
/Volumes/src/simhub/src/app/simhub.cpp:352:        if (_configManager->mapManager()->find(data->name, &mapEntry)) {
/Volumes/src/simhub/src/app/simhub.cpp:390:        // -- temporary solution to the plugin configuration conundrom:
/Volumes/src/simhub/src/app/simhub.cpp:391:        //    - iterate over the list of libconfig::Setting instances we've
/Volumes/src/simhub/src/app/simhub.cpp:392:        //    - been given for this plugin and pass them through
/Volumes/src/simhub/src/app/simhub.cpp:414:    auto prepare3dCallback = [](SPHANDLE eventSource, void *eventData, void *arg) { static_cast<SimHubEventController *>(arg)->prepare3dEventCallback(eventSource, eventData); };
/Volumes/src/simhub/src/app/simhub.cpp:423:    auto pokeyCallback = [](SPHANDLE eventSource, void *eventData, void *arg) { static_cast<SimHubEventController *>(arg)->pokeyEventCallback(eventSource, eventData); };
/Volumes/src/simhub/src/app/simhub.cpp:430://! perform shutdown ceremonies on both plugins - this unloads both plugins
/Volumes/src/simhub/src/app/simhub.cpp:440:    auto listenerCloseTask = _configurationHTTPListener->close();
/Volumes/src/simhub/src/app/simhub.cpp:449://! private support method - gracefully closes plugin instance represented by pluginMethods
/Volumes/src/simhub/src/app/simhub.h:28: * - sets up a capture-less lambda that is called by a plugin instance
/Volumes/src/simhub/src/app/simhub.h:31: * - the lambda callback then uses the final arg of the callback, a
/Volumes/src/simhub/src/app/simhub.h:67:    // -- temp solution to plugin device configuration conundrum
/Volumes/src/simhub/src/app/simhub.h:85:    // -- temp solution to plugin device configuration conundrum
/Volumes/src/simhub/src/app/simhub.h:116://! TODO - add perpetual and cancelable loop
/Volumes/src/simhub/src/app/simhub.h:117:// - currently just waits on the concurrent event queue
/Volumes/src/simhub/src/app/simhub.h:118://   -> when another thread pushes an event on the queue, this thread
/Volumes/src/simhub/src/common/aws/aws.h:10:#include <aws/text-to-speech/TextToSpeechManager.h>
/Volumes/src/simhub/src/common/aws/kinesis/kinesis.cpp:22:        logger.log(LOG_INFO, " - Starting AWS Kinesis Service...");
/Volumes/src/simhub/src/common/aws/kinesis/kinesis.cpp:27:                request->SetStreamName(Aws::String(_streamName.c_str()));
/Volumes/src/simhub/src/common/aws/kinesis/kinesis.cpp:28:                request->WithData(data).WithPartitionKey(Aws::String(_partition.c_str()));
/Volumes/src/simhub/src/common/aws/kinesis/kinesis.cpp:29:                _kinesisClient->PutRecord(*request);
/Volumes/src/simhub/src/common/aws/kinesis/kinesis.cpp:36:        logger.log(LOG_INFO, " - Terminated AWS Kinesis Service");
/Volumes/src/simhub/src/common/aws/kinesis/kinesis.cpp:44:    logger.log(LOG_INFO, " - AWS Kinesis stopped");
/Volumes/src/simhub/src/common/aws/polly/polly.cpp:14:    _manager->SetActiveVoice(_defaultPollyVoice.c_str()); ///< set the active voice
/Volumes/src/simhub/src/common/aws/polly/polly.cpp:16:    // this is the worker thread - it blocks on _pollQueue until there is something to read
/Volumes/src/simhub/src/common/aws/polly/polly.cpp:20:        logger.log(LOG_INFO, " - Starting AWS Polly Service...");
/Volumes/src/simhub/src/common/aws/polly/polly.cpp:26:                    _manager->SendTextToOutputDevice(item.c_str(), std::bind(&Polly::_handler, this, _1, _2, _3)); ///< send to AWS
/Volumes/src/simhub/src/common/aws/polly/polly.cpp:34:        logger.log(LOG_INFO, " - Terminated AWS Polly Service");
/Volumes/src/simhub/src/common/aws/polly/polly.cpp:48:    _pollyClient->DisableRequestProcessing();
/Volumes/src/simhub/src/common/aws/polly/polly.cpp:73:    logger.log(LOG_INFO, " - AWS Polly stopped");
/Volumes/src/simhub/src/common/aws/polly/polly.h:10:#include <aws/text-to-speech/TextToSpeechManager.h>
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:15:        throw std::runtime_error("Config I/O error - See log file");
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:105:        throw std::runtime_error("Config I/O error - See log file");
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:108:        logger.log(LOG_ERROR, "Config file parse error at %s:%d  - %s", pex.getFile(), pex.getLine(), pex.getError());
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:109:        throw std::runtime_error("Config file parse error - See log file");
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:112:    logger.log(LOG_INFO, "Loading configuration file: %s - %s (v%s) (v%d.%d.%d)", _configFilename.c_str(), name().c_str(), version().c_str(), LIBCONFIGXX_VER_MAJOR,
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:120:        simhubController->setPrepare3dConfig(&_prepare3dConfig);
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:123:        simhubController->setPokeyConfig(&_pokeyConfig);
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:134:        _mappingConfigManager->init();
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:141:    simhubController->setConfigManager(this);
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:177:    config()->lookupValue("httpListenAddress", retVal);
/Volumes/src/simhub/src/common/configmanager/configmanager.cpp:184:    config()->lookupValue("httpListenPort", port);
/Volumes/src/simhub/src/common/configmanager/configmanager.h:30:#define RETURN_ERROR -1
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:15:        throw std::runtime_error("Config I/O error - See log file");
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:54:        throw std::runtime_error("Config I/O error - See log file");
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:57:        logger.log(LOG_ERROR, "Config file parse error at %s:%d  - %s", pex.getFile(), pex.getLine(), pex.getError());
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:58:        throw std::runtime_error("Config file parse error - See log file");
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:67:        logger.log(LOG_INFO, "<Mapping> Found %d mapping(s)", _mappingConfig->getLength());
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:70:        if (_mappingConfig->getLength() == 0) {
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:74:        for (int i = 0; i <= _mappingConfig->getLength() - 1; i++) {
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:99:                logger.log(LOG_INFO, "<Mapping> %s --> %s", source.c_str(), target.c_str());
/Volumes/src/simhub/src/common/configmanager/mappingConfigManager/mappingConfigManager.cpp:142:        *retMapEntry = &(ret->second);
/Volumes/src/simhub/src/common/configmanager/simConfigManager/simConfigManager.cpp:53:        if (!_simConfig->exists(it->c_str())) {
/Volumes/src/simhub/src/common/configmanager/simConfigManager/simConfigManager.cpp:55:            logger.log(LOG_ERROR, "[SimConfigManager] requiredfield '%s' does not exist in simulator config", it->c_str());
/Volumes/src/simhub/src/common/configmanager/simConfigManager/simConfigManager.cpp:65:    _pluginName = _simConfig->lookup("type").c_str();
/Volumes/src/simhub/src/common/configmanager/simConfigManager/simConfigManager.cpp:77:    return _simConfig->lookup("ipAddress").c_str();
/Volumes/src/simhub/src/common/configmanager/simConfigManager/simConfigManager.cpp:82:    return _simConfig->lookup("port");
/Volumes/src/simhub/src/common/configmanager/simConfigManager/simConfigManager.cpp:87:    return _simConfig->lookup("type").c_str();
/Volumes/src/simhub/src/common/device/device.cpp:8:    logger.log(LOG_INFO, " - Creating %s device #%s with %d elements", _type.c_str(), _id.c_str(), _config->getLength());
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:11:    retVal->name = (char *)calloc(value->name().size() + 1, 1);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:12:    retVal->ownerPlugin = value->ownerPlugin();
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:14:    strncpy(retVal->name, value->name().c_str(), value->name().size());
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:15:    // strncpy(retVal->description, value->description().c_str(), value->description().size());
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:16:    // strncpy(retVal->units, value->units().c_str(), value->units().size());
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:18:    switch (value->type()) {
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:20:        retVal->type = CONFIG_BOOL;
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:21:        retVal->value.bool_value = value->value<bool>();
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:25:        retVal->type = CONFIG_FLOAT;
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:26:        retVal->value.float_value = value->value<float>();
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:30:        retVal->type = CONFIG_INT;
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:31:        retVal->value.int_value = value->value<int>();
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:35:        retVal->type = CONFIG_INT;
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:36:        retVal->value.int_value = value->value<int>();
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:40:        retVal->type = CONFIG_STRING;
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:41:        retVal->value.string_value = (char *)calloc(value->value<std::string>().size() + 1, 1);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:42:        strncpy(retVal->value.string_value, value->value<std::string>().c_str(), value->value<std::string>().size());
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:56:    assert(generic->ownerPlugin);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:57:    std::shared_ptr<Attribute> retVal(new Attribute(generic->ownerPlugin));
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:59:    switch (generic->type) {
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:61:        retVal->setValue<bool>(generic->value.bool_value);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:62:        retVal->setType(BOOL_ATTRIBUTE);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:65:        retVal->setValue<float>(generic->value.float_value);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:66:        retVal->setType(FLOAT_ATTRIBUTE);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:69:        retVal->setValue<int>(generic->value.int_value);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:70:        retVal->setType(INT_ATTRIBUTE);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:73:        retVal->setValue<int>(generic->value.int_value);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:74:        retVal->setType(INT_ATTRIBUTE);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:77:        retVal->setValue<std::string>(generic->value.string_value);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:78:        retVal->setType(STRING_ATTRIBUTE);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:85:    retVal->setName(generic->name);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:86:    // retVal->setDescription(generic->description);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:87:    // retVal->setUnits(generic->units);
/Volumes/src/simhub/src/common/elements/attributes/attribute.cpp:92:// -- instance methods
/Volumes/src/simhub/src/common/log/clog.cpp:40:    // set the default zlog config file name - defaults to config/zlog.conf
/Volumes/src/simhub/src/common/log/clog.cpp:52:        log(LOG_ERROR, "Cant load zlog config %s - All output will be to stdout", _configFilename.c_str());
/Volumes/src/simhub/src/common/log/clog.h:25:    // log @msg to specific @category - uses variadic parameters
/Volumes/src/simhub/src/common/support/threadmanager.h:30:        _managedThread->join();
/Volumes/src/simhub/src/libs/commandLine.h:129://-----
/Volumes/src/simhub/src/libs/commandLine.h:299://-----
/Volumes/src/simhub/src/libs/commandLine.h:308:            delete p->second;
/Volumes/src/simhub/src/libs/commandLine.h:352:            throw cmdline_error("there is no flag: --" + name);
/Volumes/src/simhub/src/libs/commandLine.h:353:        return options.find(name)->second->has_set();
/Volumes/src/simhub/src/libs/commandLine.h:359:            throw cmdline_error("there is no flag: --" + name);
/Volumes/src/simhub/src/libs/commandLine.h:360:        const option_with_value<T>* p = dynamic_cast<const option_with_value<T>*>(options.find(name)->second);
/Volumes/src/simhub/src/libs/commandLine.h:363:        return p->get();
/Volumes/src/simhub/src/libs/commandLine.h:436:            if (p->first.length() == 0)
/Volumes/src/simhub/src/libs/commandLine.h:438:            char initial = p->second->short_name();
/Volumes/src/simhub/src/libs/commandLine.h:445:                    lookup[initial] = p->first;
/Volumes/src/simhub/src/libs/commandLine.h:450:            if (strncmp(argv[i], "--", 2) == 0) {
/Volumes/src/simhub/src/libs/commandLine.h:459:                        errors.push_back("undefined option: --" + name);
/Volumes/src/simhub/src/libs/commandLine.h:462:                    if (options[name]->has_value()) {
/Volumes/src/simhub/src/libs/commandLine.h:464:                            errors.push_back("option needs value: --" + name);
/Volumes/src/simhub/src/libs/commandLine.h:474:            } else if (strncmp(argv[i], "-", 1) == 0) {
/Volumes/src/simhub/src/libs/commandLine.h:480:                    if (lookup.count(argv[i][j - 1]) == 0) {
/Volumes/src/simhub/src/libs/commandLine.h:481:                        errors.push_back(std::string("undefined short option: -") + argv[i][j - 1]);
/Volumes/src/simhub/src/libs/commandLine.h:484:                    if (lookup[argv[i][j - 1]] == "") {
/Volumes/src/simhub/src/libs/commandLine.h:485:                        errors.push_back(std::string("ambiguous short option: -") + argv[i][j - 1]);
/Volumes/src/simhub/src/libs/commandLine.h:488:                    set_option(lookup[argv[i][j - 1]]);
/Volumes/src/simhub/src/libs/commandLine.h:492:                    errors.push_back(std::string("undefined short option: -") + last);
/Volumes/src/simhub/src/libs/commandLine.h:496:                    errors.push_back(std::string("ambiguous short option: -") + last);
/Volumes/src/simhub/src/libs/commandLine.h:500:                if (i + 1 < argc && options[lookup[last]]->has_value()) {
/Volumes/src/simhub/src/libs/commandLine.h:513:            if (!p->second->valid())
/Volumes/src/simhub/src/libs/commandLine.h:514:                errors.push_back("need option: --" + std::string(p->first));
/Volumes/src/simhub/src/libs/commandLine.h:552:            if (ordered[i]->must())
/Volumes/src/simhub/src/libs/commandLine.h:553:                oss << ordered[i]->short_description() << " ";
/Volumes/src/simhub/src/libs/commandLine.h:561:            max_width = std::max(max_width, ordered[i]->name().length());
/Volumes/src/simhub/src/libs/commandLine.h:564:            if (ordered[i]->short_name()) {
/Volumes/src/simhub/src/libs/commandLine.h:565:                oss << "  -" << ordered[i]->short_name() << ", ";
/Volumes/src/simhub/src/libs/commandLine.h:570:            oss << "--" << ordered[i]->name();
/Volumes/src/simhub/src/libs/commandLine.h:571:            for (size_t j = ordered[i]->name().length(); j < max_width + 4; j++)
/Volumes/src/simhub/src/libs/commandLine.h:573:            oss << ordered[i]->description() << std::endl;
/Volumes/src/simhub/src/libs/commandLine.h:594:            errors.push_back("undefined option: --" + name);
/Volumes/src/simhub/src/libs/commandLine.h:597:        if (!options[name]->set()) {
/Volumes/src/simhub/src/libs/commandLine.h:598:            errors.push_back("option needs value: --" + name);
/Volumes/src/simhub/src/libs/commandLine.h:605:            errors.push_back("undefined option: --" + name);
/Volumes/src/simhub/src/libs/commandLine.h:608:        if (!options[name]->set(value)) {
/Volumes/src/simhub/src/libs/commandLine.h:609:            errors.push_back("option value is invalid: --" + name + "=" + value);
/Volumes/src/simhub/src/libs/commandLine.h:679:            return "--" + nam;
/Volumes/src/simhub/src/libs/commandLine.h:703:            this->desc = full_description(desc);
/Volumes/src/simhub/src/libs/commandLine.h:754:            return "--" + nam + "=" + detail::readable_typename<T>();
/Volumes/src/simhub/src/libs/googletest/CHANGES:12:* New feature (potentially breaking): --gtest_list_tests now prints
/Volumes/src/simhub/src/libs/googletest/CHANGES:19:* Improvement: When --gtest_filter is specified, XML report now doesn't
/Volumes/src/simhub/src/libs/googletest/CHANGES:21:* Fixed the bug where long --gtest_filter flag values are truncated in
/Volumes/src/simhub/src/libs/googletest/CHANGES:31:  given source location -- useful for writing testing utilities.
/Volumes/src/simhub/src/libs/googletest/CHANGES:38:* Parameters of value-parameterized tests are now printed in the
/Volumes/src/simhub/src/libs/googletest/CHANGES:47:* --gtest_catch_exceptions is now true by default, allowing a test
/Volumes/src/simhub/src/libs/googletest/CHANGES:49:* Value-parameterized test fixtures can now derive from Test and
/Volumes/src/simhub/src/libs/googletest/CHANGES:56:* Bug fixes and implementation clean-ups.
/Volumes/src/simhub/src/libs/googletest/CHANGES:75: * Bug fixes and implementation clean-ups.
/Volumes/src/simhub/src/libs/googletest/CHANGES:99: * Bug fixes and implementation clean-ups.
/Volumes/src/simhub/src/libs/googletest/CHANGES:107:   --gtest_also_run_disabled_tests.
/Volumes/src/simhub/src/libs/googletest/CHANGES:108: * New feature: the --help flag for printing the usage.
/Volumes/src/simhub/src/libs/googletest/CHANGES:114: * Bug fixes and implementation clean-ups.
/Volumes/src/simhub/src/libs/googletest/CHANGES:118: * Compatibility fixes for Linux IA-64 and IBM z/OS.
/Volumes/src/simhub/src/libs/googletest/CHANGES:127: * New feature: value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/CHANGES:133: * Added src/gtest-all.cc for building Google Test from a single file.
/Volumes/src/simhub/src/libs/googletest/CHANGES:141: * New feature: type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:5:# ctest.  You can select which tests to run using 'ctest -R regex'.
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:6:# For more options, run 'ctest --help'.
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:16:  "Use shared (DLL) run-time lib even when Google Test is built as static lib."
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:39:# Project-wide settings
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:74:# ----------  -----------  --------------  -----------------------------
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:90:cxx_library(gtest "${cxx_strict}" src/gtest-all.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:116:# or specifying the -Dgtest_build_samples=ON flag when running cmake.
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:140:# or specifying the -Dgtest_build_tests=ON flag when running cmake.
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:150:  cxx_test(gtest-death-test_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:152:  cxx_test(gtest-filepath_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:153:  cxx_test(gtest-linked_ptr_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:154:  cxx_test(gtest-listener_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:156:  cxx_test(gtest-message_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:158:  cxx_test(gtest-options_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:159:  cxx_test(gtest-param-test_test gtest
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:160:    test/gtest-param-test2_test.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:161:  cxx_test(gtest-port_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:165:  cxx_test(gtest-printers_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:171:  cxx_test(gtest-test-part_test gtest_main)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:173:  cxx_test(gtest-typed-test_test gtest_main
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:174:    test/gtest-typed-test2_test.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:176:  cxx_test(gtest-unittest-api_test gtest)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:179:  # C++ tests built with non-standard compiler flags.
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:184:      src/gtest-all.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:186:      src/gtest-all.cc src/gtest_main.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:189:    src/gtest-all.cc src/gtest_main.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:191:  cxx_test_with_flags(gtest-death-test_ex_nocatch_test
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:192:    "${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=0"
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:193:    gtest test/gtest-death-test_ex_test.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:194:  cxx_test_with_flags(gtest-death-test_ex_catch_test
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:195:    "${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=1"
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:196:    gtest test/gtest-death-test_ex_test.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:202:    src/gtest-all.cc src/gtest_main.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:215:      src/gtest-all.cc src/gtest_main.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:217:    cxx_test_with_flags(gtest-tuple_test "${cxx_use_own_tuple}"
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:218:      gtest_main_use_own_tuple test/gtest-tuple_test.cc)
/Volumes/src/simhub/src/libs/googletest/CMakeLists.txt:222:      test/gtest-param-test_test.cc test/gtest-param-test2_test.cc)
/Volumes/src/simhub/src/libs/googletest/CONTRIBUTORS:1:# This file contains a list of people who've made non-trivial
/Volumes/src/simhub/src/libs/googletest/Makefile.am:3:ACLOCAL_AMFLAGS = -I m4
/Volumes/src/simhub/src/libs/googletest/Makefile.am:10:  include/gtest/gtest-param-test.h.pump \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:11:  include/gtest/internal/gtest-param-util-generated.h.pump \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:12:  include/gtest/internal/gtest-tuple.h.pump \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:13:  include/gtest/internal/gtest-type-util.h.pump \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:21:# #included by gtest-all.cc.
/Volumes/src/simhub/src/libs/googletest/Makefile.am:23:  src/gtest-death-test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:24:  src/gtest-filepath.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:25:  src/gtest-internal-inl.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:26:  src/gtest-port.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:27:  src/gtest-printers.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:28:  src/gtest-test-part.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:29:  src/gtest-typed-test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:48:  test/gtest-death-test_ex_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:49:  test/gtest-death-test_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:50:  test/gtest-filepath_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:51:  test/gtest-linked_ptr_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:52:  test/gtest-listener_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:53:  test/gtest-message_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:54:  test/gtest-options_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:55:  test/gtest-param-test2_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:56:  test/gtest-param-test2_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:57:  test/gtest-param-test_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:58:  test/gtest-param-test_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:59:  test/gtest-param-test_test.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:60:  test/gtest-port_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:62:  test/gtest-printers_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:63:  test/gtest-test-part_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:64:  test/gtest-tuple_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:65:  test/gtest-typed-test2_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:66:  test/gtest-typed-test_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:67:  test/gtest-typed-test_test.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:68:  test/gtest-unittest-api_test.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:123:  msvc/gtest-md.sln \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:124:  msvc/gtest-md.vcproj \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:127:  msvc/gtest_main-md.vcproj \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:129:  msvc/gtest_prod_test-md.vcproj \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:131:  msvc/gtest_unittest-md.vcproj \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:172:AM_CPPFLAGS = -I$(srcdir) -I$(srcdir)/include
/Volumes/src/simhub/src/libs/googletest/Makefile.am:176:  AM_CXXFLAGS = @PTHREAD_CFLAGS@ -DGTEST_HAS_PTHREAD=1
/Volumes/src/simhub/src/libs/googletest/Makefile.am:179:  AM_CXXFLAGS = -DGTEST_HAS_PTHREAD=0
/Volumes/src/simhub/src/libs/googletest/Makefile.am:185:lib_libgtest_la_SOURCES = src/gtest-all.cc
/Volumes/src/simhub/src/libs/googletest/Makefile.am:188:  include/gtest/gtest-death-test.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:189:  include/gtest/gtest-message.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:190:  include/gtest/gtest-param-test.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:191:  include/gtest/gtest-printers.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:192:  include/gtest/gtest-spi.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:193:  include/gtest/gtest-test-part.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:194:  include/gtest/gtest-typed-test.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:201:  include/gtest/internal/gtest-death-test-internal.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:202:  include/gtest/internal/gtest-filepath.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:203:  include/gtest/internal/gtest-internal.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:204:  include/gtest/internal/gtest-linked_ptr.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:205:  include/gtest/internal/gtest-param-util-generated.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:206:  include/gtest/internal/gtest-param-util.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:207:  include/gtest/internal/gtest-port.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:208:  include/gtest/internal/gtest-port-arch.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:209:  include/gtest/internal/gtest-string.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:210:  include/gtest/internal/gtest-tuple.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:211:  include/gtest/internal/gtest-type-util.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:213:  include/gtest/internal/custom/gtest-port.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:214:  include/gtest/internal/custom/gtest-printers.h
/Volumes/src/simhub/src/libs/googletest/Makefile.am:223:# TESTS -- Programs run automatically by "make check"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:224:# check_PROGRAMS -- Programs built by "make check" but not necessarily run
/Volumes/src/simhub/src/libs/googletest/Makefile.am:233:  samples/sample3-inl.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:266:  fused-src/gtest/gtest-all.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:267:  fused-src/gtest/gtest.h \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:268:  fused-src/gtest/gtest_main.cc
/Volumes/src/simhub/src/libs/googletest/Makefile.am:275:test_fused_gtest_test_CPPFLAGS = -I"$(srcdir)/fused-src"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:280:$(test_fused_gtest_test_SOURCES): fused-gtest
/Volumes/src/simhub/src/libs/googletest/Makefile.am:282:fused-gtest: $(pkginclude_HEADERS) $(pkginclude_internal_HEADERS) \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:283:             $(GTEST_SRC) src/gtest-all.cc src/gtest_main.cc \
/Volumes/src/simhub/src/libs/googletest/Makefile.am:285:	mkdir -p "$(srcdir)/fused-src"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:286:	chmod -R u+w "$(srcdir)/fused-src"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:287:	rm -f "$(srcdir)/fused-src/gtest/gtest-all.cc"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:288:	rm -f "$(srcdir)/fused-src/gtest/gtest.h"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:289:	"$(srcdir)/scripts/fuse_gtest_files.py" "$(srcdir)/fused-src"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:290:	cp -f "$(srcdir)/src/gtest_main.cc" "$(srcdir)/fused-src/gtest/"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:292:maintainer-clean-local:
/Volumes/src/simhub/src/libs/googletest/Makefile.am:293:	rm -rf "$(srcdir)/fused-src"
/Volumes/src/simhub/src/libs/googletest/Makefile.am:302:# One-Definition Rule.
/Volumes/src/simhub/src/libs/googletest/Makefile.am:304:install-exec-local:
/Volumes/src/simhub/src/libs/googletest/Makefile.am:308:install-data-local:
/Volumes/src/simhub/src/libs/googletest/README.md:17:    ${GTEST_DIR}/src/gtest-all.cc
/Volumes/src/simhub/src/libs/googletest/README.md:20:in the normal header search path.  Assuming a Linux-like system and gcc,
/Volumes/src/simhub/src/libs/googletest/README.md:23:    g++ -isystem ${GTEST_DIR}/include -I${GTEST_DIR} \
/Volumes/src/simhub/src/libs/googletest/README.md:24:        -pthread -c ${GTEST_DIR}/src/gtest-all.cc
/Volumes/src/simhub/src/libs/googletest/README.md:25:    ar -rv libgtest.a gtest-all.o
/Volumes/src/simhub/src/libs/googletest/README.md:27:(We need `-pthread` as Google Test uses threads.)
/Volumes/src/simhub/src/libs/googletest/README.md:33:    g++ -isystem ${GTEST_DIR}/include -pthread path/to/your_test.cc libgtest.a \
/Volumes/src/simhub/src/libs/googletest/README.md:34:        -o your_test
/Volumes/src/simhub/src/libs/googletest/README.md:58:cross-platform.). If you don't have CMake installed already, you can
/Volumes/src/simhub/src/libs/googletest/README.md:72:    cmake -Dgtest_build_samples=ON ${GTEST_DIR}
/Volumes/src/simhub/src/libs/googletest/README.md:85:Before settling on CMake, we have been providing hand-maintained build
/Volumes/src/simhub/src/libs/googletest/README.md:95:Open the `gtest.sln` or `gtest-md.sln` file using Visual Studio, and you
/Volumes/src/simhub/src/libs/googletest/README.md:97:Studio project.  Files that have names ending with -md use DLL
/Volumes/src/simhub/src/libs/googletest/README.md:102:Visual Studio 2005 or above, we recommend the -md version as /MD is
/Volumes/src/simhub/src/libs/googletest/README.md:108:"Preferences..." -> "Building" pane and defaults to xcode/build).
/Volumes/src/simhub/src/libs/googletest/README.md:139:see file [include/gtest/internal/gtest-port.h](include/gtest/internal/gtest-port.h).
/Volumes/src/simhub/src/libs/googletest/README.md:155:    -DGTEST_USE_OWN_TR1_TUPLE=0
/Volumes/src/simhub/src/libs/googletest/README.md:160:    -DGTEST_USE_OWN_TR1_TUPLE=1
/Volumes/src/simhub/src/libs/googletest/README.md:166:    -DGTEST_HAS_TR1_TUPLE=0
/Volumes/src/simhub/src/libs/googletest/README.md:170:### Multi-threaded Tests ###
/Volumes/src/simhub/src/libs/googletest/README.md:172:Google Test is thread-safe where the pthread library is available.
/Volumes/src/simhub/src/libs/googletest/README.md:180:    -DGTEST_HAS_PTHREAD=1
/Volumes/src/simhub/src/libs/googletest/README.md:184:    -DGTEST_HAS_PTHREAD=0
/Volumes/src/simhub/src/libs/googletest/README.md:201:    -DGTEST_CREATE_SHARED_LIBRARY=1
/Volumes/src/simhub/src/libs/googletest/README.md:204:a shared library instead - consult your linker's manual for how to do
/Volumes/src/simhub/src/libs/googletest/README.md:209:    -DGTEST_LINKED_AS_SHARED_LIBRARY=1
/Volumes/src/simhub/src/libs/googletest/README.md:232:    -DGTEST_DONT_DEFINE_FOO=1
/Volumes/src/simhub/src/libs/googletest/README.md:236:or `TEST`.  For example, with `-DGTEST_DONT_DEFINE_TEST=1`, you'll
/Volumes/src/simhub/src/libs/googletest/README.md:259:    cmake -Dgtest_build_tests=ON ${GTEST_DIR}
/Volumes/src/simhub/src/libs/googletest/README.md:267:    cmake -DPYTHON_EXECUTABLE=path/to/python -Dgtest_build_tests=ON ${GTEST_DIR}
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:6:# - This file will be run twice when building Google Mock (once via
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:11:# - The functions/macros defined in this file may depend on Google
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:31:        # hard-to-find crashes. When it is built as a static library, it is
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:35:        string(REPLACE "/MD" "-MT" ${flag_var} "${${flag_var}}")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:57:    # TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:58:    set(cxx_base_flags "-GS -W4 -WX -wd4251 -wd4275 -nologo -J -Zi")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:62:      set(cxx_base_flags "${cxx_base_flags} -wd4800")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:64:      set(cxx_base_flags "${cxx_base_flags} -wd4511 -wd4512")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:66:      # Resolved overload was found by argument-dependent lookup.
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:67:      set(cxx_base_flags "${cxx_base_flags} -wd4675")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:73:      # warning on a case-by-case basis. However, on Visual Studio 2005,
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:75:      # we disable the warning project-wide.
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:76:      set(cxx_base_flags "${cxx_base_flags} -wd4127")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:81:      set(cxx_base_flags "${cxx_base_flags} -wd4702")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:85:      set(cxx_base_flags "${cxx_base_flags} -bigobj")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:88:    set(cxx_base_flags "${cxx_base_flags} -D_UNICODE -DUNICODE -DWIN32 -D_WIN32")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:89:    set(cxx_base_flags "${cxx_base_flags} -DSTRICT -DWIN32_LEAN_AND_MEAN")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:90:    set(cxx_exception_flags "-EHsc -D_HAS_EXCEPTIONS=1")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:91:    set(cxx_no_exception_flags "-D_HAS_EXCEPTIONS=0")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:92:    set(cxx_no_rtti_flags "-GR-")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:94:    set(cxx_base_flags "-Wall -Wshadow")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:95:    set(cxx_exception_flags "-fexceptions")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:96:    set(cxx_no_exception_flags "-fno-exceptions")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:100:    set(cxx_no_rtti_flags "-fno-rtti -DGTEST_HAS_RTTI=0")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:102:      "-Wextra -Wno-unused-parameter -Wno-missing-field-initializers")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:104:    set(cxx_exception_flags "-features=except")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:107:    set(cxx_no_exception_flags "-features=no%except -DGTEST_HAS_EXCEPTIONS=0")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:108:    set(cxx_no_rtti_flags "-features=no%rtti -DGTEST_HAS_RTTI=0")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:112:    set(cxx_exception_flags "-qeh")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:113:    set(cxx_no_exception_flags "-qnoeh")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:117:    set(cxx_no_rtti_flags "-qnortti -DGTEST_HAS_RTTI=0")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:119:    set(cxx_base_flags "-AA -mt")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:120:    set(cxx_exception_flags "-DGTEST_HAS_EXCEPTIONS=1")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:121:    set(cxx_no_exception_flags "+noeh -DGTEST_HAS_EXCEPTIONS=0")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:127:    set(cxx_base_flags "${cxx_base_flags} -DGTEST_HAS_PTHREAD=1")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:129:    set(cxx_base_flags "${cxx_base_flags} -DGTEST_HAS_PTHREAD=0")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:138:  set(cxx_use_own_tuple "${cxx_default} -DGTEST_USE_OWN_TR1_TUPLE=1")
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:240:    # only at ctest runtime (by calling ctest -c <Configuration>), so
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:246:            --build_dir=${CMAKE_CURRENT_BINARY_DIR}/$<CONFIGURATION>)
/Volumes/src/simhub/src/libs/googletest/cmake/internal_utils.cmake:251:          --build_dir=${CMAKE_CURRENT_BINARY_DIR}/\${CTEST_CONFIGURATION_TYPE})
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:1:﻿<?xml version="1.0" encoding="utf-8"?>
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:4:    <ProjectGuid>{bca37a72-5b07-46cf-b44e-89f8e06451a2}</ProjectGuid>
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:74:    <None Include="..\include\gtest\gtest-death-test.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:77:    <None Include="..\include\gtest\gtest-message.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:80:    <None Include="..\include\gtest\gtest-param-test.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:83:    <None Include="..\include\gtest\gtest-spi.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:86:    <None Include="..\include\gtest\gtest-test-part.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:89:    <None Include="..\include\gtest\gtest-typed-test.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:101:    <None Include="..\include\gtest\internal\gtest-death-test-internal.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:104:    <None Include="..\include\gtest\internal\gtest-filepath.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:107:    <None Include="..\include\gtest\internal\gtest-internal.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:110:    <None Include="..\include\gtest\internal\gtest-linked_ptr.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:113:    <None Include="..\include\gtest\internal\gtest-param-util-generated.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:116:    <None Include="..\include\gtest\internal\gtest-param-util.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:119:    <None Include="..\include\gtest\internal\gtest-port.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:122:    <None Include="..\include\gtest\internal\gtest-string.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.cbproj:125:    <None Include="..\include\gtest\internal\gtest-type-util.h">
/Volumes/src/simhub/src/libs/googletest/codegear/gtest.groupproj:3:    <ProjectGuid>{c1d923e0-6cba-4332-9b6f-3420acbf5091}</ProjectGuid>
/Volumes/src/simhub/src/libs/googletest/codegear/gtest_all.cc:38:#include "src/gtest-all.cc"
/Volumes/src/simhub/src/libs/googletest/codegear/gtest_main.cbproj:1:﻿<?xml version="1.0" encoding="utf-8"?>
/Volumes/src/simhub/src/libs/googletest/codegear/gtest_main.cbproj:4:    <ProjectGuid>{bca37a72-5b07-46cf-b44e-89f8e06451a2}</ProjectGuid>
/Volumes/src/simhub/src/libs/googletest/codegear/gtest_unittest.cbproj:1:﻿<?xml version="1.0" encoding="utf-8"?>
/Volumes/src/simhub/src/libs/googletest/codegear/gtest_unittest.cbproj:4:    <ProjectGuid>{eea63393-5ac5-4b9c-8909-d75fef2daa41}</ProjectGuid>
/Volumes/src/simhub/src/libs/googletest/configure.ac:16:AC_CONFIG_AUX_DIR([build-aux])
/Volumes/src/simhub/src/libs/googletest/configure.ac:17:AC_CONFIG_HEADERS([build-aux/config.h])
/Volumes/src/simhub/src/libs/googletest/configure.ac:19:AC_CONFIG_FILES([scripts/gtest-config], [chmod +x scripts/gtest-config])
/Volumes/src/simhub/src/libs/googletest/configure.ac:24:AM_INIT_AUTOMAKE([1.9 dist-bzip2 dist-zip foreign subdir-objects])
/Volumes/src/simhub/src/libs/googletest/configure.ac:45:            [AS_HELP_STRING([--with-pthreads],
/Volumes/src/simhub/src/libs/googletest/configure.ac:56:                 [--with-pthreads was specified, but unable to be used])])])
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:21:|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:27:user-visible output. However, we may add `SUCCEED()` messages to Google Test's
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:31:|:-----------|:-----------------|:------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:47:Note: you can only use `FAIL()` in functions that return `void`. See the [Assertion Placement section](#assertion-placement) for more information.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:57:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:84:is awkward especially when the expression has side-effects or is expensive to
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:96:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:101:In the above, _predn_ is an _n_-ary predicate function or functor, where
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:128:  1. If you see a compiler error "no matching function to call" when using `ASSERT_PRED*` or `EXPECT_PRED*`, please see [this FAQ](FAQ.md#the-compiler-complains-no-matching-function-to-call-when-i-use-assert_predn-how-do-i-fix-it) for how to resolve it.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:129:  1. Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:223:### Using a Predicate-Formatter ###
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:228:following _predicate-formatter assertions_ to _fully_ customize how the
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:232:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:238:a predicate, `(ASSERT|EXPECT)_PRED_FORMAT*` take a _predicate-formatter_
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:250:A predicate-formatter returns a `::testing::AssertionResult` object to indicate
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:261:// A predicate-formatter for asserting that two integers are mutually prime.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:276:With this predicate-formatter, we can use
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:295:## Floating-Point Comparison ##
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:297:Comparing floating-point numbers is tricky. Due to round-off errors, it is
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:298:very unlikely that two floating-points will match exactly. Therefore,
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:299:`ASSERT_EQ` 's naive comparison usually doesn't work. And since floating-points
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:304:In general, for floating-point comparison to make sense, the user needs to
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:309:[this article on float comparison](http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm).
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:311:### Floating-Point Macros ###
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:314:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:324:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:329:### Floating-Point Predicate-Format Functions ###
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:331:Some floating-point operations are useful, but not that often used. In order
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:332:to avoid an explosion of new macros, we provide them as predicate-format
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:351:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:355:The generated output contains the human-readable error message
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:364:ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:408:can only be used in void-returning functions. This is a consequence of
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:409:Google Test not using exceptions. By placing it in a non-void function
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:413:If you need to use assertions in a function that returns non-void, one option
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:421:assertions that generate non-fatal failures, such as `ADD_FAILURE*` and
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:424:_Note_: Constructors and destructors are not considered void-returning
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:428:private void-returning method. However, you should be aware that a fatal
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:431:leaving your object in a partially-constructed state. Likewise, a fatal
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:433:partially-destructed state. Use assertions carefully in these situations!
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:439:user-extensible value printer.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:441:This printer knows how to print built-in C++ types, native arrays, STL
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:458:// namespace that defines Bar.  C++'s look-up rules rely on that.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:479:// namespace that defines Bar.  C++'s look-up rules rely on that.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:520:see [Exception Assertions](#exception-assertions).
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:522:If you want to test `EXPECT_*()/ASSERT_*()` failures in your test code, see [Catching Failures](#catching-failures).
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:529:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:545:terminates with a _non-zero_ exit status code.  There are two
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:547:with a non-zero value, or it may be killed by a signal.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:572:that verifies the process' exit code is non-zero.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:577:  1. (in the case of `ASSERT_EXIT` and `EXPECT_EXIT`) does the exit status satisfy _predicate_?  Or (in the case of `ASSERT_DEATH` and `EXPECT_DEATH`) is the exit status non-zero?  And
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:646:|:----|:----------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:681:command-line flag `--gtest_death_test_style`).
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:685:    * If the variable's value is `"threadsafe"`, the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:686:  * On Windows, the child is spawned using the `CreateProcess()` API, and re-executes the binary to cause just the single death test under consideration to be run - much like the `threadsafe` mode on POSIX.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:704:well-known problems with forking in the presence of threads, death tests should
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:705:be run in a single-threaded context. Sometimes, however, it isn't feasible to
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:706:arrange that kind of environment. For example, statically-initialized modules
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:764:Since _statement_ runs in the child process, any in-memory side effect (e.g.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:782:# Using Assertions in Sub-routines #
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:786:If a test sub-routine is called from several places, when an assertion
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:788:sub-routine the failure is from.  You can alleviate this problem using
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:793:|:-----------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:842:  1. With a suitable message, it's often enough to use `SCOPED_TRACE` at the beginning of a sub-routine, instead of at each call site.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:843:  1. When calling sub-routines inside a loop, make the loop iterator part of the message in `SCOPED_TRACE` such that you can know which iteration the failure is from.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:844:  1. Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for `SCOPED_TRACE`. You can simply use `""`.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:846:  1. The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:890:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:915:allows functions to catch fatal failures in a sub-routine and return
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:949:has at least one non-fatal failure, and `HasFailure()` returns `true`
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:981:  * Calling `RecordProperty()` outside of the lifespan of a test is allowed. If it's called outside of a test but between a test case's `SetUpTestCase()` and `TearDownTestCase()` methods, it will be attributed to the XML element for the test case. If it's called outside of all test cases (e.g. in a test environment), it will be attributed to the top-level XML element.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:991:that are expensive to set up, making the one-copy-per-test model prohibitively
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:995:single resource copy. So, in addition to per-test set-up/tear-down, Google Test
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:996:also supports per-test-case set-up/tear-down. To use it:
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1013:Here's an example of per-test-case set-up and tear-down:
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1017:  // Per-test-case set-up.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1024:  // Per-test-case tear-down.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1032:  // You can define per-test set-up and tear-down logic as usual.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1052:# Global Set-Up and Tear-Down #
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1054:Just as you can do set-up and tear-down at the test level and the test case
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1058:environment, which knows how to set-up and tear-down:
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1111:_Value-parameterized tests_ allow you to test your code with different
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1138:Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1140:Here are some other situations when value-parameterized tests come handy:
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1143:  * You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1145:## How to Write Value-Parameterized Tests ##
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1147:To write value-parameterized tests, first you should define a fixture
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1164:// Or, when you want to add parameters to a pre-existing fixture class:
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1198:|:----------------------------|:------------------------------------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1200:| `ValuesIn(container)` and `ValuesIn(begin, end)` | Yields values from a C-style array, an STL-style container, or an iterator range `[begin, end)`. `container`, `begin`, and `end` can be expressions whose values are determined at run time.  |
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1202:| `Combine(g1, g2, ..., gN)`  | Yields all combinations (the Cartesian product for the math savvy) of the values generated by the `N` generators. This is only available if your system provides the `<tr1/tuple>` header. If you are sure your system does, and Google Test disagrees, you can override it by defining `GTEST_HAS_TR1_TUPLE=1`. See comments in [include/gtest/internal/gtest-port.h](../include/gtest/internal/gtest-port.h) for more information. |
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1204:For more details, see the comments at the definitions of these functions in the [source code](../include/gtest/gtest-param-test.h).
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1229:You can use these names in [--gtest\_filter](#running-a-subset-of-the-tests).
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1257:## Creating Value-Parameterized Abstract Tests ##
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1260:file. Sometimes you may want to define value-parameterized tests in a
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1267:all the interface-conformance tests for free.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1331:  TypeParam n = this->value_;
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1352:# Type-Parameterized Tests #
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1354:_Type-parameterized tests_ are like typed tests, except that they
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1361:of type-parameterized tests to verify properties that any valid
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1376:Next, declare that you will define a type-parameterized test case:
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1385:Then, use `TYPED_TEST_P()` to define a type-parameterized test.  You
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1438:_black-box testing principle_, most of the time you should test your code
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1443:absolutely have to test non-public interface code though, you can. There are
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1454:files is not a good way to reuse code - you should not do this in production
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1459:uses, and put the private declarations in a `*-internal.h` file. Your
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1472:are technically defined in sub-classes of the fixture.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1475:class, which is then declared in a `*-internal.h` file. Your clients aren't
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1554:`"gtest/gtest-spi.h"` contains some constructs to do this.  After 
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1558:|:--------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1564:|:-----------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1566:if you are expecting a non-fatal (e.g. `EXPECT_*`) failure.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1571:  1. _statement_ in `EXPECT_FATAL_FAILURE()` cannot reference local non-static variables or non-static members of `this` object.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1575:synchronization primitives in `"gtest/internal/gtest-port.h"` have
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1576:been implemented, Google Test will become thread-safe, meaning that
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1578:that, however, Google Test only supports single-threaded usage. Once
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1579:thread-safe, `EXPECT_FATAL_FAILURE()` and `EXPECT_NONFATAL_FAILURE()`
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1586:|:-----------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1603:  // Do NOT delete or free the return value - it's managed by the
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1618:// Do NOT delete the returned object - it's managed by the UnitTest class.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1620:  ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1622:       test_info->name(), test_info->test_case_name());
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1661:  * [TestPartResult](../include/gtest/gtest-test-part.h#L47) represents the result of a test assertion.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1698:- note the "s" at the end of the name) in your
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1705:      ::testing::UnitTest::GetInstance()->listeners();
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1738:You may use failure-raising macros (`EXPECT_*()`, `ASSERT_*()`,
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1749:We have a sample of failure-raising listener
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1760:program with the `--help` flag.  You can also use `-h`, `-?`, or `/?`
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1766:`--gtest_foo`, write `::testing::GTEST_FLAG(foo)`.  A common pattern is
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1789:`--gtest_list_tests` overrides all other flags and lists tests in the following
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1809:or the `--gtest_filter` flag to a filter string, Google Test will only run the
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1813:The format of a filter is a '`:`'-separated list of wildcard patterns (called
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1814:the positive patterns) optionally followed by a '`-`' and another
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1815:'`:`'-separated pattern list (called the negative patterns). A test matches the
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1820:character). For convenience, the filter `'*-NegativePatterns'` can be also
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1821:written as `'-NegativePatterns'`.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1826:  * `./foo_test --gtest_filter=*` Also runs everything, due to the single match-everything `*` value.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1827:  * `./foo_test --gtest_filter=FooTest.*` Runs everything in test case `FooTest`.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1828:  * `./foo_test --gtest_filter=*Null*:*Constructor*` Runs any test whose full name contains either `"Null"` or `"Constructor"`.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1829:  * `./foo_test --gtest_filter=-*DeathTest.*` Runs all non-death tests.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1830:  * `./foo_test --gtest_filter=FooTest.*-FooTest.Bar` Runs everything in test case `FooTest` except `FooTest.Bar`.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1858:_Note:_ This feature should only be used for temporary pain-relief. You still
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1870:To include [disabled tests](#temporarily-disabling-tests) in test
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1872:`--gtest_also_run_disabled_tests` flag or set the
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1875:[--gtest\_filter](#running-a-subset-of-the-tests) flag to further select
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1882:Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1886:The `--gtest_repeat` flag allows you to repeat all (or selected) test methods
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1890:| `$ foo_test --gtest_repeat=1000` | Repeat foo\_test 1000 times and don't stop at failures. |
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1891:|:---------------------------------|:--------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1892:| `$ foo_test --gtest_repeat=-1`   | A negative count means repeating forever.               |
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1893:| `$ foo_test --gtest_repeat=1000 --gtest_break_on_failure` | Repeat foo\_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks. |
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1894:| `$ foo_test --gtest_repeat=1000 --gtest_filter=FooBar` | Repeat the tests whose name matches the filter 1000 times. |
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1896:If your test program contains global set-up/tear-down code registered
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1905:You can specify the `--gtest_shuffle` flag (or set the `GTEST_SHUFFLE`
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1912:order-related test failure later. To specify the random seed
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1913:explicitly, use the `--gtest_random_seed=SEED` flag (or set the
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1919:If you combine this with `--gtest_repeat=N`, Google Test will pick a
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1920:different random seed and re-shuffle the tests in each iteration.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1933:You can set the GTEST\_COLOR environment variable or set the `--gtest_color`
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1937:non-Windows platforms) the `TERM` environment variable is set to `xterm` or
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1938:`xterm-color`.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1945:suppress that, run the test program with the `--gtest_print_time=0`
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:1959:`--gtest_output` flag to the string `"xml:_path_to_output_file_"`, which will
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2004:<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2009:      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2032:### Turning Assertion Failures into Break-Points ###
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2036:mode. Google Test's _break-on-failure_ mode supports this behavior.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2039:other than `0` . Alternatively, you can use the `--gtest_break_on_failure`
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2044:### Disabling Catching Test-Thrown Exceptions ###
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2051:cause a pop-up window, so catching the exceptions allows you to run
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2058:`--gtest_catch_exceptions=0` flag when running the tests.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2097:non-zero code, which will also signal a test failure to your test
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2102:the `--gtest_throw_on_failure` flag on the command-line or setting the
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2103:`GTEST_THROW_ON_FAILURE` environment variable to a non-zero value.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2122:  1. On each shard, set the `GTEST_SHARD_INDEX` environment variable to the index of the shard.  Different shards must be assigned different indices, which must be in the range `[0, GTEST_TOTAL_SHARDS - 1]`.
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2129:variable `GTEST_SHARD_STATUS_FILE` to a non-existent file path.  If a
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2172:`gtest/gtest.h` and `gtest/gtest-all.cc` in it.  These files contain
/Volumes/src/simhub/src/libs/googletest/docs/AdvancedGuide.md:2182:can read the [Frequently-Asked Questions](FAQ.md).
/Volumes/src/simhub/src/libs/googletest/docs/DevGuide.md:13:All Google Test source and pre-built packages are provided under the [New BSD License](http://www.opensource.org/licenses/bsd-license.php).
/Volumes/src/simhub/src/libs/googletest/docs/DevGuide.md:74:  * If you are an individual writing original source code and you're sure you own the intellectual property, then you'll need to sign an [individual CLA](http://code.google.com/legal/individual-cla-v1.0.html).
/Volumes/src/simhub/src/libs/googletest/docs/DevGuide.md:75:  * If you work for a company that wants to allow you to contribute your work to Google Test, then you'll need to sign a [corporate CLA](http://code.google.com/legal/corporate-cla-v1.0.html).
/Volumes/src/simhub/src/libs/googletest/docs/DevGuide.md:83:we use a fairly rigid coding style, as defined by the [google-styleguide](http://code.google.com/p/google-styleguide/) project.  All patches will be expected
/Volumes/src/simhub/src/libs/googletest/docs/DevGuide.md:84:to conform to the style outlined [here](http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml).
/Volumes/src/simhub/src/libs/googletest/docs/DevGuide.md:90:source (`foo.h.pump`) and re-generate the C++ file using Pump.  You
/Volumes/src/simhub/src/libs/googletest/docs/DevGuide.md:118:  1. A release branch named `release-X.Y` is created.
/Volumes/src/simhub/src/libs/googletest/docs/DevGuide.md:124:---
/Volumes/src/simhub/src/libs/googletest/docs/Documentation.md:2:-- **if you use a released version of Google Test, please read the
/Volumes/src/simhub/src/libs/googletest/docs/Documentation.md:5:  * [Primer](Primer.md) -- start here if you are new to Google Test.
/Volumes/src/simhub/src/libs/googletest/docs/Documentation.md:6:  * [Samples](Samples.md) -- learn from examples.
/Volumes/src/simhub/src/libs/googletest/docs/Documentation.md:7:  * [AdvancedGuide](AdvancedGuide.md) -- learn more about Google Test.
/Volumes/src/simhub/src/libs/googletest/docs/Documentation.md:8:  * [XcodeGuide](XcodeGuide.md) -- how to use Google Test in Xcode on Mac.
/Volumes/src/simhub/src/libs/googletest/docs/Documentation.md:9:  * [Frequently-Asked Questions](FAQ.md) -- check here before asking a question on the mailing list.
/Volumes/src/simhub/src/libs/googletest/docs/Documentation.md:13:  * [DevGuide](DevGuide.md) -- read this _before_ writing your first patch.
/Volumes/src/simhub/src/libs/googletest/docs/Documentation.md:14:  * [PumpManual](PumpManual.md) -- how we generate some of Google Test's source files.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:13:be) a single best framework - you have to pick the right tool for the
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:19:Test.  We don't claim them to be unique to Google Test - rather, the
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:24:  * Nonfatal assertions (`EXPECT_*`) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:28:  * `SCOPED_TRACE` helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:31:  * Simple things are easy in Google Test, while hard things are possible: in addition to advanced features like [global test environments](AdvancedGuide.md#global-set-up-and-tear-down) and tests parameterized by [values](AdvancedGuide.md#value-parameterized-tests) or [types](docs/AdvancedGuide.md#typed-tests), Google Test supports various ways for the user to extend the framework -- if Google Test doesn't do something out of the box, chances are that a user can implement the feature using Google Test's public API, without changing Google Test itself.  In particular, you can:
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:32:    * expand your testing vocabulary by defining [custom predicates](AdvancedGuide.md#predicate-assertions-for-better-error-messages),
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:33:    * teach Google Test how to [print your types](AdvancedGuide.md#teaching-google-test-how-to-print-your-values),
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:34:    * define your own testing macros or utilities and verify them using Google Test's [Service Provider Interface](AdvancedGuide.md#catching-failures), and
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:35:    * reflect on the test cases or change the test output format by intercepting the [test events](AdvancedGuide.md#extending-google-test-by-handling-test-events).
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:47:It is not always possible to make Google Test warning-free for everyone.  Or, it may not be desirable if the warning is rarely enabled and fixing the violations makes the code more complex.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:49:If you see warnings when compiling Google Test, we suggest that you use the `-isystem` flag (assuming your are using GCC) to mark Google Test headers as system headers.  That'll suppress warnings from Google Test headers.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:56:  1. any identifier that starts with an `_` followed by an upper-case letter, and
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:67:  1. If `TestCaseName` starts with an `_` followed by an upper-case letter (say, `_Foo`), we end up with `_Foo_TestName_Test`, which is reserved and thus invalid.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:73:(Actually, `TestCaseName` can start with `_` -- as long as the `_` isn't
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:74:followed by an upper-case letter.  But that's getting complicated.  So
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:97:## Why is it not recommended to install a pre-compiled copy of Google Test (for example, into /usr/local)? ##
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:105:got-cha: every user needs to compile his tests using the _same_ compiler
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:110:Why?  Because C++ has this thing called the One-Definition Rule: if
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:115:doesn't, you get strange run-time behaviors that are unexpected and
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:121:Therefore, for your sanity, we recommend to avoid installing pre-compiled
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:126:## How do I generate 64-bit binaries on Windows (using Visual Studio 2008)? ##
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:130:Load the supplied Visual Studio solution file, either `msvc\gtest-md.sln` or
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:138:`Standard` toolbar, which allow you to toggle between building 32-bit or
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:139:64-bit binaries (or both at once using Batch Build).
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:144:this, multi-select (e.g. using shift-click) all projects (but not the
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:145:solution) in the `Solution Explorer`. Right-click one of them and
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:152:solution. When the build is complete, the 64-bit binaries will be in
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:161:`PATH/TO/configure CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"`
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:163:You should be able to replace the `-mno-cygwin` option with direct links
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:173:[these instructions](http://wiki.wxwidgets.org/Cross-Compiling_Under_Linux#Cross-compiling_under_Linux_for_MS_Windows)
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:181:Due to some peculiarity of C++, it requires some non-trivial template
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:185:harder to maintain and more error-prone than necessary).
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:204:Finally, with the growth of Google Mock's [matcher](../../googlemock/docs/CookBook.md#using-matchers-in-google-test-assertions) library, we are
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:225:It's difficult to write thread-safe code.  Most tests are not written
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:226:with thread-safety in mind, and thus may not work correctly in a
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:227:multi-threaded setting.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:243:  1. The `EXPECT_*` family of macros will continue even after a failure, allowing multiple failures in a `TEST` to be reported in a single run. This is a popular feature, as in C++ the edit-compile-test cycle is usually quite long and being able to fixing more than one thing at a time is a blessing.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:274:Yet, many people think this is one line too many. :-) Our goal was to
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:293:  * The runner-style requires to split the information into two pieces: the definition of the death test itself, and the specification for the runner on how to run the death test and what to expect.  The death test would be written in C++, while the runner spec may or may not be.  A user needs to carefully keep the two in sync. `ASSERT_DEATH(statement, expected_message)` specifies all necessary information in one place, in one language, without boilerplate code. It is very declarative.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:294:  * `ASSERT_DEATH` has a similar syntax and error-reporting semantics as other Google Test assertions, and thus is easy to learn.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:304:  * `ASSERT_DEATH` can reference local variables in the current function, and you can decide how many death tests you want based on run-time information.  For example,
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:315:The runner-based approach tends to be more static and less flexible, or requires more user effort to get this kind of flexibility.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:319:fast, as `fork()` uses copy-on-write pages and incurs almost zero
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:320:overhead, and the child process starts from the user-supplied
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:328:Death tests (`EXPECT_DEATH`, etc) are executed in a sub-process s.t. the
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:330:result, any in-memory side effects they incur are observable in their
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:331:respective sub-processes, but not in the parent process. You can think of them
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:359:data-driven tests in general. We hope to be able to make improvements in this
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:391:      ... additional set-up work ...
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:394:      ... clean-up work for FooTest ...
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:419:## My death test hangs (or seg-faults). How do I fix it? ##
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:436:If you go with thread-safe death tests, remember that they rerun the test
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:438:program can run side-by-side with itself and is deterministic.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:442:bullet - sorry!
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:444:## Should I use the constructor/destructor of the test fixture or the set-up/tear-down function? ##
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:452:When you need to write per-test set-up and tear-down logic, you have
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:461:  * If the tear-down operation could throw an exception, you must use `TearDown()` as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer `TearDown()` if you want to write portable tests that work with or without exceptions.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:462:  * The assertion macros throw an exception when flag `--gtest_throw_on_failure` is specified. Therefore, you shouldn't use Google Test assertions in a destructor if you plan to run your tests with this flag.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:501:type of the function pointer for the `int`-version of `IsPositive()`.)
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:515:ASSERT_PRED1(IsNegative*<int>*, -5);
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:526:as the C++ pre-processor thinks you are giving `ASSERT_PRED2` 4 arguments,
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:575:## My set-up function is not called. Why? ##
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:577:C++ is case-sensitive. It should be spelled as `SetUp()`.  Did you
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:588:the corresponding source code, or use `C-x `` to jump to the next failure.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:621:The Google Test output is meant to be a concise and human-friendly report. If
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:681:    return obj->private_member1_;
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:691:  * If the methods are declared **protected**, you can change their access level in a test-only subclass:
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:757:No. You can use a feature called [value-parameterized tests](AdvancedGuide.md#Value_Parameterized_Tests) which
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:859:  * If you explicitly declare a non-default constructor for class `Foo`, then you need to define a default constructor, even if it would be empty.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:860:  * If `Foo` has a const non-static data member, then you have to define the default constructor _and_ initialize the const member in the initializer list of the constructor. (Early versions of `gcc` doesn't force you to initialize the const member. It's a bug that has been fixed in `gcc 4`.)
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:881:the test case would require multiple set-up and tear-down processes, which is
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:900:## But I don't like calling my entire test case FOODeathTest when it contains both death tests and non-death tests. What do I do? ##
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:920:If you use a user-defined type `FooType` in an assertion, you must make sure
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:947:set to /MT (use multi-threaded static libraries, /MTd for debug). If
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:948:your project uses something else, for example /MD (use multi-threaded
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:955:using gtest-md.vcproj instead of gtest.vcproj.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:959:[warning](Primer.md#important-note-for-visual-c-users) on
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:970:`export CC=cc CXX=CC CXXFLAGS='-library=stlport4'`
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:975:different things accordingly, you are leaking test-only logic into
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:976:production code and there is no easy way to ensure that the test-only
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:984:differently under test is [dependency injection](http://jamesshore.com/Blog/Dependency-Injection-Demystified.html).
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:987:for-test logic at all, there is no danger in accidentally running it.
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:1005:  -DGTEST_DONT_DEFINE_FOO=1
/Volumes/src/simhub/src/libs/googletest/docs/FAQ.md:1008:from `FOO` to `GTEST_FOO`. For example, with `-DGTEST_DONT_DEFINE_TEST=1`, you'll need to write
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:13:  1. Tests should be _portable_ and _reusable_. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:14:  1. When tests fail, they should provide as much _information_ about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:16:  1. Tests should be _fast_. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:36:(basically you want to compile `src/gtest-all.cc` with `GTEST_ROOT`
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:88:possibly skipping clean-up code that comes after it, it may cause a space leak.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:89:Depending on the nature of the leak, it may or may not be worth fixing - so
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:104:macro--in particular, C strings and `string` objects. If a wide string
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:106:streamed to an assertion, it will be translated to UTF-8 when printed.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:113:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:129:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:146:arguments, see this Google Mock [recipe](../../googlemock/docs/CookBook.md#teaching-google-mock-how-to-print-your-values).).
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:148:These assertions can work with a user-defined type, but only if you define the
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:181:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:190:comparison of two wide strings fails, their values will be printed as UTF-8
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:205:  1. The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:241:Google Test groups the test results by test cases, so logically-related tests
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:256:  1. Derive a class from `::testing::Test` . Start its body with `protected:` or `public:` as we'll want to access fixture members from sub-classes.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:258:  1. If necessary, write a default constructor or `SetUp()` function to prepare the objects for each test. A common mistake is to spell `SetUp()` as `Setup()` with a small `u` - don't let that happen to you.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:259:  1. If necessary, write a destructor or `TearDown()` function to release any resources you allocated in `SetUp()` . To learn when you should use the constructor/destructor and when you should use `SetUp()/TearDown()`, read this [FAQ entry](FAQ.md#should-i-use-the-constructordestructor-of-the-test-fixture-or-the-set-uptear-down-function).
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:371:`TEST()` and `TEST_F()` implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:373:After defining your tests, you can run them with `RUN_ALL_TESTS()` , which returns `0` if all the tests are successful, or `1` otherwise. Note that `RUN_ALL_TESTS()` runs _all tests_ in your link unit -- they can be from different test cases, or even different source files.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:386:step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly,
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:396:conflicts with some advanced Google Test features (e.g. thread-safe death
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:417:    // You can do set-up work for each test here.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:421:    // You can do clean-up work that doesn't throw exceptions here.
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:486:There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you _must_ change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:496:Google Test is designed to be thread-safe.  The implementation is
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:497:thread-safe on systems where the `pthreads` library is available.  It
/Volumes/src/simhub/src/libs/googletest/docs/Primer.md:502:synchronization primitives in `gtest-port.h` for your platform.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:10:error-prone work.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:23:non-intuitive, non-trivial changes in the script. This is especially
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:30:prefer) is a simple meta-programming tool for C++. The idea is that a
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:35:view it as a small Domain-Specific Language. The meta language is
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:36:designed to be non-intrusive (s.t. it won't confuse Emacs' C++ mode,
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:43:  * Pump tries to be smart with respect to [Google's style guide](http://code.google.com/p/google-styleguide/): it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:44:  * The format is human-readable and more concise than XML.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:56:// Foo$i does blah for $i-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:75:// Foo0 does blah for 0-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:81:// Foo1 does blah for 1-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:87:// Foo2 does blah for 2-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:93:// Foo3 does blah for 3-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:123:|:----------------|:-----------------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:135:code, Pump ignores a new-line character if it's right after `$for foo`
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:138:need to insert an extra new-line in such places for a new-line to show
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:172:You can find real-world applications of Pump in [Google Test](http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgoogletest\.googlecode\.com) and [Google Mock](http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgooglemock\.googlecode\.com).  The source file `foo.h.pump` generates `foo.h`.
/Volumes/src/simhub/src/libs/googletest/docs/PumpManual.md:177:  * To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting `[[]]` followed by a new line. Since any new-line character next to `[[` or `]]` is ignored, the generated code won't contain this new line.
/Volumes/src/simhub/src/libs/googletest/docs/Samples.md:2:[samples folder](../samples) has a number of well-commented samples showing how to use a
/Volumes/src/simhub/src/libs/googletest/docs/Samples.md:9:  * [Sample #5](../samples/sample5_unittest.cc) teaches how to reuse a test fixture in multiple test cases by deriving sub-fixtures from it.
/Volumes/src/simhub/src/libs/googletest/docs/Samples.md:10:  * [Sample #6](../samples/sample6_unittest.cc) demonstrates type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/Samples.md:11:  * [Sample #7](../samples/sample7_unittest.cc) teaches the basics of value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/Samples.md:12:  * [Sample #8](../samples/sample8_unittest.cc) shows using `Combine()` in value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:21:|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:27:user-visible output. However, we may add `SUCCEED()` messages to Google Test's
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:31:|:-----------|:-----------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:55:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:82:is awkward especially when the expression has side-effects or is expensive to
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:94:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:99:In the above, _predn_ is an _n_-ary predicate function or functor, where
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:126:  1. If you see a compiler error "no matching function to call" when using `ASSERT_PRED*` or `EXPECT_PRED*`, please see [this](V1_5_FAQ.md#the-compiler-complains-about-undefined-references-to-some-static-const-member-variables-but-i-did-define-them-in-the-class-body-whats-wrong) for how to resolve it.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:127:  1. Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:221:### Using a Predicate-Formatter ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:226:following _predicate-formatter assertions_ to _fully_ customize how the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:230:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:236:a predicate, `(ASSERT|EXPECT)_PRED_FORMAT*` take a _predicate-formatter_
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:248:A predicate-formatter returns a `::testing::AssertionResult` object to indicate
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:259:// A predicate-formatter for asserting that two integers are mutually prime.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:274:With this predicate-formatter, we can use
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:293:## Floating-Point Comparison ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:295:Comparing floating-point numbers is tricky. Due to round-off errors, it is
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:296:very unlikely that two floating-points will match exactly. Therefore,
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:297:`ASSERT_EQ` 's naive comparison usually doesn't work. And since floating-points
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:302:In general, for floating-point comparison to make sense, the user needs to
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:307:[this article on float comparison](http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:309:### Floating-Point Macros ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:312:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:322:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:327:### Floating-Point Predicate-Format Functions ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:329:Some floating-point operations are useful, but not that often used. In order
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:330:to avoid an explosion of new macros, we provide them as predicate-format
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:349:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:353:The generated output contains the human-readable error message
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:362:ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:406:can only be used in void-returning functions. This is a consequence of
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:407:Google Test not using exceptions. By placing it in a non-void function
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:411:If you need to use assertions in a function that returns non-void, one option
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:419:assertions that generate non-fatal failures, such as `ADD_FAILURE*` and
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:422:_Note_: Constructors and destructors are not considered void-returning
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:426:private void-returning method. However, you should be aware that a fatal
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:429:leaving your object in a partially-constructed state. Likewise, a fatal
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:431:partially-destructed state. Use assertions carefully in these situations!
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:447:If you want to test `EXPECT_*()/ASSERT_*()` failures in your test code, see [Catching Failures](#catching-failures).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:454:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:470:terminates with a _non-zero_ exit status code.  There are two
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:472:with a non-zero value, or it may be killed by a signal.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:497:that verifies the process' exit code is non-zero.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:502:  1. (in the case of `ASSERT_EXIT` and `EXPECT_EXIT`) does the exit status satisfy _predicate_?  Or (in the case of `ASSERT_DEATH` and `EXPECT_DEATH`) is the exit status non-zero?  And
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:571:|:----|:----------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:605:command-line flag `--gtest_death_test_style`).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:609:    * If the variable's value is `"threadsafe"`, the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:610:  * On Windows, the child is spawned using the `CreateProcess()` API, and re-executes the binary to cause just the single death test under consideration to be run - much like the `threadsafe` mode on POSIX.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:628:well-known problems with forking in the presence of threads, death tests should
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:629:be run in a single-threaded context. Sometimes, however, it isn't feasible to
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:630:arrange that kind of environment. For example, statically-initialized modules
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:689:Since _statement_ runs in the child process, any in-memory side effect (e.g.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:707:# Using Assertions in Sub-routines #
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:711:If a test sub-routine is called from several places, when an assertion
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:713:sub-routine the failure is from.  You can alleviate this problem using
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:718:|:-----------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:767:  1. With a suitable message, it's often enough to use `SCOPED_TRACE` at the beginning of a sub-routine, instead of at each call site.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:768:  1. When calling sub-routines inside a loop, make the loop iterator part of the message in `SCOPED_TRACE` such that you can know which iteration the failure is from.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:769:  1. Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for `SCOPED_TRACE`. You can simply use `""`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:771:  1. The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:817:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:842:allows functions to catch fatal failures in a sub-routine and return
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:876:has at least one non-fatal failure, and `HasFailure()` returns `true`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:885:additional information, where `value` can be either a C string or a 32-bit
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:918:that are expensive to set up, making the one-copy-per-test model prohibitively
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:922:single resource copy. So, in addition to per-test set-up/tear-down, Google Test
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:923:also supports per-test-case set-up/tear-down. To use it:
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:940:Here's an example of per-test-case set-up and tear-down:
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:944:  // Per-test-case set-up.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:951:  // Per-test-case tear-down.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:959:  // You can define per-test set-up and tear-down logic as usual.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:979:# Global Set-Up and Tear-Down #
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:981:Just as you can do set-up and tear-down at the test level and the test case
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:985:environment, which knows how to set-up and tear-down:
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1038:_Value-parameterized tests_ allow you to test your code with different
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1065:Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1067:Here are some other situations when value-parameterized tests come handy:
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1070:  * You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1072:## How to Write Value-Parameterized Tests ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1074:To write value-parameterized tests, first you should define a fixture
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1113:|:----------------------------|:------------------------------------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1115:| `ValuesIn(container)` and `ValuesIn(begin, end)` | Yields values from a C-style array, an STL-style container, or an iterator range `[begin, end)`.                  |
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1117:| `Combine(g1, g2, ..., gN)`  | Yields all combinations (the Cartesian product for the math savvy) of the values generated by the `N` generators. This is only available if your system provides the `<tr1/tuple>` header. If you are sure your system does, and Google Test disagrees, you can override it by defining `GTEST_HAS_TR1_TUPLE=1`. See comments in [include/gtest/internal/gtest-port.h](../include/gtest/internal/gtest-port.h) for more information. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1119:For more details, see the comments at the definitions of these functions in the [source code](../include/gtest/gtest-param-test.h).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1144:You can use these names in [--gtest\-filter](#running-a-subset-of-the-tests).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1172:## Creating Value-Parameterized Abstract Tests ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1175:file. Sometimes you may want to define value-parameterized tests in a
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1182:all the interface-conformance tests for free.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1246:  TypeParam n = this->value_;
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1267:# Type-Parameterized Tests #
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1269:_Type-parameterized tests_ are like typed tests, except that they
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1276:of type-parameterized tests to verify properties that any valid
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1291:Next, declare that you will define a type-parameterized test case:
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1300:Then, use `TYPED_TEST_P()` to define a type-parameterized test.  You
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1353:_black-box testing principle_, most of the time you should test your code
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1358:absolutely have to test non-public interface code though, you can. There are
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1369:files is not a good way to reuse code - you should not do this in production
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1374:uses, and put the private declarations in a `*-internal.h` file. Your
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1387:are technically defined in sub-classes of the fixture.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1390:class, which is then declared in a `*-internal.h` file. Your clients aren't
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1469:`<gtest/gtest-spi.h>` contains some constructs to do this.  After
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1473:|:--------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1479:|:-----------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1481:if you are expecting a non-fatal (e.g. `EXPECT_*`) failure.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1486:  1. _statement_ in `EXPECT_FATAL_FAILURE()` cannot reference local non-static variables or non-static members of `this` object.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1490:synchronization primitives in `<gtest/internal/gtest-port.h>` have
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1491:been implemented, Google Test will become thread-safe, meaning that
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1494:that, however, Google Test only supports single-threaded usage.  Once
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1495:thread-safe, `EXPECT_FATAL_FAILURE()` and `EXPECT_NONFATAL_FAILURE()`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1502:|:-----------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1519:  // Do NOT delete or free the return value - it's managed by the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1534:// Do NOT delete the returned object - it's managed by the UnitTest class.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1536:  ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1538:       test_info->name(), test_info->test_case_name());
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1577:  * [TestPartResult](../include/gtest/gtest-test-part.h#L42) represents the result of a test assertion.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1614:- note the "s" at the end of the name) in your
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1621:      ::testing::UnitTest::GetInstance()->listeners();
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1654:You may use failure-raising macros (`EXPECT_*()`, `ASSERT_*()`,
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1665:We have a sample of failure-raising listener
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1676:program with the `--help` flag.  You can also use `-h`, `-?`, or `/?`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1682:`--gtest_foo`, write `::testing::GTEST_FLAG(foo)`.  A common pattern is
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1705:`--gtest_list_tests` overrides all other flags and lists tests in the following
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1725:or the `--gtest_filter` flag to a filter string, Google Test will only run the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1729:The format of a filter is a '`:`'-separated list of wildcard patterns (called
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1730:the positive patterns) optionally followed by a '`-`' and another
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1731:'`:`'-separated pattern list (called the negative patterns). A test matches the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1736:character). For convenience, the filter `'*-NegativePatterns'` can be also
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1737:written as `'-NegativePatterns'`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1742:  * `./foo_test --gtest_filter=*` Also runs everything, due to the single match-everything `*` value.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1743:  * `./foo_test --gtest_filter=FooTest.*` Runs everything in test case `FooTest`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1744:  * `./foo_test --gtest_filter=*Null*:*Constructor*` Runs any test whose full name contains either `"Null"` or `"Constructor"`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1745:  * `./foo_test --gtest_filter=-*DeathTest.*` Runs all non-death tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1746:  * `./foo_test --gtest_filter=FooTest.*-FooTest.Bar` Runs everything in test case `FooTest` except `FooTest.Bar`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1774:_Note:_ This feature should only be used for temporary pain-relief. You still
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1786:To include [disabled tests](#temporarily-disabling-tests) in test
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1788:`--gtest_also_run_disabled_tests` flag or set the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1791:[--gtest\_filter](#running-a-subset-of-the-tests) flag to further select
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1798:Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1802:The `--gtest_repeat` flag allows you to repeat all (or selected) test methods
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1806:| `$ foo_test --gtest_repeat=1000` | Repeat foo\_test 1000 times and don't stop at failures. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1807:|:---------------------------------|:--------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1808:| `$ foo_test --gtest_repeat=-1`   | A negative count means repeating forever.               |
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1809:| `$ foo_test --gtest_repeat=1000 --gtest_break_on_failure` | Repeat foo\_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1810:| `$ foo_test --gtest_repeat=1000 --gtest_filter=FooBar` | Repeat the tests whose name matches the filter 1000 times. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1812:If your test program contains global set-up/tear-down code registered
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1821:You can specify the `--gtest_shuffle` flag (or set the `GTEST_SHUFFLE`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1828:order-related test failure later. To specify the random seed
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1829:explicitly, use the `--gtest_random_seed=SEED` flag (or set the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1835:If you combine this with `--gtest_repeat=N`, Google Test will pick a
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1836:different random seed and re-shuffle the tests in each iteration.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1849:You can set the GTEST\_COLOR environment variable or set the `--gtest_color`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1853:non-Windows platforms) the `TERM` environment variable is set to `xterm` or
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1854:`xterm-color`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1861:suppress that, run the test program with the `--gtest_print_time=0`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1875:`--gtest_output` flag to the string `"xml:_path_to_output_file_"`, which will
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1920:<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1925:      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1948:### Turning Assertion Failures into Break-Points ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1952:mode. Google Test's _break-on-failure_ mode supports this behavior.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1955:other than `0` . Alternatively, you can use the `--gtest_break_on_failure`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1960:### Suppressing Pop-ups Caused by Exceptions ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1965:catch it. Instead, you'll see a pop-up dialog, at which point you can attach
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1968:However, if you don't want to see the pop-ups (for example, if you run the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1970:a non- `0` value, or use the `--gtest_catch_exceptions` flag. Google Test now
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1971:catches all test-thrown exceptions and logs them as failures.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:1974:`--gtest_catch_exceptions` have no effect on Google Test's behavior on Linux or
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:2013:non-zero code, which will also signal a test failure to your test
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:2018:the `--gtest_throw_on_failure` flag on the command-line or setting the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:2019:`GTEST_THROW_ON_FAILURE` environment variable to a non-zero value.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:2036:  1. On each shard, set the `GTEST_SHARD_INDEX` environment variable to the index of the shard.  Different shards must be assigned different indices, which must be in the range `[0, GTEST_TOTAL_SHARDS - 1]`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:2043:variable `GTEST_SHARD_STATUS_FILE` to a non-existent file path.  If a
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_AdvancedGuide.md:2086:`gtest/gtest.h` and `gtest/gtest-all.cc` in it.  These files contain
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Documentation.md:1:This page lists all official documentation wiki pages for Google Test **1.5.0** -- **if you use a different version of Google Test, make sure to read the documentation for that version instead.**
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Documentation.md:3:  * [Primer](V1_5_Primer.md) -- start here if you are new to Google Test.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Documentation.md:4:  * [Samples](Samples.md) -- learn from examples.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Documentation.md:5:  * [AdvancedGuide](V1_5_AdvancedGuide.md) -- learn more about Google Test.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Documentation.md:6:  * [XcodeGuide](V1_5_XcodeGuide.md) -- how to use Google Test in Xcode on Mac.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Documentation.md:7:  * [Frequently-Asked Questions](V1_5_FAQ.md) -- check here before asking a question on the mailing list.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Documentation.md:11:  * DevGuide -- read this _before_ writing your first patch.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Documentation.md:12:  * [PumpManual](V1_5_PumpManual.md) -- how we generate some of Google Test's source files.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:13:be) a single best framework - you have to pick the right tool for the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:19:Test.  We don't claim them to be unique to Google Test - rather, the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:24:  * Nonfatal assertions (`EXPECT_*`) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:29:  * `SCOPED_TRACE` helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:32:## How do I generate 64-bit binaries on Windows (using Visual Studio 2008)? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:36:Load the supplied Visual Studio solution file, either `msvc\gtest-md.sln` or
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:44:`Standard` toolbar, which allow you to toggle between building 32-bit or
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:45:64-bit binaries (or both at once using Batch Build).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:50:this, multi-select (e.g. using shift-click) all projects (but not the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:51:solution) in the `Solution Explorer`. Right-click one of them and
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:58:solution. When the build is complete, the 64-bit binaries will be in
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:67:`PATH/TO/configure CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:69:You should be able to replace the `-mno-cygwin` option with direct links
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:77:We also have reports on successful cross compilation of Google Test MinGW binaries on Linux using [these instructions](http://wiki.wxwidgets.org/Cross-Compiling_Under_Linux#Cross-compiling_under_Linux_for_MS_Windows) on the WxWidgets site.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:84:Due to some peculiarity of C++, it requires some non-trivial template
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:88:harder to maintain and more error-prone than necessary).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:107:Finally, with the growth of Google Mock's [matcher](../../CookBook.md#using-matchers-in-google-test-assertions) library, we are
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:128:It's difficult to write thread-safe code.  Most tests are not written
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:129:with thread-safety in mind, and thus may not work correctly in a
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:130:multi-threaded setting.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:146:  1. The `EXPECT_*` family of macros will continue even after a failure, allowing multiple failures in a `TEST` to be reported in a single run. This is a popular feature, as in C++ the edit-compile-test cycle is usually quite long and being able to fixing more than one thing at a time is a blessing.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:177:Yet, many people think this is one line too many. :-) Our goal was to
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:196:  * The runner-style requires to split the information into two pieces: the definition of the death test itself, and the specification for the runner on how to run the death test and what to expect.  The death test would be written in C++, while the runner spec may or may not be.  A user needs to carefully keep the two in sync. `ASSERT_DEATH(statement, expected_message)` specifies all necessary information in one place, in one language, without boilerplate code. It is very declarative.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:197:  * `ASSERT_DEATH` has a similar syntax and error-reporting semantics as other Google Test assertions, and thus is easy to learn.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:207:  * `ASSERT_DEATH` can reference local variables in the current function, and you can decide how many death tests you want based on run-time information.  For example,
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:218:The runner-based approach tends to be more static and less flexible, or requires more user effort to get this kind of flexibility.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:222:fast, as `fork()` uses copy-on-write pages and incurs almost zero
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:223:overhead, and the child process starts from the user-supplied
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:231:Death tests (`EXPECT_DEATH`, etc) are executed in a sub-process s.t. the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:233:result, any in-memory side effects they incur are observable in their
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:234:respective sub-processes, but not in the parent process. You can think of them
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:262:data-driven tests in general. We hope to be able to make improvements in this
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:294:      ... additional set-up work ...
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:297:      ... clean-up work for FooTest ...
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:322:## My death test hangs (or seg-faults). How do I fix it? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:339:If you go with thread-safe death tests, remember that they rerun the test
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:341:program can run side-by-side with itself and is deterministic.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:345:bullet - sorry!
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:347:## Should I use the constructor/destructor of the test fixture or the set-up/tear-down function? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:358:  * If the tear-down operation could throw an exception, you must use `TearDown()` as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer `TearDown()` if you want to write portable tests that work with or without exceptions.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:359:  * The Google Test team is considering making the assertion macros throw on platforms where exceptions are enabled (e.g. Windows, Mac OS, and Linux client-side), which will eliminate the need for the user to propagate failures from a subroutine to its caller. Therefore, you shouldn't use Google Test assertions in a destructor if your code could run on such a platform.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:398:type of the function pointer for the `int`-version of `IsPositive()`.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:412:ASSERT_PRED1(IsNegative*<int>*, -5);
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:423:as the C++ pre-processor thinks you are giving `ASSERT_PRED2` 4 arguments,
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:472:## My set-up function is not called. Why? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:474:C++ is case-sensitive. It should be spelled as `SetUp()`.  Did you
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:485:the corresponding source code, or use `C-x `` to jump to the next failure.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:518:The Google Test output is meant to be a concise and human-friendly report. If
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:578:    return obj->private_member1_;
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:588:  * If the methods are declared **protected**, you can change their access level in a test-only subclass:
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:654:No. You can use a feature called [value-parameterized tests](V1_5_AdvancedGuide.md#Value_Parameterized_Tests) which
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:755:  * If you explicitly declare a non-default constructor for class `Foo`, then you need to define a default constructor, even if it would be empty.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:756:  * If `Foo` has a const non-static data member, then you have to define the default constructor _and_ initialize the const member in the initializer list of the constructor. (Early versions of `gcc` doesn't force you to initialize the const member. It's a bug that has been fixed in `gcc 4`.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:777:the test case would require multiple set-up and tear-down processes, which is
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:796:## But I don't like calling my entire test case FOODeathTest when it contains both death tests and non-death tests. What do I do? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:816:If you use a user-defined type `FooType` in an assertion, you must make sure
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:843:set to /MT (use multi-threaded static libraries, /MTd for debug). If
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:844:your project uses something else, for example /MD (use multi-threaded
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:851:using gtest-md.vcproj instead of gtest.vcproj.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:855:[warning](V1_5_Primer.md#important-note-for-visual-c-users) on
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_FAQ.md:861:http://hassanjamilahmad.blogspot.com/2009/07/gtest-starters-help.html.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:13:  1. Tests should be _portable_ and _reusable_. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:14:  1. When tests fail, they should provide as much _information_ about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:16:  1. Tests should be _fast_. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:35:should be compiled (basically you want to compile `src/gtest-all.cc`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:87:possibly skipping clean-up code that comes after it, it may cause a space leak.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:88:Depending on the nature of the leak, it may or may not be worth fixing - so
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:103:macro--in particular, C strings and `string` objects. If a wide string
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:105:streamed to an assertion, it will be translated to UTF-8 when printed.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:111:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:127:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:143:streaming to an `ostream`. All built-in types support this.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:145:These assertions can work with a user-defined type, but only if you define the
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:174:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:183:comparison of two wide strings fails, their values will be printed as UTF-8
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:199:  1. The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:236:Google Test groups the test results by test cases, so logically-related tests
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:251:  1. Derive a class from `::testing::Test` . Start its body with `protected:` or `public:` as we'll want to access fixture members from sub-classes.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:253:  1. If necessary, write a default constructor or `SetUp()` function to prepare the objects for each test. A common mistake is to spell `SetUp()` as `Setup()` with a small `u` - don't let that happen to you.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:254:  1. If necessary, write a destructor or `TearDown()` function to release any resources you allocated in `SetUp()` . To learn when you should use the constructor/destructor and when you should use `SetUp()/TearDown()`, read this [FAQ entry](V1_5_FAQ.md#should-i-use-the-constructordestructor-of-the-test-fixture-or-the-set-uptear-down-function).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:366:`TEST()` and `TEST_F()` implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:368:After defining your tests, you can run them with `RUN_ALL_TESTS()` , which returns `0` if all the tests are successful, or `1` otherwise. Note that `RUN_ALL_TESTS()` runs _all tests_ in your link unit -- they can be from different test cases, or even different source files.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:381:step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly,
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:391:conflicts with some advanced Google Test features (e.g. thread-safe death
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:412:    // You can do set-up work for each test here.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:416:    // You can do clean-up work that doesn't throw exceptions here.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:481:There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you _must_ change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:491:Google Test is designed to be thread-safe.  The implementation is
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:492:thread-safe on systems where the `pthreads` library is available.  It
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_Primer.md:497:synchronization primitives in `gtest-port.h` for your platform.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:10:error-prone work.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:23:non-intuitive, non-trivial changes in the script. This is especially
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:30:prefer) is a simple meta-programming tool for C++. The idea is that a
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:35:view it as a small Domain-Specific Language. The meta language is
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:36:designed to be non-intrusive (s.t. it won't confuse Emacs' C++ mode,
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:43:  * Pump tries to be smart with respect to [Google's style guide](http://code.google.com/p/google-styleguide/): it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:44:  * The format is human-readable and more concise than XML.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:56:// Foo$i does blah for $i-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:75:// Foo0 does blah for 0-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:81:// Foo1 does blah for 1-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:87:// Foo2 does blah for 2-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:93:// Foo3 does blah for 3-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:123:|:----------------|:-----------------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:135:code, Pump ignores a new-line character if it's right after `$for foo`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:138:need to insert an extra new-line in such places for a new-line to show
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:172:You can find real-world applications of Pump in [Google Test](http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgoogletest\.googlecode\.com) and [Google Mock](http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgooglemock\.googlecode\.com).  The source file `foo.h.pump` generates `foo.h`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_PumpManual.md:177:  * To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting `[[]]` followed by a new line. Since any new-line character next to `[[` or `]]` is ignored, the generated code won't contain this new line.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:9:  1. Download the source from the [website](http://code.google.com/p/googletest) using this command: `svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only`
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:10:  1. Open up the `gtest.xcodeproj` in the `googletest-read-only/xcode/` directory and build the gtest.framework.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:24:svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:29:To use `svn:externals`, decide where you would like to have the external source reside. You might choose to put the external source inside the trunk, because you want it to be part of the branch when you make a release. However, keeping it outside the trunk in a version-tagged directory called something like `third-party/googletest/1.0.1`, is another option. Once the location is established, use `svn propedit svn:externals _directory_` to set the svn:externals property on a directory in your repository. This directory won't contain the code, but be its versioned parent directory.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:31:The command `svn propedit` will bring up your Subversion editor, making editing the long, (potentially multi-line) property simpler. This same method can be used to check out a tagged branch, by using the appropriate URL (e.g. `http://googletest.googlecode.com/svn/tags/release-1.0.1`). Additionally, the svn:externals property allows the specification of a particular revision of the trunk with the `-r_##_` option (e.g. `externals/src/googletest -r60 http://googletest.googlecode.com/svn/trunk`).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:44:  * **Option 1** --- The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the "Add->Existing Framework..." from the context menu or "Project->Add..." from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:45:  * **Option 2** --- If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:53:  * **Option 1** --- During compilation, Xcode will need to know that you are linking against the gtest.framework. Add the gtest.framework to the "Link Binary with Libraries" build phase of your test target. This will include the Google Test headers in your header search path, and will tell the linker where to find the library.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:54:  * **Option 2** --- If your working out of the trunk, you'll also want to add gtest.framework to your "Link Binary with Libraries" build phase of your test target. In addition, you'll  want to add the gtest.framework as a dependency to your unit test target. This way, Xcode will make sure that gtest.framework is up to date, every time your build your target. Finally, if you don't share build directories with Google Test, you'll have to copy the gtest.framework into your own build products directory using a "Run Script" build phase.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:63:[Session started at 2008-08-15 06:23:57 -0600.]
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:76:[Session started at 2008-08-06 06:36:13 -0600.]
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:78:[----------] Global test environment set-up.
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:79:[----------] 2 tests from WidgetInitializerTest
/Volumes/src/simhub/src/libs/googletest/docs/V1_5_XcodeGuide.md:84:[----------] Global test environment tear-down
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:21:|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:27:user-visible output. However, we may add `SUCCEED()` messages to Google Test's
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:31:|:-----------|:-----------------|:------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:55:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:82:is awkward especially when the expression has side-effects or is expensive to
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:94:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:99:In the above, _predn_ is an _n_-ary predicate function or functor, where
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:126:  1. If you see a compiler error "no matching function to call" when using `ASSERT_PRED*` or `EXPECT_PRED*`, please see [this](v1_6_FAQ.md#ithe-compiler-complains-about-undefined-references-to-some-static-const-member-variables-but-i-did-define-them-in-the-class-body-whats-wrong) for how to resolve it.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:127:  1. Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:221:### Using a Predicate-Formatter ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:226:following _predicate-formatter assertions_ to _fully_ customize how the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:230:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:236:a predicate, `(ASSERT|EXPECT)_PRED_FORMAT*` take a _predicate-formatter_
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:248:A predicate-formatter returns a `::testing::AssertionResult` object to indicate
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:259:// A predicate-formatter for asserting that two integers are mutually prime.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:274:With this predicate-formatter, we can use
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:293:## Floating-Point Comparison ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:295:Comparing floating-point numbers is tricky. Due to round-off errors, it is
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:296:very unlikely that two floating-points will match exactly. Therefore,
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:297:`ASSERT_EQ` 's naive comparison usually doesn't work. And since floating-points
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:302:In general, for floating-point comparison to make sense, the user needs to
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:307:[this article on float comparison](http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:309:### Floating-Point Macros ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:312:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:322:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:327:### Floating-Point Predicate-Format Functions ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:329:Some floating-point operations are useful, but not that often used. In order
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:330:to avoid an explosion of new macros, we provide them as predicate-format
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:349:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:353:The generated output contains the human-readable error message
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:362:ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:406:can only be used in void-returning functions. This is a consequence of
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:407:Google Test not using exceptions. By placing it in a non-void function
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:411:If you need to use assertions in a function that returns non-void, one option
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:419:assertions that generate non-fatal failures, such as `ADD_FAILURE*` and
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:422:_Note_: Constructors and destructors are not considered void-returning
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:426:private void-returning method. However, you should be aware that a fatal
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:429:leaving your object in a partially-constructed state. Likewise, a fatal
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:431:partially-destructed state. Use assertions carefully in these situations!
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:437:user-extensible value printer.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:439:This printer knows how to print built-in C++ types, native arrays, STL
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:456:// namespace that defines Bar.  C++'s look-up rules rely on that.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:477:// namespace that defines Bar.  C++'s look-up rules rely on that.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:518:see [Exception Assertions](#exception-assertions).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:520:If you want to test `EXPECT_*()/ASSERT_*()` failures in your test code, see [Catching Failures](#catching-failures).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:527:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:543:terminates with a _non-zero_ exit status code.  There are two
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:545:with a non-zero value, or it may be killed by a signal.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:570:that verifies the process' exit code is non-zero.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:575:  1. (in the case of `ASSERT_EXIT` and `EXPECT_EXIT`) does the exit status satisfy _predicate_?  Or (in the case of `ASSERT_DEATH` and `EXPECT_DEATH`) is the exit status non-zero?  And
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:644:|:----|:----------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:678:command-line flag `--gtest_death_test_style`).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:682:    * If the variable's value is `"threadsafe"`, the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:683:  * On Windows, the child is spawned using the `CreateProcess()` API, and re-executes the binary to cause just the single death test under consideration to be run - much like the `threadsafe` mode on POSIX.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:701:well-known problems with forking in the presence of threads, death tests should
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:702:be run in a single-threaded context. Sometimes, however, it isn't feasible to
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:703:arrange that kind of environment. For example, statically-initialized modules
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:761:Since _statement_ runs in the child process, any in-memory side effect (e.g.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:779:# Using Assertions in Sub-routines #
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:783:If a test sub-routine is called from several places, when an assertion
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:785:sub-routine the failure is from.  You can alleviate this problem using
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:790:|:-----------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:839:  1. With a suitable message, it's often enough to use `SCOPED_TRACE` at the beginning of a sub-routine, instead of at each call site.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:840:  1. When calling sub-routines inside a loop, make the loop iterator part of the message in `SCOPED_TRACE` such that you can know which iteration the failure is from.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:841:  1. Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for `SCOPED_TRACE`. You can simply use `""`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:843:  1. The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:887:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:912:allows functions to catch fatal failures in a sub-routine and return
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:946:has at least one non-fatal failure, and `HasFailure()` returns `true`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:955:additional information, where `value` can be either a C string or a 32-bit
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:988:that are expensive to set up, making the one-copy-per-test model prohibitively
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:992:single resource copy. So, in addition to per-test set-up/tear-down, Google Test
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:993:also supports per-test-case set-up/tear-down. To use it:
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1010:Here's an example of per-test-case set-up and tear-down:
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1014:  // Per-test-case set-up.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1021:  // Per-test-case tear-down.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1029:  // You can define per-test set-up and tear-down logic as usual.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1049:# Global Set-Up and Tear-Down #
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1051:Just as you can do set-up and tear-down at the test level and the test case
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1055:environment, which knows how to set-up and tear-down:
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1108:_Value-parameterized tests_ allow you to test your code with different
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1135:Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1137:Here are some other situations when value-parameterized tests come handy:
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1140:  * You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1142:## How to Write Value-Parameterized Tests ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1144:To write value-parameterized tests, first you should define a fixture
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1161:// Or, when you want to add parameters to a pre-existing fixture class:
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1195:|:----------------------------|:------------------------------------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1197:| `ValuesIn(container)` and `ValuesIn(begin, end)` | Yields values from a C-style array, an STL-style container, or an iterator range `[begin, end)`. `container`, `begin`, and `end` can be expressions whose values are determined at run time.  |
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1199:| `Combine(g1, g2, ..., gN)`  | Yields all combinations (the Cartesian product for the math savvy) of the values generated by the `N` generators. This is only available if your system provides the `<tr1/tuple>` header. If you are sure your system does, and Google Test disagrees, you can override it by defining `GTEST_HAS_TR1_TUPLE=1`. See comments in [include/gtest/internal/gtest-port.h](../include/gtest/internal/gtest-port.h) for more information. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1201:For more details, see the comments at the definitions of these functions in the [source code](../include/gtest/gtest-param-test.h).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1226:You can use these names in [--gtest\-filter](#running-a-subset-of-the-tests).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1254:## Creating Value-Parameterized Abstract Tests ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1257:file. Sometimes you may want to define value-parameterized tests in a
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1264:all the interface-conformance tests for free.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1328:  TypeParam n = this->value_;
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1349:# Type-Parameterized Tests #
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1351:_Type-parameterized tests_ are like typed tests, except that they
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1358:of type-parameterized tests to verify properties that any valid
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1373:Next, declare that you will define a type-parameterized test case:
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1382:Then, use `TYPED_TEST_P()` to define a type-parameterized test.  You
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1435:_black-box testing principle_, most of the time you should test your code
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1440:absolutely have to test non-public interface code though, you can. There are
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1451:files is not a good way to reuse code - you should not do this in production
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1456:uses, and put the private declarations in a `*-internal.h` file. Your
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1469:are technically defined in sub-classes of the fixture.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1472:class, which is then declared in a `*-internal.h` file. Your clients aren't
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1551:`"gtest/gtest-spi.h"` contains some constructs to do this.  After
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1555:|:--------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1561:|:-----------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1563:if you are expecting a non-fatal (e.g. `EXPECT_*`) failure.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1568:  1. _statement_ in `EXPECT_FATAL_FAILURE()` cannot reference local non-static variables or non-static members of `this` object.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1572:synchronization primitives in `"gtest/internal/gtest-port.h"` have
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1573:been implemented, Google Test will become thread-safe, meaning that
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1576:that, however, Google Test only supports single-threaded usage.  Once
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1577:thread-safe, `EXPECT_FATAL_FAILURE()` and `EXPECT_NONFATAL_FAILURE()`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1584:|:-----------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1601:  // Do NOT delete or free the return value - it's managed by the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1616:// Do NOT delete the returned object - it's managed by the UnitTest class.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1618:  ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1620:       test_info->name(), test_info->test_case_name());
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1659:  * [TestPartResult](../include/gtest/gtest-test-part.h#L42) represents the result of a test assertion.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1696:- note the "s" at the end of the name) in your
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1703:      ::testing::UnitTest::GetInstance()->listeners();
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1736:You may use failure-raising macros (`EXPECT_*()`, `ASSERT_*()`,
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1747:We have a sample of failure-raising listener
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1758:program with the `--help` flag.  You can also use `-h`, `-?`, or `/?`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1764:`--gtest_foo`, write `::testing::GTEST_FLAG(foo)`.  A common pattern is
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1787:`--gtest_list_tests` overrides all other flags and lists tests in the following
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1807:or the `--gtest_filter` flag to a filter string, Google Test will only run the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1811:The format of a filter is a '`:`'-separated list of wildcard patterns (called
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1812:the positive patterns) optionally followed by a '`-`' and another
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1813:'`:`'-separated pattern list (called the negative patterns). A test matches the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1818:character). For convenience, the filter `'*-NegativePatterns'` can be also
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1819:written as `'-NegativePatterns'`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1824:  * `./foo_test --gtest_filter=*` Also runs everything, due to the single match-everything `*` value.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1825:  * `./foo_test --gtest_filter=FooTest.*` Runs everything in test case `FooTest`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1826:  * `./foo_test --gtest_filter=*Null*:*Constructor*` Runs any test whose full name contains either `"Null"` or `"Constructor"`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1827:  * `./foo_test --gtest_filter=-*DeathTest.*` Runs all non-death tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1828:  * `./foo_test --gtest_filter=FooTest.*-FooTest.Bar` Runs everything in test case `FooTest` except `FooTest.Bar`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1856:_Note:_ This feature should only be used for temporary pain-relief. You still
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1868:To include [disabled tests](#temporarily-disabling-tests) in test
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1870:`--gtest_also_run_disabled_tests` flag or set the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1873:[--gtest\-filter](#running-a-subset-of-the_tests) flag to further select
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1880:Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1884:The `--gtest_repeat` flag allows you to repeat all (or selected) test methods
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1888:| `$ foo_test --gtest_repeat=1000` | Repeat foo\_test 1000 times and don't stop at failures. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1889:|:---------------------------------|:--------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1890:| `$ foo_test --gtest_repeat=-1`   | A negative count means repeating forever.               |
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1891:| `$ foo_test --gtest_repeat=1000 --gtest_break_on_failure` | Repeat foo\_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1892:| `$ foo_test --gtest_repeat=1000 --gtest_filter=FooBar` | Repeat the tests whose name matches the filter 1000 times. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1894:If your test program contains global set-up/tear-down code registered
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1903:You can specify the `--gtest_shuffle` flag (or set the `GTEST_SHUFFLE`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1910:order-related test failure later. To specify the random seed
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1911:explicitly, use the `--gtest_random_seed=SEED` flag (or set the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1917:If you combine this with `--gtest_repeat=N`, Google Test will pick a
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1918:different random seed and re-shuffle the tests in each iteration.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1931:You can set the GTEST\_COLOR environment variable or set the `--gtest_color`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1935:non-Windows platforms) the `TERM` environment variable is set to `xterm` or
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1936:`xterm-color`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1943:suppress that, run the test program with the `--gtest_print_time=0`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:1957:`--gtest_output` flag to the string `"xml:_path_to_output_file_"`, which will
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2002:<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2007:      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2030:### Turning Assertion Failures into Break-Points ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2034:mode. Google Test's _break-on-failure_ mode supports this behavior.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2037:other than `0` . Alternatively, you can use the `--gtest_break_on_failure`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2042:### Disabling Catching Test-Thrown Exceptions ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2049:cause a pop-up window, so catching the exceptions allows you to run
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2056:`--gtest_catch_exceptions=0` flag when running the tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2095:non-zero code, which will also signal a test failure to your test
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2100:the `--gtest_throw_on_failure` flag on the command-line or setting the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2101:`GTEST_THROW_ON_FAILURE` environment variable to a non-zero value.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2118:  1. On each shard, set the `GTEST_SHARD_INDEX` environment variable to the index of the shard.  Different shards must be assigned different indices, which must be in the range `[0, GTEST_TOTAL_SHARDS - 1]`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2125:variable `GTEST_SHARD_STATUS_FILE` to a non-existent file path.  If a
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2168:`gtest/gtest.h` and `gtest/gtest-all.cc` in it.  These files contain
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_AdvancedGuide.md:2178:can read the [Frequently-Asked Questions](V1_6_FAQ.md).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Documentation.md:2:-- **if you use a released version of Google Test, please read the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Documentation.md:5:  * [Primer](V1_6_Primer.md) -- start here if you are new to Google Test.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Documentation.md:6:  * [Samples](V1_6_Samples.md) -- learn from examples.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Documentation.md:7:  * [AdvancedGuide](V1_6_AdvancedGuide.md) -- learn more about Google Test.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Documentation.md:8:  * [XcodeGuide](V1_6_XcodeGuide.md) -- how to use Google Test in Xcode on Mac.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Documentation.md:9:  * [Frequently-Asked Questions](V1_6_FAQ.md) -- check here before asking a question on the mailing list.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Documentation.md:13:  * [DevGuide](DevGuide.md) -- read this _before_ writing your first patch.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Documentation.md:14:  * [PumpManual](V1_6_PumpManual.md) -- how we generate some of Google Test's source files.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:13:be) a single best framework - you have to pick the right tool for the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:19:Test.  We don't claim them to be unique to Google Test - rather, the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:24:  * Nonfatal assertions (`EXPECT_*`) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:28:  * `SCOPED_TRACE` helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:31:  * Simple things are easy in Google Test, while hard things are possible: in addition to advanced features like [global test environments](V1_6_AdvancedGuide.md#Global_Set-Up_and_Tear-Down) and tests parameterized by [values](V1_6_AdvancedGuide.md#value-parameterized-tests) or [types](V1_6_AdvancedGuide.md#typed-tests), Google Test supports various ways for the user to extend the framework -- if Google Test doesn't do something out of the box, chances are that a user can implement the feature using Google Test's public API, without changing Google Test itself.  In particular, you can:
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:32:    * expand your testing vocabulary by defining [custom predicates](V1_6_AdvancedGuide.md#predicate-assertions-for-better-error-messages),
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:33:    * teach Google Test how to [print your types](V1_6_AdvancedGuide.md#teaching-google-test-how-to-print-your-values),
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:34:    * define your own testing macros or utilities and verify them using Google Test's [Service Provider Interface](V1_6_AdvancedGuide.md#catching-failures), and
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:35:    * reflect on the test cases or change the test output format by intercepting the [test events](V1_6_AdvancedGuide.md#extending-google-test-by-handling-test-events).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:47:It is not always possible to make Google Test warning-free for everyone.  Or, it may not be desirable if the warning is rarely enabled and fixing the violations makes the code more complex.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:49:If you see warnings when compiling Google Test, we suggest that you use the `-isystem` flag (assuming your are using GCC) to mark Google Test headers as system headers.  That'll suppress warnings from Google Test headers.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:56:  1. any identifier that starts with an `_` followed by an upper-case letter, and
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:67:  1. If `TestCaseName` starts with an `_` followed by an upper-case letter (say, `_Foo`), we end up with `_Foo_TestName_Test`, which is reserved and thus invalid.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:73:(Actually, `TestCaseName` can start with `_` -- as long as the `_` isn't
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:74:followed by an upper-case letter.  But that's getting complicated.  So
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:97:## Why is it not recommended to install a pre-compiled copy of Google Test (for example, into /usr/local)? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:105:got-cha: every user needs to compile his tests using the _same_ compiler
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:110:Why?  Because C++ has this thing called the One-Definition Rule: if
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:115:doesn't, you get strange run-time behaviors that are unexpected and
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:121:Therefore, for your sanity, we recommend to avoid installing pre-compiled
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:126:## How do I generate 64-bit binaries on Windows (using Visual Studio 2008)? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:130:Load the supplied Visual Studio solution file, either `msvc\gtest-md.sln` or
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:138:`Standard` toolbar, which allow you to toggle between building 32-bit or
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:139:64-bit binaries (or both at once using Batch Build).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:144:this, multi-select (e.g. using shift-click) all projects (but not the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:145:solution) in the `Solution Explorer`. Right-click one of them and
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:152:solution. When the build is complete, the 64-bit binaries will be in
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:161:`PATH/TO/configure CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:163:You should be able to replace the `-mno-cygwin` option with direct links
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:173:[these instructions](http://wiki.wxwidgets.org/Cross-Compiling_Under_Linux#Cross-compiling_under_Linux_for_MS_Windows)
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:181:Due to some peculiarity of C++, it requires some non-trivial template
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:185:harder to maintain and more error-prone than necessary).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:204:Finally, with the growth of Google Mock's [matcher](../../CookBook.md#using-matchers-in-google-test-assertions) library, we are
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:225:It's difficult to write thread-safe code.  Most tests are not written
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:226:with thread-safety in mind, and thus may not work correctly in a
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:227:multi-threaded setting.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:243:  1. The `EXPECT_*` family of macros will continue even after a failure, allowing multiple failures in a `TEST` to be reported in a single run. This is a popular feature, as in C++ the edit-compile-test cycle is usually quite long and being able to fixing more than one thing at a time is a blessing.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:274:Yet, many people think this is one line too many. :-) Our goal was to
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:293:  * The runner-style requires to split the information into two pieces: the definition of the death test itself, and the specification for the runner on how to run the death test and what to expect.  The death test would be written in C++, while the runner spec may or may not be.  A user needs to carefully keep the two in sync. `ASSERT_DEATH(statement, expected_message)` specifies all necessary information in one place, in one language, without boilerplate code. It is very declarative.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:294:  * `ASSERT_DEATH` has a similar syntax and error-reporting semantics as other Google Test assertions, and thus is easy to learn.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:304:  * `ASSERT_DEATH` can reference local variables in the current function, and you can decide how many death tests you want based on run-time information.  For example,
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:315:The runner-based approach tends to be more static and less flexible, or requires more user effort to get this kind of flexibility.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:319:fast, as `fork()` uses copy-on-write pages and incurs almost zero
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:320:overhead, and the child process starts from the user-supplied
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:328:Death tests (`EXPECT_DEATH`, etc) are executed in a sub-process s.t. the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:330:result, any in-memory side effects they incur are observable in their
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:331:respective sub-processes, but not in the parent process. You can think of them
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:359:data-driven tests in general. We hope to be able to make improvements in this
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:391:      ... additional set-up work ...
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:394:      ... clean-up work for FooTest ...
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:419:## My death test hangs (or seg-faults). How do I fix it? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:436:If you go with thread-safe death tests, remember that they rerun the test
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:438:program can run side-by-side with itself and is deterministic.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:442:bullet - sorry!
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:444:## Should I use the constructor/destructor of the test fixture or the set-up/tear-down function? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:455:  * If the tear-down operation could throw an exception, you must use `TearDown()` as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer `TearDown()` if you want to write portable tests that work with or without exceptions.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:456:  * The Google Test team is considering making the assertion macros throw on platforms where exceptions are enabled (e.g. Windows, Mac OS, and Linux client-side), which will eliminate the need for the user to propagate failures from a subroutine to its caller. Therefore, you shouldn't use Google Test assertions in a destructor if your code could run on such a platform.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:495:type of the function pointer for the `int`-version of `IsPositive()`.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:509:ASSERT_PRED1(IsNegative*<int>*, -5);
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:520:as the C++ pre-processor thinks you are giving `ASSERT_PRED2` 4 arguments,
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:569:## My set-up function is not called. Why? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:571:C++ is case-sensitive. It should be spelled as `SetUp()`.  Did you
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:582:the corresponding source code, or use `C-x `` to jump to the next failure.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:615:The Google Test output is meant to be a concise and human-friendly report. If
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:675:    return obj->private_member1_;
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:685:  * If the methods are declared **protected**, you can change their access level in a test-only subclass:
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:751:No. You can use a feature called [value-parameterized tests](V1_6_AdvancedGuide.md#Value_Parameterized_Tests) which
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:853:  * If you explicitly declare a non-default constructor for class `Foo`, then you need to define a default constructor, even if it would be empty.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:854:  * If `Foo` has a const non-static data member, then you have to define the default constructor _and_ initialize the const member in the initializer list of the constructor. (Early versions of `gcc` doesn't force you to initialize the const member. It's a bug that has been fixed in `gcc 4`.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:875:the test case would require multiple set-up and tear-down processes, which is
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:894:## But I don't like calling my entire test case FOODeathTest when it contains both death tests and non-death tests. What do I do? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:914:If you use a user-defined type `FooType` in an assertion, you must make sure
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:941:set to /MT (use multi-threaded static libraries, /MTd for debug). If
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:942:your project uses something else, for example /MD (use multi-threaded
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:949:using gtest-md.vcproj instead of gtest.vcproj.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:953:[warning](V1_6_Primer.md#important-note-for-visual-c-users) on
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:959:http://hassanjamilahmad.blogspot.com/2009/07/gtest-starters-help.html.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:965:`export CC=cc CXX=CC CXXFLAGS='-library=stlport4'`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:970:different things accordingly, you are leaking test-only logic into
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:971:production code and there is no easy way to ensure that the test-only
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:979:differently under test is [dependency injection](http://jamesshore.com/Blog/Dependency-Injection-Demystified.html).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:982:for-test logic at all, there is no danger in accidentally running it.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:1000:  -DGTEST_DONT_DEFINE_FOO=1
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_FAQ.md:1003:from `FOO` to `GTEST_FOO`. For example, with `-DGTEST_DONT_DEFINE_TEST=1`, you'll need to write
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:13:  1. Tests should be _portable_ and _reusable_. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:14:  1. When tests fail, they should provide as much _information_ about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:16:  1. Tests should be _fast_. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:36:(basically you want to compile `src/gtest-all.cc` with `GTEST_ROOT`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:88:possibly skipping clean-up code that comes after it, it may cause a space leak.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:89:Depending on the nature of the leak, it may or may not be worth fixing - so
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:104:macro--in particular, C strings and `string` objects. If a wide string
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:106:streamed to an assertion, it will be translated to UTF-8 when printed.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:112:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:128:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:149:arguments, see this Google Mock [recipe](../../googlemock/docs/CookBook.md#teaching-google-mock-how-to-print-your-values).).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:151:These assertions can work with a user-defined type, but only if you define the
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:180:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:189:comparison of two wide strings fails, their values will be printed as UTF-8
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:204:  1. The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:240:Google Test groups the test results by test cases, so logically-related tests
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:255:  1. Derive a class from `::testing::Test` . Start its body with `protected:` or `public:` as we'll want to access fixture members from sub-classes.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:257:  1. If necessary, write a default constructor or `SetUp()` function to prepare the objects for each test. A common mistake is to spell `SetUp()` as `Setup()` with a small `u` - don't let that happen to you.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:258:  1. If necessary, write a destructor or `TearDown()` function to release any resources you allocated in `SetUp()` . To learn when you should use the constructor/destructor and when you should use `SetUp()/TearDown()`, read this [FAQ entry](V1_6_FAQ.md#should-i-use-the-constructordestructor-of-the-test-fixture-or-the-set-uptear-down-function).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:370:`TEST()` and `TEST_F()` implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:372:After defining your tests, you can run them with `RUN_ALL_TESTS()` , which returns `0` if all the tests are successful, or `1` otherwise. Note that `RUN_ALL_TESTS()` runs _all tests_ in your link unit -- they can be from different test cases, or even different source files.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:385:step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly,
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:395:conflicts with some advanced Google Test features (e.g. thread-safe death
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:416:    // You can do set-up work for each test here.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:420:    // You can do clean-up work that doesn't throw exceptions here.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:485:There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you _must_ change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:495:Google Test is designed to be thread-safe.  The implementation is
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:496:thread-safe on systems where the `pthreads` library is available.  It
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Primer.md:501:synchronization primitives in `gtest-port.h` for your platform.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:10:error-prone work.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:23:non-intuitive, non-trivial changes in the script. This is especially
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:30:prefer) is a simple meta-programming tool for C++. The idea is that a
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:35:view it as a small Domain-Specific Language. The meta language is
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:36:designed to be non-intrusive (s.t. it won't confuse Emacs' C++ mode,
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:43:  * Pump tries to be smart with respect to [Google's style guide](http://code.google.com/p/google-styleguide/): it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:44:  * The format is human-readable and more concise than XML.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:56:// Foo$i does blah for $i-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:75:// Foo0 does blah for 0-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:81:// Foo1 does blah for 1-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:87:// Foo2 does blah for 2-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:93:// Foo3 does blah for 3-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:123:|:----------------|:-----------------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:135:code, Pump ignores a new-line character if it's right after `$for foo`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:138:need to insert an extra new-line in such places for a new-line to show
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:172:You can find real-world applications of Pump in [Google Test](http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgoogletest\.googlecode\.com) and [Google Mock](http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgooglemock\.googlecode\.com).  The source file `foo.h.pump` generates `foo.h`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_PumpManual.md:177:  * To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting `[[]]` followed by a new line. Since any new-line character next to `[[` or `]]` is ignored, the generated code won't contain this new line.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Samples.md:2:[samples folder](../samples) has a number of well-commented samples showing how to use a
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Samples.md:9:  * [Sample #5](../samples/sample5_unittest.cc) teaches how to reuse a test fixture in multiple test cases by deriving sub-fixtures from it.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Samples.md:10:  * [Sample #6](../samples/sample6_unittest.cc) demonstrates type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Samples.md:11:  * [Sample #7](../samples/sample7_unittest.cc) teaches the basics of value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_Samples.md:12:  * [Sample #8](../samples/sample8_unittest.cc) shows using `Combine()` in value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:9:  1. Download the source from the [website](http://code.google.com/p/googletest) using this command: `svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only`
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:10:  1. Open up the `gtest.xcodeproj` in the `googletest-read-only/xcode/` directory and build the gtest.framework.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:24:svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:29:To use `svn:externals`, decide where you would like to have the external source reside. You might choose to put the external source inside the trunk, because you want it to be part of the branch when you make a release. However, keeping it outside the trunk in a version-tagged directory called something like `third-party/googletest/1.0.1`, is another option. Once the location is established, use `svn propedit svn:externals _directory_` to set the svn:externals property on a directory in your repository. This directory won't contain the code, but be its versioned parent directory.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:31:The command `svn propedit` will bring up your Subversion editor, making editing the long, (potentially multi-line) property simpler. This same method can be used to check out a tagged branch, by using the appropriate URL (e.g. `http://googletest.googlecode.com/svn/tags/release-1.0.1`). Additionally, the svn:externals property allows the specification of a particular revision of the trunk with the `-r_##_` option (e.g. `externals/src/googletest -r60 http://googletest.googlecode.com/svn/trunk`).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:44:  * **Option 1** --- The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the "Add->Existing Framework..." from the context menu or "Project->Add..." from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:45:  * **Option 2** --- If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:53:  * **Option 1** --- During compilation, Xcode will need to know that you are linking against the gtest.framework. Add the gtest.framework to the "Link Binary with Libraries" build phase of your test target. This will include the Google Test headers in your header search path, and will tell the linker where to find the library.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:54:  * **Option 2** --- If your working out of the trunk, you'll also want to add gtest.framework to your "Link Binary with Libraries" build phase of your test target. In addition, you'll  want to add the gtest.framework as a dependency to your unit test target. This way, Xcode will make sure that gtest.framework is up to date, every time your build your target. Finally, if you don't share build directories with Google Test, you'll have to copy the gtest.framework into your own build products directory using a "Run Script" build phase.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:63:[Session started at 2008-08-15 06:23:57 -0600.]
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:76:[Session started at 2008-08-06 06:36:13 -0600.]
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:78:[----------] Global test environment set-up.
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:79:[----------] 2 tests from WidgetInitializerTest
/Volumes/src/simhub/src/libs/googletest/docs/V1_6_XcodeGuide.md:84:[----------] Global test environment tear-down
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:21:|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:27:user-visible output. However, we may add `SUCCEED()` messages to Google Test's
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:31:|:-----------|:-----------------|:------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:55:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:82:is awkward especially when the expression has side-effects or is expensive to
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:94:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:99:In the above, _predn_ is an _n_-ary predicate function or functor, where
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:126:  1. If you see a compiler error "no matching function to call" when using `ASSERT_PRED*` or `EXPECT_PRED*`, please see [this](V1_7_FAQ.md#the-compiler-complains-about-undefined-references-to-some-static-const-member-variables-but-i-did-define-them-in-the-class-body-whats-wrong) for how to resolve it.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:127:  1. Currently we only provide predicate assertions of arity <= 5. If you need a higher-arity assertion, let us know.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:221:### Using a Predicate-Formatter ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:226:following _predicate-formatter assertions_ to _fully_ customize how the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:230:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:236:a predicate, `(ASSERT|EXPECT)_PRED_FORMAT*` take a _predicate-formatter_
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:248:A predicate-formatter returns a `::testing::AssertionResult` object to indicate
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:259:// A predicate-formatter for asserting that two integers are mutually prime.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:274:With this predicate-formatter, we can use
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:293:## Floating-Point Comparison ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:295:Comparing floating-point numbers is tricky. Due to round-off errors, it is
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:296:very unlikely that two floating-points will match exactly. Therefore,
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:297:`ASSERT_EQ` 's naive comparison usually doesn't work. And since floating-points
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:302:In general, for floating-point comparison to make sense, the user needs to
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:307:[this article on float comparison](http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:309:### Floating-Point Macros ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:312:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:322:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:327:### Floating-Point Predicate-Format Functions ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:329:Some floating-point operations are useful, but not that often used. In order
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:330:to avoid an explosion of new macros, we provide them as predicate-format
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:349:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:353:The generated output contains the human-readable error message
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:362:ASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:406:can only be used in void-returning functions. This is a consequence of
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:407:Google Test not using exceptions. By placing it in a non-void function
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:411:If you need to use assertions in a function that returns non-void, one option
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:419:assertions that generate non-fatal failures, such as `ADD_FAILURE*` and
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:422:_Note_: Constructors and destructors are not considered void-returning
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:426:private void-returning method. However, you should be aware that a fatal
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:429:leaving your object in a partially-constructed state. Likewise, a fatal
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:431:partially-destructed state. Use assertions carefully in these situations!
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:437:user-extensible value printer.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:439:This printer knows how to print built-in C++ types, native arrays, STL
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:456:// namespace that defines Bar.  C++'s look-up rules rely on that.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:477:// namespace that defines Bar.  C++'s look-up rules rely on that.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:518:see [Exception Assertions](#exception-assertions).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:520:If you want to test `EXPECT_*()/ASSERT_*()` failures in your test code, see [Catching Failures](#catching-failures).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:527:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:543:terminates with a _non-zero_ exit status code.  There are two
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:545:with a non-zero value, or it may be killed by a signal.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:570:that verifies the process' exit code is non-zero.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:575:  1. (in the case of `ASSERT_EXIT` and `EXPECT_EXIT`) does the exit status satisfy _predicate_?  Or (in the case of `ASSERT_DEATH` and `EXPECT_DEATH`) is the exit status non-zero?  And
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:644:|:----|:----------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:679:command-line flag `--gtest_death_test_style`).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:683:    * If the variable's value is `"threadsafe"`, the child process re-executes the unit test binary just as it was originally invoked, but with some extra flags to cause just the single death test under consideration to be run.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:684:  * On Windows, the child is spawned using the `CreateProcess()` API, and re-executes the binary to cause just the single death test under consideration to be run - much like the `threadsafe` mode on POSIX.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:702:well-known problems with forking in the presence of threads, death tests should
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:703:be run in a single-threaded context. Sometimes, however, it isn't feasible to
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:704:arrange that kind of environment. For example, statically-initialized modules
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:762:Since _statement_ runs in the child process, any in-memory side effect (e.g.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:780:# Using Assertions in Sub-routines #
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:784:If a test sub-routine is called from several places, when an assertion
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:786:sub-routine the failure is from.  You can alleviate this problem using
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:791:|:-----------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:840:  1. With a suitable message, it's often enough to use `SCOPED_TRACE` at the beginning of a sub-routine, instead of at each call site.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:841:  1. When calling sub-routines inside a loop, make the loop iterator part of the message in `SCOPED_TRACE` such that you can know which iteration the failure is from.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:842:  1. Sometimes the line number of the trace point is enough for identifying the particular invocation of a sub-routine. In this case, you don't have to choose a unique message for `SCOPED_TRACE`. You can simply use `""`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:844:  1. The trace dump is clickable in Emacs' compilation buffer - hit return on a line number and you'll be taken to that line in the source file!
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:888:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:913:allows functions to catch fatal failures in a sub-routine and return
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:947:has at least one non-fatal failure, and `HasFailure()` returns `true`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:979:  * Calling `RecordProperty()` outside of the lifespan of a test is allowed. If it's called outside of a test but between a test case's `SetUpTestCase()` and `TearDownTestCase()` methods, it will be attributed to the XML element for the test case. If it's called outside of all test cases (e.g. in a test environment), it will be attributed to the top-level XML element.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:989:that are expensive to set up, making the one-copy-per-test model prohibitively
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:993:single resource copy. So, in addition to per-test set-up/tear-down, Google Test
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:994:also supports per-test-case set-up/tear-down. To use it:
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1011:Here's an example of per-test-case set-up and tear-down:
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1015:  // Per-test-case set-up.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1022:  // Per-test-case tear-down.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1030:  // You can define per-test set-up and tear-down logic as usual.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1050:# Global Set-Up and Tear-Down #
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1052:Just as you can do set-up and tear-down at the test level and the test case
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1056:environment, which knows how to set-up and tear-down:
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1109:_Value-parameterized tests_ allow you to test your code with different
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1136:Value-parameterized tests will let you write your test only once and then easily instantiate and run it with an arbitrary number of parameter values.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1138:Here are some other situations when value-parameterized tests come handy:
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1141:  * You want to test your code over various inputs (a.k.a. data-driven testing). This feature is easy to abuse, so please exercise your good sense when doing it!
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1143:## How to Write Value-Parameterized Tests ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1145:To write value-parameterized tests, first you should define a fixture
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1162:// Or, when you want to add parameters to a pre-existing fixture class:
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1196:|:----------------------------|:------------------------------------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1198:| `ValuesIn(container)` and `ValuesIn(begin, end)` | Yields values from a C-style array, an STL-style container, or an iterator range `[begin, end)`. `container`, `begin`, and `end` can be expressions whose values are determined at run time.  |
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1200:| `Combine(g1, g2, ..., gN)`  | Yields all combinations (the Cartesian product for the math savvy) of the values generated by the `N` generators. This is only available if your system provides the `<tr1/tuple>` header. If you are sure your system does, and Google Test disagrees, you can override it by defining `GTEST_HAS_TR1_TUPLE=1`. See comments in [include/gtest/internal/gtest-port.h](../include/gtest/internal/gtest-port.h) for more information. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1202:For more details, see the comments at the definitions of these functions in the [source code](../include/gtest/gtest-param-test.h).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1227:You can use these names in [--gtest\_filter](#running-a-subset-of-the-tests).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1255:## Creating Value-Parameterized Abstract Tests ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1258:file. Sometimes you may want to define value-parameterized tests in a
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1265:all the interface-conformance tests for free.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1329:  TypeParam n = this->value_;
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1350:# Type-Parameterized Tests #
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1352:_Type-parameterized tests_ are like typed tests, except that they
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1359:of type-parameterized tests to verify properties that any valid
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1374:Next, declare that you will define a type-parameterized test case:
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1383:Then, use `TYPED_TEST_P()` to define a type-parameterized test.  You
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1436:_black-box testing principle_, most of the time you should test your code
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1441:absolutely have to test non-public interface code though, you can. There are
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1452:files is not a good way to reuse code - you should not do this in production
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1457:uses, and put the private declarations in a `*-internal.h` file. Your
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1470:are technically defined in sub-classes of the fixture.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1473:class, which is then declared in a `*-internal.h` file. Your clients aren't
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1552:`"gtest/gtest-spi.h"` contains some constructs to do this.  After
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1556:|:--------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1562:|:-----------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1564:if you are expecting a non-fatal (e.g. `EXPECT_*`) failure.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1569:  1. _statement_ in `EXPECT_FATAL_FAILURE()` cannot reference local non-static variables or non-static members of `this` object.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1573:synchronization primitives in `"gtest/internal/gtest-port.h"` have
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1574:been implemented, Google Test will become thread-safe, meaning that
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1577:that, however, Google Test only supports single-threaded usage.  Once
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1578:thread-safe, `EXPECT_FATAL_FAILURE()` and `EXPECT_NONFATAL_FAILURE()`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1585:|:-----------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1602:  // Do NOT delete or free the return value - it's managed by the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1617:// Do NOT delete the returned object - it's managed by the UnitTest class.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1619:  ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1621:       test_info->name(), test_info->test_case_name());
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1660:  * [TestPartResult](../include/gtest/gtest-test-part.h#L42) represents the result of a test assertion.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1697:- note the "s" at the end of the name) in your
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1704:      ::testing::UnitTest::GetInstance()->listeners();
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1737:You may use failure-raising macros (`EXPECT_*()`, `ASSERT_*()`,
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1748:We have a sample of failure-raising listener
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1759:program with the `--help` flag.  You can also use `-h`, `-?`, or `/?`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1765:`--gtest_foo`, write `::testing::GTEST_FLAG(foo)`.  A common pattern is
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1788:`--gtest_list_tests` overrides all other flags and lists tests in the following
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1808:or the `--gtest_filter` flag to a filter string, Google Test will only run the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1812:The format of a filter is a '`:`'-separated list of wildcard patterns (called
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1813:the positive patterns) optionally followed by a '`-`' and another
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1814:'`:`'-separated pattern list (called the negative patterns). A test matches the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1819:character). For convenience, the filter `'*-NegativePatterns'` can be also
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1820:written as `'-NegativePatterns'`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1825:  * `./foo_test --gtest_filter=*` Also runs everything, due to the single match-everything `*` value.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1826:  * `./foo_test --gtest_filter=FooTest.*` Runs everything in test case `FooTest`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1827:  * `./foo_test --gtest_filter=*Null*:*Constructor*` Runs any test whose full name contains either `"Null"` or `"Constructor"`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1828:  * `./foo_test --gtest_filter=-*DeathTest.*` Runs all non-death tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1829:  * `./foo_test --gtest_filter=FooTest.*-FooTest.Bar` Runs everything in test case `FooTest` except `FooTest.Bar`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1857:_Note:_ This feature should only be used for temporary pain-relief. You still
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1869:To include [disabled tests](#temporarily-disabling-tests) in test
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1871:`--gtest_also_run_disabled_tests` flag or set the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1874:[--gtest\_filter](#running-a-subset-of-the-tests) flag to further select
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1881:Once in a while you'll run into a test whose result is hit-or-miss. Perhaps it
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1885:The `--gtest_repeat` flag allows you to repeat all (or selected) test methods
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1889:| `$ foo_test --gtest_repeat=1000` | Repeat foo\_test 1000 times and don't stop at failures. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1890:|:---------------------------------|:--------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1891:| `$ foo_test --gtest_repeat=-1`   | A negative count means repeating forever.               |
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1892:| `$ foo_test --gtest_repeat=1000 --gtest_break_on_failure` | Repeat foo\_test 1000 times, stopping at the first failure. This is especially useful when running under a debugger: when the testfails, it will drop into the debugger and you can then inspect variables and stacks. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1893:| `$ foo_test --gtest_repeat=1000 --gtest_filter=FooBar` | Repeat the tests whose name matches the filter 1000 times. |
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1895:If your test program contains global set-up/tear-down code registered
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1904:You can specify the `--gtest_shuffle` flag (or set the `GTEST_SHUFFLE`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1911:order-related test failure later. To specify the random seed
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1912:explicitly, use the `--gtest_random_seed=SEED` flag (or set the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1918:If you combine this with `--gtest_repeat=N`, Google Test will pick a
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1919:different random seed and re-shuffle the tests in each iteration.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1932:You can set the GTEST\_COLOR environment variable or set the `--gtest_color`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1936:non-Windows platforms) the `TERM` environment variable is set to `xterm` or
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1937:`xterm-color`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1944:suppress that, run the test program with the `--gtest_print_time=0`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1958:`--gtest_output` flag to the string `"xml:_path_to_output_file_"`, which will
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:1972:systems like [Jenkins](http://jenkins-ci.org/). Since that format
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2003:<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2008:      <failure message="Value of: add(1, -1)&#x0A; Actual: 1&#x0A;Expected: 0" type=""/>
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2031:### Turning Assertion Failures into Break-Points ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2035:mode. Google Test's _break-on-failure_ mode supports this behavior.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2038:other than `0` . Alternatively, you can use the `--gtest_break_on_failure`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2043:### Disabling Catching Test-Thrown Exceptions ###
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2050:cause a pop-up window, so catching the exceptions allows you to run
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2057:`--gtest_catch_exceptions=0` flag when running the tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2096:non-zero code, which will also signal a test failure to your test
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2101:the `--gtest_throw_on_failure` flag on the command-line or setting the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2102:`GTEST_THROW_ON_FAILURE` environment variable to a non-zero value.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2121:  1. On each shard, set the `GTEST_SHARD_INDEX` environment variable to the index of the shard.  Different shards must be assigned different indices, which must be in the range `[0, GTEST_TOTAL_SHARDS - 1]`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2128:variable `GTEST_SHARD_STATUS_FILE` to a non-existent file path.  If a
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2171:`gtest/gtest.h` and `gtest/gtest-all.cc` in it.  These files contain
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_AdvancedGuide.md:2181:can read the [Frequently-Asked Questions](V1_7_FAQ.md).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Documentation.md:2:-- **if you use a released version of Google Test, please read the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Documentation.md:5:  * [Primer](V1_7_Primer.md) -- start here if you are new to Google Test.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Documentation.md:6:  * [Samples](V1_7_Samples.md) -- learn from examples.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Documentation.md:7:  * [AdvancedGuide](V1_7_AdvancedGuide.md) -- learn more about Google Test.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Documentation.md:8:  * [XcodeGuide](V1_7_XcodeGuide.md) -- how to use Google Test in Xcode on Mac.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Documentation.md:9:  * [Frequently-Asked Questions](V1_7_FAQ.md) -- check here before asking a question on the mailing list.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Documentation.md:13:  * [DevGuide](DevGuide.md) -- read this _before_ writing your first patch.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Documentation.md:14:  * [PumpManual](V1_7_PumpManual.md) -- how we generate some of Google Test's source files.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:13:be) a single best framework - you have to pick the right tool for the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:19:Test.  We don't claim them to be unique to Google Test - rather, the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:24:  * Nonfatal assertions (`EXPECT_*`) have proven to be great time savers, as they allow a test to report multiple failures in a single edit-compile-test cycle.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:28:  * `SCOPED_TRACE` helps you understand the context of an assertion failure when it comes from inside a sub-routine or loop.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:31:  * Simple things are easy in Google Test, while hard things are possible: in addition to advanced features like [global test environments](V1_7_AdvancedGuide.md#global-set-up-and-tear-down) and tests parameterized by [values](V1_7_AdvancedGuide.md#value-parameterized-tests) or [types](V1_7_AdvancedGuide.md#typed-tests), Google Test supports various ways for the user to extend the framework -- if Google Test doesn't do something out of the box, chances are that a user can implement the feature using Google Test's public API, without changing Google Test itself.  In particular, you can:
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:32:    * expand your testing vocabulary by defining [custom predicates](V1_7_AdvancedGuide.md#predicate-assertions-for-better-error-messages),
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:33:    * teach Google Test how to [print your types](V1_7_AdvancedGuide.md#teaching-google-test-how-to-print-your-values),
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:34:    * define your own testing macros or utilities and verify them using Google Test's [Service Provider Interface](V1_7_AdvancedGuide.md#catching-failures), and
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:35:    * reflect on the test cases or change the test output format by intercepting the [test events](V1_7_AdvancedGuide.md#extending-google-test-by-handling-test-events).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:47:It is not always possible to make Google Test warning-free for everyone.  Or, it may not be desirable if the warning is rarely enabled and fixing the violations makes the code more complex.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:49:If you see warnings when compiling Google Test, we suggest that you use the `-isystem` flag (assuming your are using GCC) to mark Google Test headers as system headers.  That'll suppress warnings from Google Test headers.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:56:  1. any identifier that starts with an `_` followed by an upper-case letter, and
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:67:  1. If `TestCaseName` starts with an `_` followed by an upper-case letter (say, `_Foo`), we end up with `_Foo_TestName_Test`, which is reserved and thus invalid.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:73:(Actually, `TestCaseName` can start with `_` -- as long as the `_` isn't
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:74:followed by an upper-case letter.  But that's getting complicated.  So
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:97:## Why is it not recommended to install a pre-compiled copy of Google Test (for example, into /usr/local)? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:105:got-cha: every user needs to compile his tests using the _same_ compiler
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:110:Why?  Because C++ has this thing called the One-Definition Rule: if
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:115:doesn't, you get strange run-time behaviors that are unexpected and
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:121:Therefore, for your sanity, we recommend to avoid installing pre-compiled
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:126:## How do I generate 64-bit binaries on Windows (using Visual Studio 2008)? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:130:Load the supplied Visual Studio solution file, either `msvc\gtest-md.sln` or
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:138:`Standard` toolbar, which allow you to toggle between building 32-bit or
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:139:64-bit binaries (or both at once using Batch Build).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:144:this, multi-select (e.g. using shift-click) all projects (but not the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:145:solution) in the `Solution Explorer`. Right-click one of them and
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:152:solution. When the build is complete, the 64-bit binaries will be in
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:161:`PATH/TO/configure CC="gcc -mno-cygwin" CXX="g++ -mno-cygwin"`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:163:You should be able to replace the `-mno-cygwin` option with direct links
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:173:[these instructions](http://wiki.wxwidgets.org/Cross-Compiling_Under_Linux#Cross-compiling_under_Linux_for_MS_Windows)
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:181:Due to some peculiarity of C++, it requires some non-trivial template
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:185:harder to maintain and more error-prone than necessary).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:204:Finally, with the growth of Google Mock's [matcher](../../CookBook.md#using-matchers-in-google-test-assertions) library, we are
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:225:It's difficult to write thread-safe code.  Most tests are not written
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:226:with thread-safety in mind, and thus may not work correctly in a
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:227:multi-threaded setting.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:243:  1. The `EXPECT_*` family of macros will continue even after a failure, allowing multiple failures in a `TEST` to be reported in a single run. This is a popular feature, as in C++ the edit-compile-test cycle is usually quite long and being able to fixing more than one thing at a time is a blessing.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:274:Yet, many people think this is one line too many. :-) Our goal was to
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:293:  * The runner-style requires to split the information into two pieces: the definition of the death test itself, and the specification for the runner on how to run the death test and what to expect.  The death test would be written in C++, while the runner spec may or may not be.  A user needs to carefully keep the two in sync. `ASSERT_DEATH(statement, expected_message)` specifies all necessary information in one place, in one language, without boilerplate code. It is very declarative.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:294:  * `ASSERT_DEATH` has a similar syntax and error-reporting semantics as other Google Test assertions, and thus is easy to learn.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:304:  * `ASSERT_DEATH` can reference local variables in the current function, and you can decide how many death tests you want based on run-time information.  For example,
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:315:The runner-based approach tends to be more static and less flexible, or requires more user effort to get this kind of flexibility.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:319:fast, as `fork()` uses copy-on-write pages and incurs almost zero
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:320:overhead, and the child process starts from the user-supplied
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:328:Death tests (`EXPECT_DEATH`, etc) are executed in a sub-process s.t. the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:330:result, any in-memory side effects they incur are observable in their
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:331:respective sub-processes, but not in the parent process. You can think of them
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:359:data-driven tests in general. We hope to be able to make improvements in this
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:391:      ... additional set-up work ...
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:394:      ... clean-up work for FooTest ...
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:419:## My death test hangs (or seg-faults). How do I fix it? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:436:If you go with thread-safe death tests, remember that they rerun the test
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:438:program can run side-by-side with itself and is deterministic.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:442:bullet - sorry!
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:444:## Should I use the constructor/destructor of the test fixture or the set-up/tear-down function? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:455:  * If the tear-down operation could throw an exception, you must use `TearDown()` as opposed to the destructor, as throwing in a destructor leads to undefined behavior and usually will kill your program right away. Note that many standard libraries (like STL) may throw when exceptions are enabled in the compiler. Therefore you should prefer `TearDown()` if you want to write portable tests that work with or without exceptions.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:456:  * The assertion macros throw an exception when flag `--gtest_throw_on_failure` is specified. Therefore, you shouldn't use Google Test assertions in a destructor if you plan to run your tests with this flag.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:495:type of the function pointer for the `int`-version of `IsPositive()`.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:509:ASSERT_PRED1(IsNegative*<int>*, -5);
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:520:as the C++ pre-processor thinks you are giving `ASSERT_PRED2` 4 arguments,
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:569:## My set-up function is not called. Why? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:571:C++ is case-sensitive. It should be spelled as `SetUp()`.  Did you
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:582:the corresponding source code, or use `C-x `` to jump to the next failure.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:615:The Google Test output is meant to be a concise and human-friendly report. If
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:675:    return obj->private_member1_;
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:685:  * If the methods are declared **protected**, you can change their access level in a test-only subclass:
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:751:No. You can use a feature called [value-parameterized tests](V1_7_AdvancedGuide.md#Value_Parameterized_Tests) which
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:853:  * If you explicitly declare a non-default constructor for class `Foo`, then you need to define a default constructor, even if it would be empty.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:854:  * If `Foo` has a const non-static data member, then you have to define the default constructor _and_ initialize the const member in the initializer list of the constructor. (Early versions of `gcc` doesn't force you to initialize the const member. It's a bug that has been fixed in `gcc 4`.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:875:the test case would require multiple set-up and tear-down processes, which is
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:894:## But I don't like calling my entire test case FOODeathTest when it contains both death tests and non-death tests. What do I do? ##
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:914:If you use a user-defined type `FooType` in an assertion, you must make sure
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:941:set to /MT (use multi-threaded static libraries, /MTd for debug). If
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:942:your project uses something else, for example /MD (use multi-threaded
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:949:using gtest-md.vcproj instead of gtest.vcproj.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:953:[warning](V1_7_Primer.md#important-note-for-visual-c-users) on
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:959:http://hassanjamilahmad.blogspot.com/2009/07/gtest-starters-help.html.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:965:`export CC=cc CXX=CC CXXFLAGS='-library=stlport4'`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:970:different things accordingly, you are leaking test-only logic into
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:971:production code and there is no easy way to ensure that the test-only
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:979:differently under test is [dependency injection](http://jamesshore.com/Blog/Dependency-Injection-Demystified.html).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:982:for-test logic at all, there is no danger in accidentally running it.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:1000:  -DGTEST_DONT_DEFINE_FOO=1
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_FAQ.md:1003:from `FOO` to `GTEST_FOO`. For example, with `-DGTEST_DONT_DEFINE_TEST=1`, you'll need to write
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:13:  1. Tests should be _portable_ and _reusable_. The open-source community has a lot of code that is platform-neutral, its tests should also be platform-neutral.  Google C++ Testing Framework works on different OSes, with different compilers (gcc, MSVC, and others), with or without exceptions, so Google C++ Testing Framework tests can easily work with a variety of configurations.  (Note that the current release only contains build scripts for Linux - we are actively working on scripts for other platforms.)
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:14:  1. When tests fail, they should provide as much _information_ about the problem as possible. Google C++ Testing Framework doesn't stop at the first test failure. Instead, it only stops the current test and continues with the next. You can also set up tests that report non-fatal failures after which the current test continues. Thus, you can detect and fix multiple bugs in a single run-edit-compile cycle.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:16:  1. Tests should be _fast_. With Google C++ Testing Framework, you can reuse shared resources across tests and pay for the set-up/tear-down only once, without making tests depend on each other.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:36:(basically you want to compile `src/gtest-all.cc` with `GTEST_ROOT`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:88:possibly skipping clean-up code that comes after it, it may cause a space leak.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:89:Depending on the nature of the leak, it may or may not be worth fixing - so
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:104:macro--in particular, C strings and `string` objects. If a wide string
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:106:streamed to an assertion, it will be translated to UTF-8 when printed.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:112:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:128:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:149:arguments, see this Google Mock [recipe](../../googlemock/docs/CookBook.md#teaching-google-mock-how-to-print-your-values).).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:151:These assertions can work with a user-defined type, but only if you define the
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:180:|:--------------------|:-----------------------|:-------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:189:comparison of two wide strings fails, their values will be printed as UTF-8
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:204:  1. The test's result is determined by the assertions; if any assertion in the test fails (either fatally or non-fatally), or if the test crashes, the entire test fails. Otherwise, it succeeds.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:240:Google Test groups the test results by test cases, so logically-related tests
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:255:  1. Derive a class from `::testing::Test` . Start its body with `protected:` or `public:` as we'll want to access fixture members from sub-classes.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:257:  1. If necessary, write a default constructor or `SetUp()` function to prepare the objects for each test. A common mistake is to spell `SetUp()` as `Setup()` with a small `u` - don't let that happen to you.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:258:  1. If necessary, write a destructor or `TearDown()` function to release any resources you allocated in `SetUp()` . To learn when you should use the constructor/destructor and when you should use `SetUp()/TearDown()`, read this [FAQ entry](V1_7_FAQ.md#should-i-use-the-constructordestructor-of-the-test-fixture-or-the-set-uptear-down-function).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:370:`TEST()` and `TEST_F()` implicitly register their tests with Google Test. So, unlike with many other C++ testing frameworks, you don't have to re-list all your defined tests in order to run them.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:372:After defining your tests, you can run them with `RUN_ALL_TESTS()` , which returns `0` if all the tests are successful, or `1` otherwise. Note that `RUN_ALL_TESTS()` runs _all tests_ in your link unit -- they can be from different test cases, or even different source files.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:385:step 2, there is no point for step 3 - 5 and they are thus skipped. Similarly,
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:395:conflicts with some advanced Google Test features (e.g. thread-safe death
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:416:    // You can do set-up work for each test here.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:420:    // You can do clean-up work that doesn't throw exceptions here.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:485:There is one more pitfall, though. If you use Google Test as a static library (that's how it is defined in gtest.vcproj) your tests must also reside in a static library. If you have to have them in a DLL, you _must_ change Google Test to build into a DLL as well. Otherwise your tests will not run correctly or will not run at all. The general conclusion here is: make your life easier - do not write your tests in libraries!
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:495:Google Test is designed to be thread-safe.  The implementation is
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:496:thread-safe on systems where the `pthreads` library is available.  It
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Primer.md:501:synchronization primitives in `gtest-port.h` for your platform.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:10:error-prone work.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:23:non-intuitive, non-trivial changes in the script. This is especially
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:30:prefer) is a simple meta-programming tool for C++. The idea is that a
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:35:view it as a small Domain-Specific Language. The meta language is
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:36:designed to be non-intrusive (s.t. it won't confuse Emacs' C++ mode,
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:43:  * Pump tries to be smart with respect to [Google's style guide](http://code.google.com/p/google-styleguide/): it breaks long lines (easy to have when they are generated) at acceptable places to fit within 80 columns and indent the continuation lines correctly.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:44:  * The format is human-readable and more concise than XML.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:56:// Foo$i does blah for $i-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:75:// Foo0 does blah for 0-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:81:// Foo1 does blah for 1-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:87:// Foo2 does blah for 2-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:93:// Foo3 does blah for 3-ary predicates.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:123:|:----------------|:-----------------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:135:code, Pump ignores a new-line character if it's right after `$for foo`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:138:need to insert an extra new-line in such places for a new-line to show
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:172:You can find real-world applications of Pump in [Google Test](http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgoogletest\.googlecode\.com) and [Google Mock](http://www.google.com/codesearch?q=file%3A\.pump%24+package%3Ahttp%3A%2F%2Fgooglemock\.googlecode\.com).  The source file `foo.h.pump` generates `foo.h`.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_PumpManual.md:177:  * To avoid extra-long Pump source lines, you can break a line anywhere you want by inserting `[[]]` followed by a new line. Since any new-line character next to `[[` or `]]` is ignored, the generated code won't contain this new line.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Samples.md:2:[samples folder](../samples) has a number of well-commented samples showing how to use a
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Samples.md:9:  * [Sample #5](../samples/sample5_unittest.cc) teaches how to reuse a test fixture in multiple test cases by deriving sub-fixtures from it.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Samples.md:10:  * [Sample #6](../samples/sample6_unittest.cc) demonstrates type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Samples.md:11:  * [Sample #7](../samples/sample7_unittest.cc) teaches the basics of value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_Samples.md:12:  * [Sample #8](../samples/sample8_unittest.cc) shows using `Combine()` in value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:9:  1. Download the source from the [website](http://code.google.com/p/googletest) using this command: `svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only`
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:10:  1. Open up the `gtest.xcodeproj` in the `googletest-read-only/xcode/` directory and build the gtest.framework.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:24:svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:29:To use `svn:externals`, decide where you would like to have the external source reside. You might choose to put the external source inside the trunk, because you want it to be part of the branch when you make a release. However, keeping it outside the trunk in a version-tagged directory called something like `third-party/googletest/1.0.1`, is another option. Once the location is established, use `svn propedit svn:externals _directory_` to set the svn:externals property on a directory in your repository. This directory won't contain the code, but be its versioned parent directory.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:31:The command `svn propedit` will bring up your Subversion editor, making editing the long, (potentially multi-line) property simpler. This same method can be used to check out a tagged branch, by using the appropriate URL (e.g. `http://googletest.googlecode.com/svn/tags/release-1.0.1`). Additionally, the svn:externals property allows the specification of a particular revision of the trunk with the `-r_##_` option (e.g. `externals/src/googletest -r60 http://googletest.googlecode.com/svn/trunk`).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:44:  * **Option 1** --- The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the "Add->Existing Framework..." from the context menu or "Project->Add..." from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:45:  * **Option 2** --- If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:53:  * **Option 1** --- During compilation, Xcode will need to know that you are linking against the gtest.framework. Add the gtest.framework to the "Link Binary with Libraries" build phase of your test target. This will include the Google Test headers in your header search path, and will tell the linker where to find the library.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:54:  * **Option 2** --- If your working out of the trunk, you'll also want to add gtest.framework to your "Link Binary with Libraries" build phase of your test target. In addition, you'll  want to add the gtest.framework as a dependency to your unit test target. This way, Xcode will make sure that gtest.framework is up to date, every time your build your target. Finally, if you don't share build directories with Google Test, you'll have to copy the gtest.framework into your own build products directory using a "Run Script" build phase.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:63:[Session started at 2008-08-15 06:23:57 -0600.]
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:76:[Session started at 2008-08-06 06:36:13 -0600.]
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:78:[----------] Global test environment set-up.
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:79:[----------] 2 tests from WidgetInitializerTest
/Volumes/src/simhub/src/libs/googletest/docs/V1_7_XcodeGuide.md:84:[----------] Global test environment tear-down
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:9:  1. Download the source from the [website](http://code.google.com/p/googletest) using this command: `svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only`
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:10:  1. Open up the `gtest.xcodeproj` in the `googletest-read-only/xcode/` directory and build the gtest.framework.
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:24:svn checkout http://googletest.googlecode.com/svn/trunk/ googletest-read-only
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:29:To use `svn:externals`, decide where you would like to have the external source reside. You might choose to put the external source inside the trunk, because you want it to be part of the branch when you make a release. However, keeping it outside the trunk in a version-tagged directory called something like `third-party/googletest/1.0.1`, is another option. Once the location is established, use `svn propedit svn:externals _directory_` to set the svn:externals property on a directory in your repository. This directory won't contain the code, but be its versioned parent directory.
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:31:The command `svn propedit` will bring up your Subversion editor, making editing the long, (potentially multi-line) property simpler. This same method can be used to check out a tagged branch, by using the appropriate URL (e.g. `http://googletest.googlecode.com/svn/tags/release-1.0.1`). Additionally, the svn:externals property allows the specification of a particular revision of the trunk with the `-r_##_` option (e.g. `externals/src/googletest -r60 http://googletest.googlecode.com/svn/trunk`).
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:44:  * **Option 1** --- The simplest way to add Google Test to your own project, is to open gtest.xcodeproj (found in the xcode/ directory of the Google Test trunk) and build the framework manually. Then, add the built framework into your project using the "Add->Existing Framework..." from the context menu or "Project->Add..." from the main menu. The gtest.framework is relocatable and contains the headers and object code that you'll need to make tests. This method requires rebuilding every time you upgrade Google Test in your project.
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:45:  * **Option 2** --- If you are going to be living off the trunk of Google Test, incorporating its latest features into your unit tests (or are a Google Test developer yourself). You'll want to rebuild the framework every time the source updates. to do this, you'll need to add the gtest.xcodeproj file, not the framework itself, to your own Xcode project. Then, from the build products that are revealed by the project's disclosure triangle, you can find the gtest.framework, which can be added to your targets (discussed below).
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:53:  * **Option 1** --- During compilation, Xcode will need to know that you are linking against the gtest.framework. Add the gtest.framework to the "Link Binary with Libraries" build phase of your test target. This will include the Google Test headers in your header search path, and will tell the linker where to find the library.
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:54:  * **Option 2** --- If your working out of the trunk, you'll also want to add gtest.framework to your "Link Binary with Libraries" build phase of your test target. In addition, you'll  want to add the gtest.framework as a dependency to your unit test target. This way, Xcode will make sure that gtest.framework is up to date, every time your build your target. Finally, if you don't share build directories with Google Test, you'll have to copy the gtest.framework into your own build products directory using a "Run Script" build phase.
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:63:[Session started at 2008-08-15 06:23:57 -0600.]
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:76:[Session started at 2008-08-06 06:36:13 -0600.]
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:78:[----------] Global test environment set-up.
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:79:[----------] 2 tests from WidgetInitializerTest
/Volumes/src/simhub/src/libs/googletest/docs/XcodeGuide.md:84:[----------] Global test environment tear-down
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:41:#include "gtest/internal/gtest-death-test-internal.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:46:// meaning that the death test child process will re-execute the test binary
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:74://   2. The parent process clone()s a sub-process and runs the death
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:75://   test in it; the sub-process exits with code 0 at the end of the
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:78://   3. The parent process waits for the sub-process to terminate.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:81://   the sub-process.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:102://   On POSIX-compliant systems (*nix), we use the <regex.h> library,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:142://   not implemented by us, you will get a run-time failure.  In that
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:154://   program from argv[0] and re-executes it in the sub-process.  For
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:156://   when launching the sub-process.  This means that the user must
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:163:// TODO(wan@google.com): make thread-safe death tests search the PATH.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:195:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:235://   // opt-mode has sideeffect visible.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:238://   // dbg-mode no visible sideeffect.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:246:// need to test that a function has appropriate side-effects in opt
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:247:// mode, include assertions against the side-effects.  A general
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-death-test.h:251://   // Side-effects here will have an effect after this statement in
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:40://   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:51:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:100:  // Constructs a Message from a C-string.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:113:  // Streams a non-pointer value to this object.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:140:  // [temp.func.order].)  If you stream a non-pointer, then the
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:176:  // using the UTF-8 encoding.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:181:  // Converts the given wide string to a narrow string using the UTF-8
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:187:  // Converts the given wide string to a narrow string using the UTF-8
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:195:  // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-message.h:204:  // tr1::type_traits-like is_pointer works, and we can overload on that.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:2://     pump.py gtest-param-test.h.pump
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:45:// Value-parameterized tests allow you to test your code with different
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:48:// Here is how you use value-parameterized tests:
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:52:// To write value-parameterized tests, first you should define a fixture
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:86://  Range(begin, end [, step]) - Yields values {begin, begin+step,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:89://  Values(v1, v2, ..., vN)    - Yields values {v1, v2, ..., vN}.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:90://  ValuesIn(container)        - Yields values from a C-style array, an STL
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:92://  Bool()                     - Yields sequence {false, true}.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:93://  Combine(g1, g2, ..., gN)   - Yields all combinations (the Cartesian product
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:121:// You can use these names in --gtest_filter.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:163:  // You can inherit all the usual members for a non-parameterized test
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:172:  // This is an ordinary non-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:182:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:191:#include "gtest/internal/gtest-internal.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:192:#include "gtest/internal/gtest-param-util.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:193:#include "gtest/internal/gtest-param-util-generated.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:201:// Google Test uses these generators to produce parameters for value-
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:222://   - returns a generator producing a sequence of values {start, start+1,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:225://   - returns a generator producing a sequence of values {start, start+step,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:232://     floating-point type or a user defined type satisfying these conditions:
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:234://     * It must have operator+() (operator+(int-compatible type) for
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:235://       two-operand version).
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:257://   - returns a generator producing sequences with elements from
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:258://     a C-style array.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:260://   - returns a generator producing sequences with elements from
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:261://     an STL-style container.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:263://   - returns a generator producing sequences with elements from
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:264://     a range [begin, end) defined by a pair of STL-style iterators. These
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:273:// each with C-string values of "foo", "bar", and "baz":
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:333://   - returns a generator producing sequences with elements v1, v2, ..., vN.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:1204://   - returns a generator producing sequences with elements {false, true}.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:1230://   - returns a generator producing sequences with elements coming from
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:1388:      ::testing::UnitTest::GetInstance()->parameterized_test_registry(). \
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:1392:                  __FILE__, __LINE__))->AddTestPattern(\
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:1418:// Note: test names must be non-empty, unique, and may only contain ASCII
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:1430:      ::testing::UnitTest::GetInstance()->parameterized_test_registry(). \
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h:1434:                  __FILE__, __LINE__))->AddTestCaseInstantiation(\
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:1:$$ -*- mode: c++; -*-
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:44:// Value-parameterized tests allow you to test your code with different
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:47:// Here is how you use value-parameterized tests:
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:51:// To write value-parameterized tests, first you should define a fixture
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:85://  Range(begin, end [, step]) - Yields values {begin, begin+step,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:88://  Values(v1, v2, ..., vN)    - Yields values {v1, v2, ..., vN}.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:89://  ValuesIn(container)        - Yields values from a C-style array, an STL
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:91://  Bool()                     - Yields sequence {false, true}.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:92://  Combine(g1, g2, ..., gN)   - Yields all combinations (the Cartesian product
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:120:// You can use these names in --gtest_filter.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:162:  // You can inherit all the usual members for a non-parameterized test
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:171:  // This is an ordinary non-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:181:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:190:#include "gtest/internal/gtest-internal.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:191:#include "gtest/internal/gtest-param-util.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:192:#include "gtest/internal/gtest-param-util-generated.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:200:// Google Test uses these generators to produce parameters for value-
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:221://   - returns a generator producing a sequence of values {start, start+1,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:224://   - returns a generator producing a sequence of values {start, start+step,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:231://     floating-point type or a user defined type satisfying these conditions:
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:233://     * It must have operator+() (operator+(int-compatible type) for
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:234://       two-operand version).
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:256://   - returns a generator producing sequences with elements from
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:257://     a C-style array.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:259://   - returns a generator producing sequences with elements from
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:260://     an STL-style container.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:262://   - returns a generator producing sequences with elements from
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:263://     a range [begin, end) defined by a pair of STL-style iterators. These
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:272:// each with C-string values of "foo", "bar", and "baz":
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:332://   - returns a generator producing sequences with elements v1, v2, ..., vN.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:361://   - returns a generator producing sequences with elements {false, true}.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:387://   - returns a generator producing sequences with elements coming from
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:454:      ::testing::UnitTest::GetInstance()->parameterized_test_registry(). \
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:458:                  __FILE__, __LINE__))->AddTestPattern(\
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:483:// Note: test names must be non-empty, unique, and may only contain ASCII
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:496:      ::testing::UnitTest::GetInstance()->parameterized_test_registry(). \
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-param-test.h.pump:500:                  __FILE__, __LINE__))->AddTestCaseInstantiation(\
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:32:// Google Test - The Google C++ Testing Framework
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:55:// pointer value and the NUL-terminated string it points to are
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:61://   // pointer, the NUL-terminated string (but not the pointer) is
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:67://   // pointer, the NUL-terminated string (but not the pointer) is
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:73://   // pointer and the NUL-terminated string for a (const or not) char pointer.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:78://   // gtest-port.h.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:84:// The print primitives print the elements of an STL-style container
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:85:// using the compiler-inferred type of *iter where iter is a
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:92:// being defined as many user-defined container types don't have
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:103:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:104:#include "gtest/internal/gtest-internal.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:171:  // given that it has no user-defined printer.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:215:// This namespace MUST NOT BE NESTED IN ::testing, or the name look-up
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:219:// Used to print a value that is not an STL-style container when the
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:228:  // 7.3.4-1 [namespace.udir].  This allows us to fall back onto
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:239:  //   1. foo::operator<< (thanks to Koenig look-up),
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:266:// know whether the pointer is supposed to point to a NUL-terminated
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:269:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:290:// whether they actually point to a NUL-terminated string.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:309:// to point to a NUL-terminated string, and thus can print it as a string.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:347:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:367:// Used to print an STL-style container when the user doesn't define
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:401:// implementation-defined.  Therefore they will be printed as raw
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:417:      // relying on ADL to pick up user-defined << for their pointer
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:433:// Used to print a non-container, non-pointer value when the user
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:457:  // STL-style container, the version for container will be called; if
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:481:// UniversalPrinter<T>::Print() how to print standard types (built-in
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:494:// Overloads for other simple built-in types.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:542:// Overload for C arrays.  Multi-dimensional arrays are printed
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:596:// tuples of up-to 10 fields.  The following implementation works
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:598:// non-standard variadic template feature or not.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:686:// Implements printing a non-reference type T by letting the compiler
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:702:    // Thanks to Koenig look-up, if T is a class and has its own
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:706:    // following statement - exactly what we want.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:732:      PrintRawArrayTo(begin + len - kChunkSize, kChunkSize, os);
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:778:// NUL-terminated string (but not the pointer) is printed.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:850:// NUL-terminated string.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:862:// - tuple_size
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:864:// - get<size_t I>(const TupleT& t)
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:866:// - tuple_element<size_t I>::type
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:916:// TuplePrefixPrinter<N - 1>.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:924:    TuplePrefixPrinter<N - 1>::PrintPrefixTo(t, os);
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:931:        typename TuplePolicy<Tuple>::template tuple_element<N - 1>::type>
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:932:        ::Print(TuplePolicy<Tuple>::template get<N - 1>(t), os);
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:939:    TuplePrefixPrinter<N - 1>::TersePrintPrefixToStrings(t, strings);
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:941:    UniversalTersePrint(TuplePolicy<Tuple>::template get<N - 1>(t), &ss);
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:942:    strings->push_back(ss.str());
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-printers.h:991:#include "gtest/internal/custom/gtest-printers.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-spi.h:95:// non-fatal failure will be generated.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-spi.h:128://   - 'statement' cannot reference local non-static variables or
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-spi.h:129://     non-static members of the current object.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-spi.h:130://   - 'statement' cannot return a value.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-spi.h:131://   - You cannot stream a failure message to this macro.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-spi.h:173:// generate Google Test non-fatal failures.  It asserts that the given
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-spi.h:174:// statement will cause exactly one non-fatal Google Test failure with 'substr'
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-spi.h:188://   - You cannot stream a failure message to this macro.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-test-part.h:38:#include "gtest/internal/gtest-internal.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-test-part.h:39:#include "gtest/internal/gtest-string.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-test-part.h:81:  // or -1 if it's unknown.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-test-part.h:96:  // Returns true iff the test part non-fatally failed.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-test-part.h:112:  // The line in the source file where the test part took place, or -1
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-test-part.h:133:  // Returns the TestPartResult at the given index (0-based).
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-test-part.h:160:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:35:// This header implements typed tests and type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:37:// Typed (aka type-driven) tests repeat the same test for types in a
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:70:  TypeParam n = this->value_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:87:// Type-parameterized tests are abstract test patterns parameterized
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:88:// by a type.  Compared with typed tests, type-parameterized tests
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:95:// suite of type-parameterized tests to verify properties that any
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:110:// Next, declare that you will define a type-parameterized test case
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:115:// Then, use TYPED_TEST_P() to define as many type-parameterized tests
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:116:// for this type-parameterized test case as you want.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:149:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:150:#include "gtest/internal/gtest-type-util.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:156:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:191:// Implements type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:195:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:197:// Expands to the namespace name that the type-parameterized tests for
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:198:// the given type-parameterized test case are defined in.  The exact
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:203:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:210:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE DIRECTLY.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest-typed-test.h:217:// The variables defined in the type-parameterized test macros are
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:41://   // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:58:#include "gtest/internal/gtest-internal.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:59:#include "gtest/internal/gtest-string.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:60:#include "gtest/gtest-death-test.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:61:#include "gtest/gtest-message.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:62:#include "gtest/gtest-param-test.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:63:#include "gtest/gtest-printers.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:65:#include "gtest/gtest-test-part.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:66:#include "gtest/gtest-typed-test.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:93:// This flag controls whether Google Test catches all test-thrown exceptions
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:122:// is 1. If the value is -1 the tests are repeating forever.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:138:// non-zero code otherwise.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:179:// remembers a non-empty message that describes how it failed.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:187://   2. Defining predicate-format functions to be
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:298:    return message_.get() != NULL ?  message_->c_str() : "";
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:323:    message_->append(a_message.GetString().c_str());
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:354:// explicitly derive from Test - the TEST macro automatically does
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:386:  // test in test case Foo.  Hence a sub-class can define its own
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:394:  // test in test case Foo.  Hence a sub-class can define its own
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:402:  // Returns true iff the current test has a non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:406:  // non-fatal) failure.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:442:  // A sub-class must implement this to define the test logic.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:462:  //   - The return type is deliberately chosen to be not void, so it
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:466:  //   - This method is private, so it will be another compiler error
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:472:  // about it being private, you have mis-spelled SetUp() as Setup().
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:547:  // Returns true iff the test has a non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:553:  // Returns the i-th test part result among all the results. i can range
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:554:  // from 0 to test_property_count() - 1. If i is not in that range, aborts
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:558:  // Returns the i-th test property. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:559:  // test_property_count() - 1. If i is not in that range, aborts the
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:587:  // a non-fatal failure if invalid (e.g., if it conflicts with reserved
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:657:  // or a type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:660:      return type_param_->c_str();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:665:  // is not a value-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:668:      return value_param_->c_str();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:680:  // been specified) and its full name matches the user-specified filter.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:686:  // A filter is a colon-separated list of glob (not regex) patterns,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:687:  // optionally followed by a '-' and a colon-separated list of
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:730:           const char* a_type_param,   // NULL if not a type-parameterized test
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:731:           const char* a_value_param,  // NULL if not a value-parameterized test
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:747:    test_info->result_.Clear();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:754:  // type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:757:  // value-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:764:                                    // user-specified filter.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:789:  //                 this is not a type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:803:  // type-parameterized test case.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:806:      return type_param_->c_str();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:843:  // Returns the i-th test among all the tests. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:844:  // total_test_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:863:  // Returns the i-th test among all the tests. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:864:  // total_test_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:879:    test_case->ClearResult();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:895:    return test_info->should_run() && test_info->result()->Passed();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:900:    return test_info->should_run() && test_info->result()->Failed();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:906:    return test_info->is_reportable() && test_info->is_disabled_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:911:    return test_info->is_disabled_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:916:    return test_info->is_reportable();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:921:    return test_info->should_run();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:933:  // type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:939:  // shuffling and restoring the test order.  The i-th element in this
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:940:  // vector is the index of the i-th test in the shuffled test list.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:962:// An Environment object does the set-up and tear-down in virtual
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:984:  // about it being private, you have mis-spelled SetUp() as Setup().
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1004:  // Fired before environment set-up for each iteration of tests starts.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1007:  // Fired after environment set-up for each iteration of tests ends.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1025:  // Fired before environment tear-down for each iteration of tests starts.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1028:  // Fired after environment tear-down for each iteration of tests ends.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1089:  // controlled by the --gtest_output=xml flag.  Can be removed from the
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1149:// This class is thread-safe as long as the methods are called
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1163:  // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1185:  // value-parameterized tests and instantiate and register them.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1187:  // INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1240:  // Gets the i-th test case among all the test cases. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1241:  // total_test_case_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1254:  // program is run, all global test environments will be set-up in
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1256:  // have finished, all global test environments will be torn-down in
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1282:  // Gets the i-th test case among all the test cases. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1283:  // total_test_case_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1309:  // Pushes a trace defined by SCOPED_TRACE() on to the per-thread
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1314:  // Pops a trace from the per-thread Google Test trace stack.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1351:  return UnitTest::GetInstance()->AddEnvironment(env);
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1362:// Calling the function for the second time has no user-visible effect.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1471:      // Unfortunately, gcc with -Wconversion-null warns when "passing NULL to
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1472:      // non-pointer argument" (even a deduced integral argument), so the old
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1496:// ASSERT_?? and EXPECT_??.  It is here just to avoid copy-and-paste
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1504:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1519:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1536:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1544:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1552:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1560:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1569:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1577:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1623:// Helper template function for comparing floating-points.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1627://   RawType: the raw floating-point type (either float or double)
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1629:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1658:// INTERNAL IMPLEMENTATION - DO NOT USE IN A USER PROGRAM.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1666:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1684:  // re-using stack space even for temporary variables, so every EXPECT_EQ
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1710:// The pure interface class that all value-parameterized tests inherit from.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1711:// A value-parameterized class must inherit from both ::testing::Test and
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1751:  // constructor. This member function is non-static, even though it only
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1757:        << "GetParam() can only be called inside a value-parameterized test "
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1758:        << "-- did you intend to write TEST_P instead of TEST_F?";
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1779:// Most value-parameterized classes can ignore the existence of
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1791:// SUCCEED generates a success - it doesn't automatically make the
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1803:// usually want the fail-fast behavior of FAIL and ASSERT_*, but those
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1804:// writing data-driven tests often find themselves using ADD_FAILURE
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1872:// Includes the auto-generated header that implements a family of
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1886:// their actual values.  The values must be compatible built-in types,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1892://   1. It is possible to make a user-defined type work with
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:1979:// C-string Comparisons.  All tests treat NULL and any non-NULL string
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2013:// Macros for comparing floating-point numbers.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2022:// Google Test uses ULP-based comparison to automatically pick a default
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2024:// FloatingPoint template class in gtest-internal.h if you are
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2051:// These predicate format functions work on floating-point values, and
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2072:// expected result and the actual result with both a human-readable
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2113:// to appear in the same block - as long as they are on different
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2119:// Compile-time assertion for type equality.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2229:// namespace and has an all-caps name.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest.h:2233:  return ::testing::UnitTest::GetInstance()->Run();
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest_pred_impl.h:62:// where pred is an n-ary function or functor that returns bool,
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest_pred_impl.h:277:// 4-ary predicate assertion macros.
/Volumes/src/simhub/src/libs/googletest/include/gtest/gtest_pred_impl.h:346:// 5-ary predicate assertion macros.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/custom/gtest-port.h:35://     GTEST_USE_OWN_FLAGFILE_FLAG_  - Define to 0 when the system provides its
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/custom/gtest-port.h:45://     GTEST_TEST_FILTER_ENV_VAR_ - The name of an environment variable that
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/custom/gtest-port.h:46://                                  will be used if --GTEST_FLAG(test_filter)
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/custom/gtest-port.h:55://     GTEST_HAS_NOTIFICATION_ - Enabled if Notification is already provided.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/custom/gtest-port.h:56://     GTEST_HAS_MUTEX_AND_THREAD_LOCAL_ - Enabled if Mutex and ThreadLocal are
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/custom/gtest-printers.h:32:// It will be included from gtest-printers.h and the overrides in this file
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/custom/gtest-printers.h:34:// See documentation at gtest/gtest-printers.h for details on how to define a
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/custom/gtest.h:33:// GTEST_OS_STACK_TRACE_GETTER_  - The name of an implementation of
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:40:#include "gtest/internal/gtest-internal.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:59:// style, as defined by the --gtest_death_test_style and/or
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:60:// --gtest_internal_run_death_test flags.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:88:    ~ReturnSentinel() { test_->Abort(TEST_ENCOUNTERED_RETURN_STATEMENT); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:115:  // exited during the test, its exit status matches a user-supplied
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:116:  // predicate, and its stderr output matches a user-supplied regular
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:118:  // The user-supplied predicate may be a macro expression rather
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:126:  // Returns a human-readable outcome message regarding the outcome of
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:167:        "\n%s: Caught std::exception-derived exception escaping the " \
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:172:    death_test->Abort(::testing::internal::DeathTest::TEST_THREW_EXCEPTION); \
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:174:    death_test->Abort(::testing::internal::DeathTest::TEST_THREW_EXCEPTION); \
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:197:      switch (gtest_dt->AssumeRole()) { \
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:199:          if (!gtest_dt->Passed(predicate(gtest_dt->Wait()))) { \
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:207:          gtest_dt->Abort(::testing::internal::DeathTest::TEST_DID_NOT_DIE); \
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:232:// --gtest_internal_run_death_test flag, as it existed when
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:275:// compile on a death-test supporting system.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:278://   statement -  A statement that a macro such as EXPECT_DEATH would test
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:283://   regex     -  A regex that a macro such as EXPECT_DEATH would use to test
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-death-test-internal.h:288://   terminator - Must be an empty statement for EXPECT_DEATH_IF_SUPPORTED
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:37:// This file is #included in <gtest/internal/gtest-internal.h>.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:43:#include "gtest/internal/gtest-string.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:48:// FilePath - a class for file and directory pathname manipulation which
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:49:// handles platform-specific conventions (like the pathname separator).
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:52:// "immutable value object" -- useful for peace of mind.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:56:// Names are NOT checked for syntax correctness -- no checking for illegal
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:105:  // function at the same time -- they could both pick the same filename.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:134:  // Returns a copy of the FilePath with the case-insensitive extension removed.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:136:  // FilePath("dir/file"). If a case-insensitive extension is not
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:152:  // Returns true if FilePath describes something in the file-system,
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-filepath.h:156:  // Returns true if pathname describes a directory in the file-system
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:40:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:63:#include "gtest/gtest-message.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:64:#include "gtest/internal/gtest-string.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:65:#include "gtest/internal/gtest-filepath.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:66:#include "gtest/internal/gtest-type-util.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:75:// http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.6
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:108:// expression is a null pointer literal (i.e. NULL or any 0-valued
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:109:// compile-time integral constant).  Their return values have
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:124:// A compile-time bool constant that is true if and only if x is a
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:125:// null pointer literal (i.e. NULL or any 0-valued compile-time
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:129:// passing non-POD classes through ellipsis (...).
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:136:// Appends the user-supplied message to the Google-Test-generated message.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:179:// See http://en.wikipedia.org/wiki/Wagner-Fischer_algorithm
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:232:// This template class represents an IEEE floating-point number
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:233:// (either single-precision or double-precision, depending on the
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:237:// comparison.  (Due to round-off error, etc, it's very unlikely that
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:238:// two floating-points will be equal exactly.  Hence a naive
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:241:// Format of IEEE floating-point:
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:243://   The most-significant bit being the leftmost, an IEEE
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:244://   floating-point looks like
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:256://   http://en.wikipedia.org/wiki/IEEE_floating-point_standard.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:260://   RawType: the raw floating-point type (either float or double)
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:275:    std::numeric_limits<RawType>::digits - 1;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:278:  static const size_t kExponentBitCount = kBitCount - 1 - kFractionBitCount;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:281:  static const Bits kSignBitMask = static_cast<Bits>(1) << (kBitCount - 1);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:295:  // The maximum error of a single floating-point operation is 0.5
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:296:  // units in the last place.  On Intel CPU's, all floating-point
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:297:  // calculations are done with 80-bit precision, while double has 64
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:301:  // http://randomascii.wordpress.com/2012/02/25/comparing-floating-point-numbers-2012-edition/
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:304:  // Constructs a FloatingPoint from a raw floating-point number.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:306:  // On an Intel CPU, passing a non-normalized NAN (Not a Number)
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:314:  // Reinterprets a bit pattern as a floating-point number.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:323:  // Returns the floating-point number that represent positive infinity.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:328:  // Returns the maximum representable finite floating-point number.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:331:  // Non-static methods
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:355:  //   - returns false if either number is (or both are) NAN.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:356:  //   - treats really large numbers as almost equal to infinity.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:357:  //   - thinks +0.0 and -0.0 are 0 DLP's apart.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:368:  // The data type used to store the actual floating-point number.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:370:    RawType value_;  // The raw floating-point number.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:374:  // Converts an integer from the sign-and-magnitude representation to
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:376:  // power of (kBitCount - 1), an integer x is represented by the
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:381:  //   -N + 1 (the most negative number representable using
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:382:  //          sign-and-magnitude) is represented by 1;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:384:  //   N - 1  (the biggest number representable using
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:385:  //          sign-and-magnitude) is represented by 2N - 1.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:399:  // Given two numbers in the sign-and-magnitude representation,
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:405:    return (biased1 >= biased2) ? (biased1 - biased2) : (biased2 - biased1);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:489:// Predicate-formatters for implementing the HRESULT checking macros
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:519://                     this is not a typed or a type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:521://                     or NULL if this is not a type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:547:// State of the definition of a type-parameterized test case.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:576:    return it->second;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:592:// Skips to the first non-space char after the first comma in 'str';
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:616:// registers a list of type-parameterized tests with Google Test.  The
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:617:// return value is insignificant - we just need to return something
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:621:// template parameter.  It's defined in gtest-type-util.h.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:627:  // Types).  Valid values for 'index' are [0, N - 1] where N is the
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:637:    // First, registers the first type-parameterized test in the type
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:670:// Test.  The return value is insignificant - we just need to return
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:680:    if (!state->TestExists(test_name)) {
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:688:    const CodeLocation& test_location = state->GetCodeLocation(test_name);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:851:// ImplicitlyConvertible<From, To>::value is a compile-time bool
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:899:// IsAProtocolMessage<T>::value is a compile-time bool constant that's
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:910:// STL-style container class, the first overload of IsContainerTest
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:951:// ArrayEq() compares two k-dimensional native arrays using the
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:991:// CopyArray() copies a k-dimensional native array using the elements'
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:1020:// We use 2 different structs to allow non-copyable types to be used, as long
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:1025:// Adapts a native array to a read-only STL-style container.  Instead
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:1029:// support Element being a raw type (i.e. having no top-level const or
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:1032:// multi-dimensional arrays are supported).
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:1036:  // STL-style container typedefs.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:1053:    (this->*rhs.clone_)(rhs.array_, rhs.size_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-internal.h:1061:  // STL-style container methods.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:38:// - Like all reference counting schemes, cycles lead to leaks.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:39:// - Each smart pointer is actually two pointers (8 bytes instead of 4).
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:40:// - Every time a pointer is assigned, the entire list of pointers to that
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:43:// - References are only tracked as long as linked_ptr<> objects are copied.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:59://   a linked_ptr object is thread-safe in the sense that:
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:60://     - it's safe to copy linked_ptr objects concurrently,
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:61://     - it's safe to copy *from* a linked_ptr and read its underlying
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:63://     - it's safe to write to two linked_ptrs that point to the same
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:74:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:83:// a non-template class because different types of linked_ptr<> can refer to
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:113:    while (p->next_ != ptr) {
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:114:      assert(p->next_ != this &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:117:      p = p->next_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:119:    p->next_ = this;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:131:    while (p->next_ != this) {
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:132:      assert(p->next_ != next_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:135:      p = p->next_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:137:    p->next_ = next_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:183:  T* operator->() const { return value_; }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:214:    value_ = ptr->get();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-linked_ptr.h:216:      link_.join(&ptr->link_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2://     pump.py gtest-param-util-generated.h.pump
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:52:#include "gtest/internal/gtest-param-util.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:53:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:60:// include/gtest/gtest-param-test.h.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:88:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:106:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:126:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:148:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:171:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:197:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:224:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:253:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:284:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:316:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:350:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:386:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:424:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:463:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:504:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:548:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:593:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:640:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:688:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:738:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:791:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:845:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:901:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:959:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1018:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1079:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1143:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1208:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1274:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1343:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1414:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1486:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1561:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1637:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1714:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1794:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1876:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:1959:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2044:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2131:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2220:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2311:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2403:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2497:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2593:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2691:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2791:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2893:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:2996:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3100:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3156:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3197:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3223:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3225:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3226:          current2_ == typed_other->current2_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3253:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3257:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3268:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3316:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3346:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3348:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3349:          current2_ == typed_other->current2_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3350:          current3_ == typed_other->current3_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3381:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3385:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3399:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3453:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3487:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3489:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3490:          current2_ == typed_other->current2_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3491:          current3_ == typed_other->current3_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3492:          current4_ == typed_other->current4_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3528:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3532:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3549:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3607:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3645:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3647:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3648:          current2_ == typed_other->current2_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3649:          current3_ == typed_other->current3_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3650:          current4_ == typed_other->current4_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3651:          current5_ == typed_other->current5_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3691:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3695:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3715:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3780:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3822:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3824:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3825:          current2_ == typed_other->current2_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3826:          current3_ == typed_other->current3_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3827:          current4_ == typed_other->current4_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3828:          current5_ == typed_other->current5_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3829:          current6_ == typed_other->current6_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3873:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3877:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3900:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:3970:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4016:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4018:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4019:          current2_ == typed_other->current2_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4020:          current3_ == typed_other->current3_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4021:          current4_ == typed_other->current4_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4022:          current5_ == typed_other->current5_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4023:          current6_ == typed_other->current6_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4024:          current7_ == typed_other->current7_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4072:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4076:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4102:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4179:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4229:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4231:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4232:          current2_ == typed_other->current2_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4233:          current3_ == typed_other->current3_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4234:          current4_ == typed_other->current4_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4235:          current5_ == typed_other->current5_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4236:          current6_ == typed_other->current6_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4237:          current7_ == typed_other->current7_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4238:          current8_ == typed_other->current8_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4290:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4294:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4323:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4404:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4458:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4460:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4461:          current2_ == typed_other->current2_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4462:          current3_ == typed_other->current3_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4463:          current4_ == typed_other->current4_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4464:          current5_ == typed_other->current5_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4465:          current6_ == typed_other->current6_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4466:          current7_ == typed_other->current7_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4467:          current8_ == typed_other->current8_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4468:          current9_ == typed_other->current9_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4525:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4529:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4561:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4647:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4705:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4707:          current1_ == typed_other->current1_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4708:          current2_ == typed_other->current2_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4709:          current3_ == typed_other->current3_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4710:          current4_ == typed_other->current4_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4711:          current5_ == typed_other->current5_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4712:          current6_ == typed_other->current6_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4713:          current7_ == typed_other->current7_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4714:          current8_ == typed_other->current8_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4715:          current9_ == typed_other->current9_ &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4716:          current10_ == typed_other->current10_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4777:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4781:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4816:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4832:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4852:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4875:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4901:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4929:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4961:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:4996:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:5035:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:5078:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h:5124:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:1:$$ -*- mode: c++; -*-
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:51:#include "gtest/internal/gtest-param-util.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:52:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:59:// include/gtest/gtest-param-test.h.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:91:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:104:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:150:    // Advance should not be called on beyond-of-range iterators
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:157:      if (current$(i+2-k)_ == end$(i+2-k)_) {
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:158:        current$(i+2-k)_ = begin$(i+2-k)_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:159:        ++current$(i+2-k-1)_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:180:      return (AtEnd() && typed_other->AtEnd()) ||
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:183:          current$(j)_ == typed_other->current$(j)_
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:212:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:216:    // begin[i]_ and end[i]_ define the i-th range that Iterator traverses.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:228:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:241:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util-generated.h.pump:267:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:47:#include "gtest/internal/gtest-internal.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:48:#include "gtest/internal/gtest-linked_ptr.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:49:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:50:#include "gtest/gtest-printers.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:78:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:103:  // BaseGenerator()->End().
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:108:  // Dereferences the current iterator and provides (read-only) access
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:110:  // Current() on an iterator equal to BaseGenerator()->End().
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:130:  ParamIterator(const ParamIterator& other) : impl_(other.impl_->Clone()) {}
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:133:      impl_.reset(other.impl_->Clone());
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:137:  const T& operator*() const { return *impl_->Current(); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:138:  const T* operator->() const { return impl_->Current(); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:141:    impl_->Advance();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:146:    ParamIteratorInterface<T>* clone = impl_->Clone();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:147:    impl_->Advance();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:151:    return impl_.get() == other.impl_.get() || impl_->Equals(*other.impl_);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:195:  iterator begin() const { return iterator(impl_->Begin()); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:196:  iterator end() const { return iterator(impl_->End()); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:203:// generate sequences of user-defined types that implement operator+() and
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:247:          CheckedDowncastToActualType<const Iterator>(&other)->index_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:257:    // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:275:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:282:  // sequence are indexed (0-based) to aid iterator comparison.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:287:// Generates values from a pair of STL-style iterators. Used in the
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:332:    // responsible for not calling Current() on an out-of-range iterator.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:345:          CheckedDowncastToActualType<const Iterator>(&other)->iterator_;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:351:          // emitted by gcc when supplied with the -Wextra option.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:359:    // pointer in the wrapping iterator's operator->().
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:366:  // No implementation - assignment is unsupported.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:372:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:383:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:403:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:424:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:426:// TestMetaFactoryBase is a base class for meta-factories that create
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:436:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:460:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:491:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:553:        const string& instantiation_name = gen_it->name;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:554:        ParamGenerator<ParamType> generator((*gen_it->generator)());
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:555:        ParamNameGeneratorFunc* name_func = gen_it->name_func;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:556:        const char* file = gen_it->file;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:557:        int line = gen_it->line;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:562:        test_case_name += test_info->test_case_base_name;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:585:          test_name_stream << test_info->test_base_name << "/" << param_name;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:595:              test_info->test_meta_factory->CreateTestFactory(*param_it));
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:662:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:687:      if ((*it)->GetTestCaseName() == test_case_name) {
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:688:        if ((*it)->GetTestCaseTypeId() != GetTypeId<TestCase>()) {
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:691:          // test case setup and tear-down in this case.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-param-util.h:714:      (*it)->RegisterTests();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port-arch.h:33:// It is separate from gtest-port.h so that custom/gtest-port.h can include it.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:32:// Low-level types and utilities for porting Google Test to various
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:46:// Environment-describing macros
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:47:// -----------------------------
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:51:// used in, such that Google Test can provide environment-specific
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:65://   - Each macro here is a user-tweakable knob; do not grow the list
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:67://   - Use #if to key off these macros.  Don't use #ifdef or "#if
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:71://   GTEST_HAS_CLONE          - Define it to 1/0 to indicate that clone(2)
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:73://   GTEST_HAS_EXCEPTIONS     - Define it to 1/0 to indicate that exceptions
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:75://   GTEST_HAS_GLOBAL_STRING  - Define it to 1/0 to indicate that ::string
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:78://   GTEST_HAS_GLOBAL_WSTRING - Define it to 1/0 to indicate that ::string
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:81://   GTEST_HAS_POSIX_RE       - Define it to 1/0 to indicate that POSIX regular
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:83://   GTEST_HAS_PTHREAD        - Define it to 1/0 to indicate that <pthread.h>
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:85://   GTEST_HAS_RTTI           - Define it to 1/0 to indicate that RTTI is/isn't
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:87://   GTEST_HAS_STD_WSTRING    - Define it to 1/0 to indicate that
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:90://   GTEST_HAS_TR1_TUPLE      - Define it to 1/0 to indicate tr1::tuple
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:92://   GTEST_HAS_SEH            - Define it to 1/0 to indicate whether the
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:96://                            - Define it to 1/0 to indicate whether the
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:99://   GTEST_USE_OWN_TR1_TUPLE  - Define it to 1/0 to indicate whether Google
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:103://   GTEST_LANG_CXX11         - Define it to 1/0 to indicate that Google Test
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:106://                            - Define to 1 when compiling tests that use
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:110://                            - Define to 1 when compiling Google Test itself
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:113:// Platform-indicating macros
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:114:// --------------------------
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:118:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:122://   GTEST_OS_AIX      - IBM AIX
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:123://   GTEST_OS_CYGWIN   - Cygwin
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:124://   GTEST_OS_FREEBSD  - FreeBSD
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:125://   GTEST_OS_HPUX     - HP-UX
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:126://   GTEST_OS_LINUX    - Linux
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:127://     GTEST_OS_LINUX_ANDROID - Google Android
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:128://   GTEST_OS_MAC      - Mac OS X
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:129://     GTEST_OS_IOS    - iOS
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:130://   GTEST_OS_NACL     - Google Native Client (NaCl)
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:131://   GTEST_OS_OPENBSD  - OpenBSD
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:132://   GTEST_OS_QNX      - QNX
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:133://   GTEST_OS_SOLARIS  - Sun Solaris
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:134://   GTEST_OS_SYMBIAN  - Symbian
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:135://   GTEST_OS_WINDOWS  - Windows (Desktop, MinGW, or Mobile)
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:136://     GTEST_OS_WINDOWS_DESKTOP  - Windows Desktop
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:137://     GTEST_OS_WINDOWS_MINGW    - MinGW
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:138://     GTEST_OS_WINDOWS_MOBILE   - Windows Mobile
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:139://     GTEST_OS_WINDOWS_PHONE    - Windows Phone
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:140://     GTEST_OS_WINDOWS_RT       - Windows Store App/WinRT
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:141://   GTEST_OS_ZOS      - z/OS
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:152:// Feature-indicating macros
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:153:// -------------------------
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:157:// otherwise UNDEFINED -- it's never defined to 0.).  Google Test
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:169://   GTEST_HAS_COMBINE      - the Combine() function (for value-parameterized
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:171://   GTEST_HAS_DEATH_TEST   - death tests
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:172://   GTEST_HAS_PARAM_TEST   - value-parameterized tests
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:173://   GTEST_HAS_TYPED_TEST   - typed tests
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:174://   GTEST_HAS_TYPED_TEST_P - type-parameterized tests
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:175://   GTEST_IS_THREADSAFE    - Google Test is thread-safe.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:176://   GTEST_USES_POSIX_RE    - enhanced POSIX regex is used. Do not confuse with
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:179://   GTEST_USES_SIMPLE_RE   - our own simple regex is used;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:181://   GTEST_CAN_COMPARE_NULL - accepts untyped NULL in EXPECT_EQ().
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:184:// ------------------
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:186://   GTEST_FLAG(flag_name)  - references the variable corresponding to
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:190:// ------------------
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:196://   GTEST_AMBIGUOUS_ELSE_BLOCKER_ - for disabling a gcc warning.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:197://   GTEST_ATTRIBUTE_UNUSED_  - declares that a class' instances or a
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:199://   GTEST_DISALLOW_ASSIGN_   - disables operator=.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:200://   GTEST_DISALLOW_COPY_AND_ASSIGN_ - disables copy ctor and operator=.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:201://   GTEST_MUST_USE_RESULT_   - declares that a function's result must be used.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:202://   GTEST_INTENTIONAL_CONST_COND_PUSH_ - start code section where MSVC C4127 is
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:204://   GTEST_INTENTIONAL_CONST_COND_POP_  - finish code section where MSVC C4127
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:209://   testing::internal::move  - portability wrapper for std::move.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:213://                            - synchronization primitives.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:216://   is_pointer     - as in TR1; needed on Symbian and IBM XL C/C++ only.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:217://   IteratorTraits - partial implementation of std::iterator_traits, which
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:221://   scoped_ptr     - as in TR2.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:224://   RE             - a simple regular expression class using the POSIX
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:225://                    Extended Regular Expression syntax on UNIX-like
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:230://   GTEST_LOG_()   - logs messages at the specified severity level.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:231://   LogToStderr()  - directs all log messages to stderr.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:232://   FlushInfoLog() - flushes informational log messages.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:235://   CaptureStdout()     - starts capturing stdout.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:236://   GetCapturedStdout() - stops capturing stdout and returns the captured
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:238://   CaptureStderr()     - starts capturing stderr.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:239://   GetCapturedStderr() - stops capturing stderr and returns the captured
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:243://   TypeWithSize   - maps an integer to a int type.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:245://                  - integers of known sizes.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:246://   BiggestInt     - the biggest signed integer type.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:248:// Command-line utilities:
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:249://   GTEST_DECLARE_*()  - declares a flag.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:250://   GTEST_DEFINE_*()   - defines a flag.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:251://   GetInjectableArgvs() - returns the command line as a vector of strings.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:254://   GetEnv()             - gets the value of an environment variable.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:255://   BoolFromGTestEnv()   - parses a bool environment variable.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:256://   Int32FromGTestEnv()  - parses an Int32 environment variable.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:257://   StringFromGTestEnv() - parses a string environment variable.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:281:#include "gtest/internal/gtest-port-arch.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:282:#include "gtest/internal/custom/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:287:# define GTEST_FLAG_PREFIX_DASH_ "gtest-"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:323:// -std={c,gnu}++{0x,11} is passed.  The C++11 standard specifies a
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:382:// http://gcc.gnu.org/gcc-4.2/changes.html and
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:404:// This assumes that non-Windows OSes provide unistd.h. For OSes where this
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:413:#  include <android/api-level.h>  // NOLINT
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:466:// but iff cleanups are enabled after that. In Obj-C++ files, there can be
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:477:// Sun Pro CC supports exceptions.  However, there is no compile-time way of
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:551:// -frtti -fno-exceptions, the build fails at link time with undefined
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:601:// To disable threading support in Google Test, add -DGTEST_HAS_PTHREAD=0
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:608:// gtest-port.h guarantees to #include <pthread.h> when GTEST_HAS_PTHREAD is
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:674:// gtest-port.h's responsibility to #include the header implementing
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:689:#  include "gtest/internal/gtest-tuple.h"  // IWYU pragma: export  // NOLINT
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:742:// spec-conforming TR1 implementation.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:799:// value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:802:// Determines whether to support type-driven tests.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:813:// value-parameterized tests are enabled.  The implementation doesn't
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:820:// Determines whether the system compiler uses UTF-16 for encoding wide strings.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1034:      msg[static_cast<bool>(expr) ? 1 : -1] GTEST_ATTRIBUTE_UNUSED_
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1041:// - GTEST_COMPILE_ASSERT_ works by defining an array type that has -1
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1044:// - The simpler definition
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1046://    #define GTEST_COMPILE_ASSERT_(expr, msg) typedef char msg[(expr) ? 1 : -1]
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1048://   does not work, as gcc supports variable-length arrays whose sizes
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1049://   are determined at run-time (this is gcc's extension and not part
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1055://                                      // not a compile-time constant.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1057:// - By using the type CompileAssert<(bool(expr))>, we ensures that
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1058://   expr is a compile-time constant.  (Template arguments must be
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1059://   determined at compile-time.)
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1061:// - The outter parentheses in CompileAssert<(bool(expr))> are necessary
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1073:// - The array size is (bool(expr) ? 1 : -1), instead of simply
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1075://     ((expr) ? 1 : -1).
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1078://   causes ((0.0) ? 1 : -1) to incorrectly evaluate to 1.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1112:// This implementation of scoped_ptr is PARTIAL - it only contains
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1123:  T* operator->() const { return ptr_; }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1159:  // references from r-values.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1232:// Formats a file location for compiler-independent XML output.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1239://   GTEST_LOG_(severity) - logs messages at the specified severity level. The
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1241://   LogToStderr()  - directs all log messages to stderr.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1242://   FlushInfoLog() - flushes informational log messages.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1281:// INTERNAL IMPLEMENTATION - DO NOT USE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1283:// GTEST_CHECK_ is an all-mode assert. It aborts the program if the condition
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1303:// An all-mode assert to verify that the given POSIX-style function
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1322:// INTERNAL IMPLEMENTATION - DO NOT USE IN USER CODE.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1352:// use dynamic_cast<> to double-check the downcast is legal (we die
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1368:  // Ensures that To is a sub-type of From *.  This test is here only
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1369:  // for compile-time type checking, and has no overhead in an
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1370:  // optimized build at run-time, as it will be optimized away
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1409://   CaptureStdout     - starts capturing stdout.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1410://   GetCapturedStdout - stops capturing stdout and returns the captured string.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1411://   CaptureStderr     - starts capturing stderr.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1412://   GetCapturedStderr - stops capturing stderr and returns the captured string.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1509:// Provides leak-safe Windows kernel handle ownership.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1561:// As a C-function, ThreadFuncWithCLinkage cannot be templated itself.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1564:// non-templated base class for ThreadWithParam allows us to bypass this
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1576:// cannot be defined with C-linkage we need to define a free C-function to
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1579:  static_cast<ThreadWithParamBase*>(thread)->Run();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1583:// Helper class for testing Google Test's multi-threading constructs.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1622:      thread_can_start_->WaitForNotification();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1627:  UserThreadFunc* const func_;  // User-supplied thread function.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1628:  const T param_;  // User-supplied parameter to the thread function.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1629:  // When non-NULL, used to block execution until the controller thread
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1659:// (A non-static Mutex is defined/declared in the usual way).
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1715:      : mutex_(mutex) { mutex_->Lock(); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1717:  ~GTestMutexLock() { mutex_->Unlock(); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1785:// Helper class for testing Google Test's multi-threading constructs.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1818:// Implements thread-local storage on Windows systems.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1838:// destroying it. Otherwise, the per-thread objects managed for them by the
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1842:// will die after main() has returned.  Therefore, no per-thread
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1877:        ThreadLocalRegistry::GetValueOnCurrentThread(this))->pointer();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1881:    return default_factory_->MakeNewHolder();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1923:// MutexBase and Mutex implement mutex on pthreads-based platforms.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1967:// Forward-declares a static mutex.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:1999:      : mutex_(mutex) { mutex_->Lock(); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2001:  ~GTestMutexLock() { mutex_->Unlock(); }
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2014:// C-linkage.  Therefore it cannot be templatized to access
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2022:// Called by pthread to delete thread-local data stored by
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2028:// Implements thread-local storage on pthreads-based systems.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2079:      return CheckedDowncastToActualType<ValueHolder>(holder)->pointer();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2082:    ValueHolder* const new_holder = default_factory_->MakeNewHolder();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2085:    return new_holder->pointer();
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2120:  // A key pthreads uses for looking up per-thread values.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2132:// and thread-local variable).  Necessary for compiling Google Test where
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2133:// mutex is not supported - using Google Test in multiple threads is not
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2180:// Passing non-POD classes through ellipsis (...) crashes the ARM
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2188:// passing non-POD classes through ellipsis (...).
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2197:// so a tr1::type_traits-like is_pointer works.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2286:  while (it != str.begin() && IsSpace(*--it))
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2417:// MSVC-based platforms.  We map the GTEST_SNPRINTF_ macro to the appropriate
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2440:    ~(static_cast<BiggestInt>(1) << (8*sizeof(BiggestInt) - 1));
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2442:// This template class serves as a compile-time function from size to
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2448:// is typedef-ed to be unsigned int (unsigned integer made up of 4
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2454:// Google Test uses this class in the implementation of floating-point
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2537:// Parses 'str' for a 32-bit signed integer.  If successful, writes the result
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-port.h:2541:// out of both gtest-port.cc and gtest.cc to avoid exporting this utility
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:38:// This header file is #included by <gtest/internal/gtest-internal.h>.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:52:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:57:// String - an abstract class holding static string utilities.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:62:  // Clones a 0-terminated C string, allocating memory using new.  The
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:74:  // to 'Unicode', UTF-16.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:76:  // Creates a UTF-16 wide string from the given ANSI string, allocating
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:100:  // NULL C string is considered different to any non-NULL C string,
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:104:  // Converts a wide C string to a String using the UTF-8 encoding.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:114:  // NULL C string is considered different to any non-NULL C string,
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:122:  // A NULL C string is considered different to any non-NULL C string,
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-string.h:131:  // A NULL C string is considered different to any non-NULL wide C string,
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h:2://     pump.py gtest-tuple.h.pump
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h:64:// GTEST_n_TUPLE_(T) is the type of an n-tuple.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h:966:    return SameSizeTuplePrefixComparator<k - 1, k - 1>::Eq(t1, t2) &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h:967:        ::std::tr1::get<k - 1>(t1) == ::std::tr1::get<k - 1>(t2);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:1:$$ -*- mode: c++; -*-
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:3:$$ This meta comment fixes auto-indentation in Emacs. }}
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:64:$range i 0..n-1
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:67:// GTEST_n_TUPLE_(T) is the type of an n-tuple.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:71:$range m 0..k-1
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:72:$range m2 k..n-1
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:80:$range m 0..j-1
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:147:$range m 0..k-1
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:216:$range m 0..k-1
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:305:    return SameSizeTuplePrefixComparator<k - 1, k - 1>::Eq(t1, t2) &&
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-tuple.h.pump:306:        ::std::tr1::get<k - 1>(t1) == ::std::tr1::get<k - 1>(t2);
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h:2://     pump.py gtest-type-util.h.pump
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h:36:// Type utilities needed for implementing typed and type-parameterized
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h:40:// type-parameterized tests in one type-parameterized test case.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h:47:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h:60:// GetTypeName<T>() returns a human-readable name of type T.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h:62:// the typed-test-only section below.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h:93:// type.  This can be used as a compile-time assertion to ensure that
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:1:$$ -*- mode: c++; -*-
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:34:// Type utilities needed for implementing typed and type-parameterized
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:38:// type-parameterized tests in one type-parameterized test case.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:45:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:58:// GetTypeName<T>() returns a human-readable name of type T.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:60:// the typed-test-only section below.
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:91:// type.  This can be used as a compile-time assertion to ensure that
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:134:  typedef Types$(i-1)<$for k, [[T$k]]> Tail;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:167:$range i 1..n-1
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:234:  typedef Templates$(i-1)<$for k, [[T$k]]> Tail;
/Volumes/src/simhub/src/libs/googletest/include/gtest/internal/gtest-type-util.h.pump:265:$range i 1..n-1
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:7:# more broadly.  In particular, it no longer assumes ld accepts -zdefs.
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:11:dnl @synopsis ACX_PTHREAD([ACTION-IF-FOUND[, ACTION-IF-NOT-FOUND]])
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:23:dnl multi-threaded programs (defaults to the value of CC otherwise).
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:38:dnl In addition, if the PTHREAD_CREATE_JOINABLE thread-attribute
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:42:dnl ACTION-IF-FOUND is a list of shell commands to run if a threads
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:43:dnl library is found, and ACTION-IF-NOT-FOUND is a list of commands to
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:44:dnl run it if it is not found. If ACTION-IF-FOUND is not specified, the
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:56:dnl @version 2006-05-29
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:94:# (e.g. DEC) have both -lpthread and -lpthreads, where one of the
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:95:# libraries is broken (non-POSIX).
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:97:# Create a list of thread flags to try.  Items starting with a "-" are
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:99:# which indicates that we try without any flags at all, and "pthread-config"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:102:acx_pthread_flags="pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:107:# pthreads: AIX (must check this before -lpthread)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:108:# none: in case threads are in libc; should be tried before -Kthread and
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:110:# -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:111:# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:112:# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:113:# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:114:# -pthreads: Solaris/gcc
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:115:# -mthreads: Mingw32/gcc, Lynx/gcc
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:116:# -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:118:#      also defines -D_REENTRANT)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:119:#      ... -mt is also the pthreads flag for HP/aCC
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:121:# --thread-safe: KAI C++
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:122:# pthread-config: use pthread-config program (for GNU Pth library)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:124:case "${host_cpu}-${host_os}" in
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:128:        # (non-functional) versions of the pthreads routines, so link-based
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:129:        # tests will erroneously succeed.  (We need to link with -pthreads/-mt/
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:130:        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:133:        # we'll just look for -pthreads and -lpthread first:
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:135:        acx_pthread_flags="-pthreads pthread -mt -pthread $acx_pthread_flags"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:147:                -*)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:152:		pthread-config)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:153:		AC_CHECK_PROG(acx_pthread_config, pthread-config, yes, no)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:155:		PTHREAD_CFLAGS="`pthread-config --cflags`"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:156:		PTHREAD_LIBS="`pthread-config --ldflags` `pthread-config --libs`"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:160:                AC_MSG_CHECKING([for the pthreads library -l$flag])
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:161:                PTHREAD_LIBS="-l$flag"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:172:        # need a special flag -Kthread to make this header compile.)
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:173:        # We check for pthread_join because it is in -lpthread on IRIX
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:175:        # due to DEC craziness with -lpthreads.  We check for
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:177:        # functions on Solaris that doesn't have a non-functional libc stub.
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:216:                                uses a non-standard name on your system.])
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:221:        case "${host_cpu}-${host_os}" in
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:222:            *-aix* | *-freebsd* | *-darwin*) flag="-D_THREAD_SAFE";;
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:223:            *solaris* | *-osf* | *-hpux*) flag="-D_REENTRANT";;
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:239:	# The next part tries to detect GCC inconsistency with -shared on some
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:241:	# configurations, when -shared is specified, GCC "forgets" to
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:253:	# -Wl,-z,defs forces link-time symbol resolution, so that the
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:254:	# linking checks with -shared actually have any value
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:256:	# FIXME: -fPIC is required for -shared on many architectures,
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:259:	CFLAGS="-shared -fPIC -Wl,-z,defs $CFLAGS $PTHREAD_CFLAGS"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:268:	# compiler.  If not (and OS X's ld, for instance, does not accept -z),
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:282:	   AC_MSG_CHECKING([whether -pthread is sufficient with -shared])
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:298:	# about -lpthread
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:301:	   AC_MSG_CHECKING([whether -lpthread fixes that])
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:302:	   LIBS="-lpthread $PTHREAD_LIBS $save_LIBS"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:311:	      PTHREAD_LIBS="-lpthread $PTHREAD_LIBS"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:317:	# FreeBSD 4.10 gcc forgets to use -lc_r instead of -lc
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:320:	   AC_MSG_CHECKING([whether -lc_r fixes that])
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:321:	   LIBS="-lc_r $PTHREAD_LIBS $save_LIBS"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:330:	      PTHREAD_LIBS="-lc_r $PTHREAD_LIBS"
/Volumes/src/simhub/src/libs/googletest/m4/acx_pthread.m4:354:# Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:14:  [AS_HELP_STRING([--enable-gtest],
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:20:           [The exact path of Google Test's 'gtest-config' script.])
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:22:           [C-like preprocessor flags for Google Test.])
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:33:  [AC_MSG_CHECKING([for 'gtest-config'])
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:35:     [AS_IF([test -x "${enable_gtest}/scripts/gtest-config"],
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:36:        [GTEST_CONFIG="${enable_gtest}/scripts/gtest-config"],
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:37:        [GTEST_CONFIG="${enable_gtest}/bin/gtest-config"])
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:38:      AS_IF([test -x "${GTEST_CONFIG}"], [],
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:43:Google Test, but no 'gtest-config' script could be found at this location.])
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:45:     [AC_PATH_PROG([GTEST_CONFIG], [gtest-config])])
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:46:   AS_IF([test -x "${GTEST_CONFIG}"],
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:49:        [_gtest_min_version="--min-version=$1"
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:51:        [_gtest_min_version="--min-version=0"
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:59:     [GTEST_CPPFLAGS=`${GTEST_CONFIG} --cppflags`
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:60:      GTEST_CXXFLAGS=`${GTEST_CONFIG} --cxxflags`
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:61:      GTEST_LDFLAGS=`${GTEST_CONFIG} --ldflags`
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:62:      GTEST_LIBS=`${GTEST_CONFIG} --libs`
/Volumes/src/simhub/src/libs/googletest/m4/gtest.m4:63:      GTEST_VERSION=`${GTEST_CONFIG} --version`
/Volumes/src/simhub/src/libs/googletest/make/Makefile:7:#   make [all]  - makes everything.
/Volumes/src/simhub/src/libs/googletest/make/Makefile:8:#   make TARGET - makes the given target.
/Volumes/src/simhub/src/libs/googletest/make/Makefile:9:#   make clean  - removes all files generated by make.
/Volumes/src/simhub/src/libs/googletest/make/Makefile:25:CPPFLAGS += -isystem $(GTEST_DIR)/include
/Volumes/src/simhub/src/libs/googletest/make/Makefile:28:CXXFLAGS += -g -Wall -Wextra -pthread
/Volumes/src/simhub/src/libs/googletest/make/Makefile:39:# House-keeping build targets.
/Volumes/src/simhub/src/libs/googletest/make/Makefile:44:	rm -f $(TESTS) gtest.a gtest_main.a *.o
/Volumes/src/simhub/src/libs/googletest/make/Makefile:56:gtest-all.o : $(GTEST_SRCS_)
/Volumes/src/simhub/src/libs/googletest/make/Makefile:57:	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
/Volumes/src/simhub/src/libs/googletest/make/Makefile:58:            $(GTEST_DIR)/src/gtest-all.cc
/Volumes/src/simhub/src/libs/googletest/make/Makefile:61:	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
/Volumes/src/simhub/src/libs/googletest/make/Makefile:64:gtest.a : gtest-all.o
/Volumes/src/simhub/src/libs/googletest/make/Makefile:67:gtest_main.a : gtest-all.o gtest_main.o
/Volumes/src/simhub/src/libs/googletest/make/Makefile:75:	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1.cc
/Volumes/src/simhub/src/libs/googletest/make/Makefile:79:	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/sample1_unittest.cc
/Volumes/src/simhub/src/libs/googletest/make/Makefile:82:	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@
Binary file /Volumes/src/simhub/src/libs/googletest/make/sample1_unittest matches
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:2:Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gtest-md", "gtest-md.vcproj", "{C8F6C172-56F2-4E76-B5FA-C3B423B31BE8}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:6:Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gtest_main-md", "gtest_main-md.vcproj", "{3AF54C8A-10BF-4332-9147-F68ED9862033}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:10:Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gtest_prod_test-md", "gtest_prod_test-md.vcproj", "{24848551-EF4F-47E8-9A9D-EA4D49BC3ECB}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:14:Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gtest_unittest-md", "gtest_unittest-md.vcproj", "{4D9FDFB5-986A-4139-823C-F4EE0ED481A2}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:24:		{C8F6C172-56F2-4E76-B5FA-C3B423B31BE8}.Debug.ActiveCfg = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:25:		{C8F6C172-56F2-4E76-B5FA-C3B423B31BE8}.Debug.Build.0 = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:26:		{C8F6C172-56F2-4E76-B5FA-C3B423B31BE8}.Release.ActiveCfg = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:27:		{C8F6C172-56F2-4E76-B5FA-C3B423B31BE8}.Release.Build.0 = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:28:		{3AF54C8A-10BF-4332-9147-F68ED9862033}.Debug.ActiveCfg = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:29:		{3AF54C8A-10BF-4332-9147-F68ED9862033}.Debug.Build.0 = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:30:		{3AF54C8A-10BF-4332-9147-F68ED9862033}.Release.ActiveCfg = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:31:		{3AF54C8A-10BF-4332-9147-F68ED9862033}.Release.Build.0 = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:32:		{24848551-EF4F-47E8-9A9D-EA4D49BC3ECB}.Debug.ActiveCfg = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:33:		{24848551-EF4F-47E8-9A9D-EA4D49BC3ECB}.Debug.Build.0 = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:34:		{24848551-EF4F-47E8-9A9D-EA4D49BC3ECB}.Release.ActiveCfg = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:35:		{24848551-EF4F-47E8-9A9D-EA4D49BC3ECB}.Release.Build.0 = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:36:		{4D9FDFB5-986A-4139-823C-F4EE0ED481A2}.Debug.ActiveCfg = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:37:		{4D9FDFB5-986A-4139-823C-F4EE0ED481A2}.Debug.Build.0 = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:38:		{4D9FDFB5-986A-4139-823C-F4EE0ED481A2}.Release.ActiveCfg = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.sln:39:		{4D9FDFB5-986A-4139-823C-F4EE0ED481A2}.Release.Build.0 = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.vcproj:1:<?xml version="1.0" encoding="Windows-1252"?>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.vcproj:5:	Name="gtest-md"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.vcproj:6:	ProjectGUID="{C8F6C172-56F2-4E76-B5FA-C3B423B31BE8}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.vcproj:101:			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.vcproj:103:				RelativePath="..\src\gtest-all.cc">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest-md.vcproj:121:			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:2:Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gtest", "gtest.vcproj", "{C8F6C172-56F2-4E76-B5FA-C3B423B31BE7}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:6:Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gtest_main", "gtest_main.vcproj", "{3AF54C8A-10BF-4332-9147-F68ED9862032}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:10:Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gtest_unittest", "gtest_unittest.vcproj", "{4D9FDFB5-986A-4139-823C-F4EE0ED481A1}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:14:Project("{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}") = "gtest_prod_test", "gtest_prod_test.vcproj", "{24848551-EF4F-47E8-9A9D-EA4D49BC3ECA}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:24:		{C8F6C172-56F2-4E76-B5FA-C3B423B31BE7}.Debug.ActiveCfg = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:25:		{C8F6C172-56F2-4E76-B5FA-C3B423B31BE7}.Debug.Build.0 = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:26:		{C8F6C172-56F2-4E76-B5FA-C3B423B31BE7}.Release.ActiveCfg = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:27:		{C8F6C172-56F2-4E76-B5FA-C3B423B31BE7}.Release.Build.0 = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:28:		{3AF54C8A-10BF-4332-9147-F68ED9862032}.Debug.ActiveCfg = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:29:		{3AF54C8A-10BF-4332-9147-F68ED9862032}.Debug.Build.0 = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:30:		{3AF54C8A-10BF-4332-9147-F68ED9862032}.Release.ActiveCfg = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:31:		{3AF54C8A-10BF-4332-9147-F68ED9862032}.Release.Build.0 = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:32:		{4D9FDFB5-986A-4139-823C-F4EE0ED481A1}.Debug.ActiveCfg = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:33:		{4D9FDFB5-986A-4139-823C-F4EE0ED481A1}.Debug.Build.0 = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:34:		{4D9FDFB5-986A-4139-823C-F4EE0ED481A1}.Release.ActiveCfg = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:35:		{4D9FDFB5-986A-4139-823C-F4EE0ED481A1}.Release.Build.0 = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:36:		{24848551-EF4F-47E8-9A9D-EA4D49BC3ECA}.Debug.ActiveCfg = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:37:		{24848551-EF4F-47E8-9A9D-EA4D49BC3ECA}.Debug.Build.0 = Debug|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:38:		{24848551-EF4F-47E8-9A9D-EA4D49BC3ECA}.Release.ActiveCfg = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.sln:39:		{24848551-EF4F-47E8-9A9D-EA4D49BC3ECA}.Release.Build.0 = Release|Win32
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.vcproj:1:<?xml version="1.0" encoding="Windows-1252"?>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.vcproj:6:	ProjectGUID="{C8F6C172-56F2-4E76-B5FA-C3B423B31BE7}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.vcproj:101:			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.vcproj:103:				RelativePath="..\src\gtest-all.cc">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest.vcproj:121:			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main-md.vcproj:1:<?xml version="1.0" encoding="Windows-1252"?>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main-md.vcproj:5:	Name="gtest_main-md"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main-md.vcproj:6:	ProjectGUID="{3AF54C8A-10BF-4332-9147-F68ED9862033}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main-md.vcproj:97:			ReferencedProjectIdentifier="{C8F6C172-56F2-4E76-B5FA-C3B423B31BE8}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main-md.vcproj:98:			Name="gtest-md"/>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main-md.vcproj:104:			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main-md.vcproj:124:			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main.vcproj:1:<?xml version="1.0" encoding="Windows-1252"?>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main.vcproj:6:	ProjectGUID="{3AF54C8A-10BF-4332-9147-F68ED9862032}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main.vcproj:97:			ReferencedProjectIdentifier="{C8F6C172-56F2-4E76-B5FA-C3B423B31BE7}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main.vcproj:104:			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_main.vcproj:124:			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test-md.vcproj:1:<?xml version="1.0" encoding="Windows-1252"?>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test-md.vcproj:5:	Name="gtest_prod_test-md"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test-md.vcproj:6:	ProjectGUID="{24848551-EF4F-47E8-9A9D-EA4D49BC3ECB}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test-md.vcproj:110:			ReferencedProjectIdentifier="{3AF54C8A-10BF-4332-9147-F68ED9862033}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test-md.vcproj:111:			Name="gtest_main-md"/>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test-md.vcproj:117:			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test-md.vcproj:156:			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test.vcproj:1:<?xml version="1.0" encoding="Windows-1252"?>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test.vcproj:6:	ProjectGUID="{24848551-EF4F-47E8-9A9D-EA4D49BC3ECA}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test.vcproj:110:			ReferencedProjectIdentifier="{3AF54C8A-10BF-4332-9147-F68ED9862032}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test.vcproj:117:			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_prod_test.vcproj:156:			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest-md.vcproj:1:<?xml version="1.0" encoding="Windows-1252"?>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest-md.vcproj:5:	Name="gtest_unittest-md"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest-md.vcproj:6:	ProjectGUID="{4D9FDFB5-986A-4139-823C-F4EE0ED481A2}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest-md.vcproj:110:			ReferencedProjectIdentifier="{3AF54C8A-10BF-4332-9147-F68ED9862033}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest-md.vcproj:111:			Name="gtest_main-md"/>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest-md.vcproj:117:			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest-md.vcproj:142:			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest.vcproj:1:<?xml version="1.0" encoding="Windows-1252"?>
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest.vcproj:6:	ProjectGUID="{4D9FDFB5-986A-4139-823C-F4EE0ED481A1}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest.vcproj:110:			ReferencedProjectIdentifier="{3AF54C8A-10BF-4332-9147-F68ED9862032}"
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest.vcproj:117:			UniqueIdentifier="{4FC737F1-C7A5-4376-A066-2A32D752A2FF}">
/Volumes/src/simhub/src/libs/googletest/msvc/gtest_unittest.vcproj:142:			UniqueIdentifier="{93995380-89BD-4b04-88EB-625FBE52EBFB}">
/Volumes/src/simhub/src/libs/googletest/samples/prime_tables.h:50:  // Returns the smallest prime number greater than p; or returns -1
/Volumes/src/simhub/src/libs/googletest/samples/prime_tables.h:55:// Implementation #1 calculates the primes on-the-fly.
/Volumes/src/simhub/src/libs/googletest/samples/prime_tables.h:74:    return -1;
/Volumes/src/simhub/src/libs/googletest/samples/prime_tables.h:78:// Implementation #2 pre-calculates the primes and stores the result
/Volumes/src/simhub/src/libs/googletest/samples/prime_tables.h:98:    return -1;
/Volumes/src/simhub/src/libs/googletest/samples/prime_tables.h:109:      // Marks all multiples of i (except i itself) as non-prime.
/Volumes/src/simhub/src/libs/googletest/samples/sample10_unittest.cc:62:    allocated_--;
/Volumes/src/simhub/src/libs/googletest/samples/sample10_unittest.cc:87:    int difference = Water::allocated() - initially_allocated_;
/Volumes/src/simhub/src/libs/googletest/samples/sample10_unittest.cc:103:// This should fail when the --check_for_leaks command line flag is
/Volumes/src/simhub/src/libs/googletest/samples/sample10_unittest.cc:116:  if (argc > 1 && strcmp(argv[1], "--check_for_leaks") == 0 )
/Volumes/src/simhub/src/libs/googletest/samples/sample10_unittest.cc:119:    printf("%s\n", "Run this program with --check_for_leaks to enable "
/Volumes/src/simhub/src/libs/googletest/samples/sample10_unittest.cc:122:  // If we are given the --check_for_leaks command line flag, installs the
/Volumes/src/simhub/src/libs/googletest/samples/sample10_unittest.cc:125:    TestEventListeners& listeners = UnitTest::GetInstance()->listeners();
/Volumes/src/simhub/src/libs/googletest/samples/sample10_unittest.cc:131:    // The order is important - it ensures that failures generated in the
/Volumes/src/simhub/src/libs/googletest/samples/sample1_unittest.cc:38:// Writing a unit test using Google C++ testing framework is easy as 1-2-3:
/Volumes/src/simhub/src/libs/googletest/samples/sample1_unittest.cc:82:  EXPECT_EQ(1, Factorial(-5));
/Volumes/src/simhub/src/libs/googletest/samples/sample1_unittest.cc:83:  EXPECT_EQ(1, Factorial(-1));
/Volumes/src/simhub/src/libs/googletest/samples/sample1_unittest.cc:84:  EXPECT_GT(Factorial(-10), 0);
/Volumes/src/simhub/src/libs/googletest/samples/sample1_unittest.cc:122:  EXPECT_FALSE(IsPrime(-1));
/Volumes/src/simhub/src/libs/googletest/samples/sample1_unittest.cc:123:  EXPECT_FALSE(IsPrime(-2));
/Volumes/src/simhub/src/libs/googletest/samples/sample2.cc:38:// Clones a 0-terminated C string, allocating memory using new.
/Volumes/src/simhub/src/libs/googletest/samples/sample2.cc:49:// Sets the 0-terminated C string this MyString object
/Volumes/src/simhub/src/libs/googletest/samples/sample2.h:47:  // Clones a 0-terminated C string, allocating memory using new.
/Volumes/src/simhub/src/libs/googletest/samples/sample2.h:57:  // Constructs a MyString by cloning a 0-terminated C string.
/Volumes/src/simhub/src/libs/googletest/samples/sample2.h:73:  // Gets the 0-terminated C string this MyString object represents.
/Volumes/src/simhub/src/libs/googletest/samples/sample2.h:80:  // Sets the 0-terminated C string this MyString object represents.
/Volumes/src/simhub/src/libs/googletest/samples/sample2_unittest.cc:83:  EXPECT_EQ(sizeof(kHelloString)/sizeof(kHelloString[0]) - 1,
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:40:// Queue is a simple queue implemented as a singled-linked list.
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:87:      QueueNode<E>* next = node->next();
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:92:        next = node->next();
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:123:      last_->next_ = new_node;
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:137:    head_ = head_->next_;
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:138:    size_--;
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:143:    E* element = new E(old_head->element());
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:155:    for (const QueueNode<E>* node = head_; node != NULL; node = node->next_) {
/Volumes/src/simhub/src/libs/googletest/samples/sample3-inl.h:156:      new_queue->Enqueue(function(node->element()));
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:41:// objects for each test.  It is also useful for defining sub-routines
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:61:// in a global function.  That's why you should put test sub-routines
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:66:#include "sample3-inl.h"
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:72:             // accessed from sub-classes.
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:99:    const Queue<int> * const new_q = q->Map(Double);
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:102:    ASSERT_EQ(q->Size(), new_q->Size());
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:105:    for ( const QueueNode<int> * n1 = q->Head(), * n2 = new_q->Head();
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:106:          n1 != NULL; n1 = n1->next(), n2 = n2->next() ) {
/Volumes/src/simhub/src/libs/googletest/samples/sample3_unittest.cc:107:      EXPECT_EQ(2 * n1->element(), n2->element());
/Volumes/src/simhub/src/libs/googletest/samples/sample5_unittest.cc:33:// cases by deriving sub-fixtures from it.
/Volumes/src/simhub/src/libs/googletest/samples/sample5_unittest.cc:49:#include "sample3-inl.h"
/Volumes/src/simhub/src/libs/googletest/samples/sample5_unittest.cc:80:    EXPECT_TRUE(end_time - start_time_ <= 5) << "The test took too long.";
/Volumes/src/simhub/src/libs/googletest/samples/sample5_unittest.cc:102:  EXPECT_EQ(1, Factorial(-5));
/Volumes/src/simhub/src/libs/googletest/samples/sample5_unittest.cc:103:  EXPECT_EQ(1, Factorial(-1));
/Volumes/src/simhub/src/libs/googletest/samples/sample5_unittest.cc:104:  EXPECT_GT(Factorial(-10), 0);
/Volumes/src/simhub/src/libs/googletest/samples/sample5_unittest.cc:120:  EXPECT_FALSE(IsPrime(-1));
/Volumes/src/simhub/src/libs/googletest/samples/sample5_unittest.cc:121:  EXPECT_FALSE(IsPrime(-2));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:71:  // got-yas where the implementation class has a method that shadows
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:106:  // writing 'this->' when referring to members of the fixture class.
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:108:  EXPECT_FALSE(this->table_->IsPrime(-5));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:109:  EXPECT_FALSE(this->table_->IsPrime(0));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:110:  EXPECT_FALSE(this->table_->IsPrime(1));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:111:  EXPECT_FALSE(this->table_->IsPrime(4));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:112:  EXPECT_FALSE(this->table_->IsPrime(6));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:113:  EXPECT_FALSE(this->table_->IsPrime(100));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:117:  EXPECT_TRUE(this->table_->IsPrime(2));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:118:  EXPECT_TRUE(this->table_->IsPrime(3));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:119:  EXPECT_TRUE(this->table_->IsPrime(5));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:120:  EXPECT_TRUE(this->table_->IsPrime(7));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:121:  EXPECT_TRUE(this->table_->IsPrime(11));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:122:  EXPECT_TRUE(this->table_->IsPrime(131));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:126:  EXPECT_EQ(2, this->table_->GetNextPrime(0));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:127:  EXPECT_EQ(3, this->table_->GetNextPrime(2));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:128:  EXPECT_EQ(5, this->table_->GetNextPrime(3));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:129:  EXPECT_EQ(7, this->table_->GetNextPrime(5));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:130:  EXPECT_EQ(11, this->table_->GetNextPrime(7));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:131:  EXPECT_EQ(131, this->table_->GetNextPrime(128));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:152:// parameters?  That's what "type-parameterized tests" can do for you.
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:172:  EXPECT_FALSE(this->table_->IsPrime(-5));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:173:  EXPECT_FALSE(this->table_->IsPrime(0));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:174:  EXPECT_FALSE(this->table_->IsPrime(1));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:175:  EXPECT_FALSE(this->table_->IsPrime(4));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:176:  EXPECT_FALSE(this->table_->IsPrime(6));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:177:  EXPECT_FALSE(this->table_->IsPrime(100));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:181:  EXPECT_TRUE(this->table_->IsPrime(2));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:182:  EXPECT_TRUE(this->table_->IsPrime(3));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:183:  EXPECT_TRUE(this->table_->IsPrime(5));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:184:  EXPECT_TRUE(this->table_->IsPrime(7));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:185:  EXPECT_TRUE(this->table_->IsPrime(11));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:186:  EXPECT_TRUE(this->table_->IsPrime(131));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:190:  EXPECT_EQ(2, this->table_->GetNextPrime(0));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:191:  EXPECT_EQ(3, this->table_->GetNextPrime(2));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:192:  EXPECT_EQ(5, this->table_->GetNextPrime(3));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:193:  EXPECT_EQ(7, this->table_->GetNextPrime(5));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:194:  EXPECT_EQ(11, this->table_->GetNextPrime(7));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:195:  EXPECT_EQ(131, this->table_->GetNextPrime(128));
/Volumes/src/simhub/src/libs/googletest/samples/sample6_unittest.cc:198:// Type-parameterized tests involve one extra step: you have to
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:34:// value-parameterized tests. Each test in the test case has
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:82:  EXPECT_FALSE(table_->IsPrime(-5));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:83:  EXPECT_FALSE(table_->IsPrime(0));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:84:  EXPECT_FALSE(table_->IsPrime(1));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:85:  EXPECT_FALSE(table_->IsPrime(4));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:86:  EXPECT_FALSE(table_->IsPrime(6));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:87:  EXPECT_FALSE(table_->IsPrime(100));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:91:  EXPECT_TRUE(table_->IsPrime(2));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:92:  EXPECT_TRUE(table_->IsPrime(3));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:93:  EXPECT_TRUE(table_->IsPrime(5));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:94:  EXPECT_TRUE(table_->IsPrime(7));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:95:  EXPECT_TRUE(table_->IsPrime(11));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:96:  EXPECT_TRUE(table_->IsPrime(131));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:100:  EXPECT_EQ(2, table_->GetNextPrime(0));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:101:  EXPECT_EQ(3, table_->GetNextPrime(2));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:102:  EXPECT_EQ(5, table_->GetNextPrime(3));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:103:  EXPECT_EQ(7, table_->GetNextPrime(5));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:104:  EXPECT_EQ(11, table_->GetNextPrime(7));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:105:  EXPECT_EQ(131, table_->GetNextPrime(128));
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:108:// In order to run value-parameterized tests, you need to instantiate them,
/Volumes/src/simhub/src/libs/googletest/samples/sample7_unittest.cc:122:// Google Test may not support value-parameterized tests with some
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:64:      return precalc_impl_->IsPrime(n);
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:66:      return on_the_fly_impl_->IsPrime(n);
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:70:    int next_prime = -1;
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:72:      next_prime = precalc_impl_->GetNextPrime(p);
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:74:    return next_prime != -1 ? next_prime : on_the_fly_impl_->GetNextPrime(p);
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:122:  EXPECT_FALSE(table_->IsPrime(-5));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:123:  EXPECT_FALSE(table_->IsPrime(0));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:124:  EXPECT_FALSE(table_->IsPrime(1));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:125:  EXPECT_FALSE(table_->IsPrime(4));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:126:  EXPECT_FALSE(table_->IsPrime(6));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:127:  EXPECT_FALSE(table_->IsPrime(100));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:131:  EXPECT_TRUE(table_->IsPrime(2));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:132:  EXPECT_TRUE(table_->IsPrime(3));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:133:  EXPECT_TRUE(table_->IsPrime(5));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:134:  EXPECT_TRUE(table_->IsPrime(7));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:135:  EXPECT_TRUE(table_->IsPrime(11));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:136:  EXPECT_TRUE(table_->IsPrime(131));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:140:  EXPECT_EQ(2, table_->GetNextPrime(0));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:141:  EXPECT_EQ(3, table_->GetNextPrime(2));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:142:  EXPECT_EQ(5, table_->GetNextPrime(3));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:143:  EXPECT_EQ(7, table_->GetNextPrime(5));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:144:  EXPECT_EQ(11, table_->GetNextPrime(7));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:145:  EXPECT_EQ(131, table_->GetNextPrime(128));
/Volumes/src/simhub/src/libs/googletest/samples/sample8_unittest.cc:148:// In order to run value-parameterized tests, you need to instantiate them,
/Volumes/src/simhub/src/libs/googletest/samples/sample9_unittest.cc:112:  if (argc > 1 && strcmp(argv[1], "--terse_output") == 0 )
/Volumes/src/simhub/src/libs/googletest/samples/sample9_unittest.cc:115:    printf("%s\n", "Run this program with --terse_output to change the way "
/Volumes/src/simhub/src/libs/googletest/samples/sample9_unittest.cc:120:  // If we are given the --terse_output command line flag, suppresses the
/Volumes/src/simhub/src/libs/googletest/samples/sample9_unittest.cc:148:      if (test_info.result()->Failed() &&
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:39:       two files: OUTPUT_DIR/gtest/gtest.h and OUTPUT_DIR/gtest/gtest-all.cc.
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:41:       search path and linking with OUTPUT_DIR/gtest/gtest-all.cc.  These
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:81:GTEST_SPI_H_SEED = 'include/gtest/gtest-spi.h'
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:82:GTEST_ALL_CC_SEED = 'src/gtest-all.cc'
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:86:GTEST_ALL_CC_OUTPUT = 'gtest/gtest-all.cc'
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:122:    # TODO(wan@google.com): The following user-interaction doesn't
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:125:    print('%s already exists in directory %s - overwrite it? (y/N) ' %
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:168:        # It's '#include "gtest/..."' - let's process it recursively.
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:179:  """Scans folder gtest_root to generate gtest/gtest-all.cc in output_file."""
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:197:          # It's '#include "gtest/gtest-spi.h"'.  This file is not
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:201:          # It's '#include "gtest/foo.h"' where foo is not gtest-spi.
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:213:          # It's '#include "src/foo"' - let's process it recursively.
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:222:  """Scans folder gtest_root to generate gtest/gtest-all.cc in output_dir."""
/Volumes/src/simhub/src/libs/googletest/scripts/fuse_gtest_files.py:230:  """Fuses gtest.h and gtest-all.cc."""
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:43:The command generates the implementation of up-to MAX_ARITY-ary
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:142:// where pred is an n-ary function or functor that returns bool,
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:172:    return '%s-ary' % n
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:177:  this and string's title() method is that Title('4-ary') is '4-ary'
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:178:  while '4-ary'.title() is '4-Ary'."""
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:201:  spec_count = len(format.split('%s')) - 1
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:206:  """Returns the implementation of n-ary predicate assertions."""
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:383:// stand-alone regression test.
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:388:#include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:390:// A user-defined data type.
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:412:  """Returns the tests for n-ary predicate assertions."""
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:465:// A %(arity)s predicate-formatter function.
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:491:// A %(arity)s predicate-formatter functor.
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:581:                      argument(s) of a user-defined type.
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:587:      whose arguments have built-in types."""
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:620:      arg_type = 'user-defined type (Bool)'
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:627:      arg_type = 'built-in type (int)'
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:659:// predicate-formatter is a %(pf_type)s on a %(arg_type)s.
/Volumes/src/simhub/src/libs/googletest/scripts/gen_gtest_pred_impl.py:707:  """Returns the tests for up-to n-ary predicate assertions."""
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:9:  echo "Usage: gtest-config [OPTIONS...]"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:17:The `gtest-config' script provides access to the necessary compile and linking
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:31:  gtest-config --min-version=1.0 || echo "Insufficient Google Test version."
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:33:  g++ $(gtest-config --cppflags --cxxflags) -o foo.o -c foo.cpp
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:34:  g++ $(gtest-config --ldflags --libs) -o foo foo.o
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:37:  g++ $(../../my_gtest_build/scripts/gtest-config ...) ...
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:41:  g++ $(gtest-config --libdir="/opt/lib64" ...) ...
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:44:  --usage                    brief usage information
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:45:  --help                     display this help message
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:48:  --prefix=<dir>             overrides the installation prefix
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:49:  --exec-prefix=<dir>        overrides the executable installation prefix
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:50:  --libdir=<dir>             overrides the library installation prefix
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:51:  --includedir=<dir>         overrides the header file installation prefix
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:54:  --prefix                   installation prefix
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:55:  --exec-prefix              executable installation prefix
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:56:  --libdir                   library installation directory
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:57:  --includedir               header file installation directory
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:58:  --version                  the version of the Google Test installation
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:61:  --min-version=VERSION      return 0 if the version is at least VERSION
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:62:  --exact-version=VERSION    return 0 if the version is exactly VERSION
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:63:  --max-version=VERSION      return 0 if the version is at most VERSION
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:66:  --cppflags                 compile flags specific to the C-like preprocessors
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:67:  --cxxflags                 compile flags appropriate for C++ programs
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:68:  --ldflags                  linker flags
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:69:  --libs                     libraries for linking
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:75:# POSIX-compliant variable expansion to portably do all the work in the shell
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:123:  test $(($major_version)) -lt $(($min_major_version)) && exit 1
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:124:  if test $(($major_version)) -eq $(($min_major_version)); then
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:125:    test $(($minor_version)) -lt $(($min_minor_version)) && exit 1
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:126:    if test $(($minor_version)) -eq $(($min_minor_version)); then
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:127:      test $(($point_version)) -lt $(($min_point_version)) && exit 1
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:131:  test $(($major_version)) -gt $(($max_major_version)) && exit 1
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:132:  if test $(($major_version)) -eq $(($max_major_version)); then
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:133:    test $(($minor_version)) -gt $(($max_minor_version)) && exit 1
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:134:    if test $(($minor_version)) -eq $(($max_minor_version)); then
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:135:      test $(($point_version)) -gt $(($max_point_version)) && exit 1
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:143:if test $# -eq 0; then
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:148:while test $# -gt 0; do
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:150:    --usage)          show_usage;         exit 0;;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:151:    --help)           show_help;          exit 0;;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:154:    --prefix=*)       GTEST_PREFIX=${1#--prefix=};;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:155:    --exec-prefix=*)  GTEST_EXEC_PREFIX=${1#--exec-prefix=};;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:156:    --libdir=*)       GTEST_LIBDIR=${1#--libdir=};;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:157:    --includedir=*)   GTEST_INCLUDEDIR=${1#--includedir=};;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:160:    --prefix|--exec-prefix|--libdir|--includedir|--version)
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:161:      if test -n "${do_query}"; then
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:165:      do_query=${1#--}
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:169:    --min-version=*)
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:171:      min_version=${1#--min-version=}
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:173:    --max-version=*)
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:175:      max_version=${1#--max-version=}
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:177:    --exact-version=*)
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:179:      exact_version=${1#--exact-version=}
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:183:    --cppflags)       echo_cppflags=yes;;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:184:    --cxxflags)       echo_cxxflags=yes;;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:185:    --ldflags)        echo_ldflags=yes;;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:186:    --libs)           echo_libs=yes;;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:196:prefix="${GTEST_PREFIX:-@prefix@}"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:197:exec_prefix="${GTEST_EXEC_PREFIX:-@exec_prefix@}"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:198:libdir="${GTEST_LIBDIR:-@libdir@}"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:199:includedir="${GTEST_INCLUDEDIR:-@includedir@}"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:203:# than to the install tree. This allows building against a just-built gtest
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:207:this_bindir=`cd ${this_relative_bindir}; pwd -P`
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:212:  src_dir=`cd ${this_bindir}; cd @top_srcdir@; pwd -P`
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:224:  gtest_cppflags="-I${build_dir}/include -I${src_dir}/include"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:230:  gtest_ldflags="-L${libdir}"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:231:  gtest_libs="-l${name} @PTHREAD_CFLAGS@ @PTHREAD_LIBS@"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:232:  gtest_cppflags="-I${includedir}"
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:237:if test -n "$do_query"; then
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:240:    exec-prefix)      echo $exec_prefix;  exit 0;;
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:260:    check_versions ${min_version:-0.0.0} ${max_version:-9999.9999.9999}
/Volumes/src/simhub/src/libs/googletest/scripts/gtest-config.in:265:# Do the output in the correct order so that these can be used in-line of
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:32:"""pump v0.2.0 - Pretty Useful for Meta Programming.
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:79:    (re.compile(r'\$[_A-Za-z]\w*'), '$id'),
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:90:  def __init__(self, line=-1, column=-1):
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:123:    return Cursor(self.line, self.column - offset)
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:131:# Special cursor to indicate the end-of-file.
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:133:  """Returns the special cursor to denote the end-of-file."""
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:134:  return Cursor(-1, -1)
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:170:  best_match_start = -1
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:177:        best_match_length = m.end() - m.start()
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:212:    end = Cursor(len(lines) - 1, len(lines[-1]))
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:253:ID_REGEX = re.compile(r'[_A-Za-z]\w*')
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:305:    return Token(token.start, token.end, token.value[:-1], token.token_type)
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:471:  python_exp = re.sub(r'([_A-Za-z]\w*)', r'self.GetValue("\1")', token.value)
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:714:  return prev_lines and prev_lines[-1].endswith('\\')
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:724:    indent = len(before_comment) - len(before_comment.lstrip())
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:726:  max_len = 80 - len(prefix)
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:742:  indent = len(line) - len(line.lstrip())
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:744:  max_len = 80 - indent - len(line_concat)  # Maximum length of the current line
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:746:  new_max_len = max_len - 4  # Maximum length of a continuation line
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:836:  file_path = argv[-1]
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:839:    output_file_path = file_path[:-5]
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:841:    output_file_path = '-'
/Volumes/src/simhub/src/libs/googletest/scripts/pump.py:842:  if output_file_path == '-':
/Volumes/src/simhub/src/libs/googletest/scripts/release_docs.py:43:         - branching the current wiki pages (which document the
/Volumes/src/simhub/src/libs/googletest/scripts/release_docs.py:47:         - updating the links in the branched files to point to the branched
/Volumes/src/simhub/src/libs/googletest/scripts/release_docs.py:61:       $ svn commit -m "release wiki pages for v2.6"
/Volumes/src/simhub/src/libs/googletest/scripts/release_docs.py:85:  return (wiki_filename[:-len('.wiki')] if wiki_filename.endswith('.wiki')
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:5:#   make [all]  - makes everything.
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:6:#   make TARGET - makes the given target.
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:7:#   make check  - makes everything and runs the built sample test.
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:8:#   make clean  - removes all files generated by make.
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:15:FUSED_GTEST_ALL_CC = $(FUSED_GTEST_DIR)/gtest/gtest-all.cc
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:26:CPPFLAGS += -I$(FUSED_GTEST_DIR) -DGTEST_HAS_PTHREAD=0
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:29:CXXFLAGS += -g
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:37:	rm -rf $(FUSED_GTEST_DIR) sample1_unittest *.o
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:45:gtest-all.o : $(FUSED_GTEST_H) $(FUSED_GTEST_ALL_CC)
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:46:	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(FUSED_GTEST_DIR)/gtest/gtest-all.cc
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:49:	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(GTEST_MAIN_CC)
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:52:	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SAMPLE_DIR)/sample1.cc
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:56:	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(SAMPLE_DIR)/sample1_unittest.cc
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:58:sample1_unittest : sample1.o sample1_unittest.o gtest-all.o gtest_main.o
/Volumes/src/simhub/src/libs/googletest/scripts/test/Makefile:59:	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $^ -o $@
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:9:#     http://www.apache.org/licenses/LICENSE-2.0
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:19:Usage summary: upload.py [options] [-- diff_options]
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:29:against by using the '--rev' option.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:139:        If False, use an in-memory cookiejar instead.  Subclasses must
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:196:            "source": "rietveld-codereview-upload",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:292:           content_type="application/octet-stream",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:300:      content_type: The Content-Type header to use.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:324:        req.add_header("Content-Type", content_type)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:336:##             # Server Error - try again.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:345:  """Provides a simplified RPC-style interface for HTTP requests."""
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:377:          # Failed to load cookies - just ignore them.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:392:parser = optparse.OptionParser(usage="%prog [options] [-- diff_options]")
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:393:parser.add_option("-y", "--assume_yes", action="store_true",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:398:group.add_option("-q", "--quiet", action="store_const", const=0,
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:400:group.add_option("-v", "--verbose", action="store_const", const=2,
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:403:group.add_option("--noisy", action="store_const", const=3,
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:407:group.add_option("-s", "--server", action="store", dest="server",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:412:group.add_option("-e", "--email", action="store", dest="email",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:415:group.add_option("-H", "--host", action="store", dest="host",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:418:group.add_option("--no_cookies", action="store_false",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:423:group.add_option("-d", "--description", action="store", dest="description",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:426:group.add_option("-f", "--description_file", action="store",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:431:group.add_option("-r", "--reviewers", action="store", dest="reviewers",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:434:group.add_option("--cc", action="store", dest="cc",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:439:group.add_option("-m", "--message", action="store", dest="message",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:443:group.add_option("-i", "--issue", type="int", action="store",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:446:group.add_option("--download_base", action="store_true",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:449:                 "(side-by-side diffs may not work on files with CRs).")
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:450:group.add_option("--rev", action="store", dest="revision",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:453:group.add_option("--send_mail", action="store_true",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:481:      logging.info("Using debug user %s.  Override with --email" % email)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:499:  """Encode form fields for multipart/form-data.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:511:  BOUNDARY = '-M-A-G-I-C---B-O-U-N-D-A-R-Y-'
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:515:    lines.append('--' + BOUNDARY)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:516:    lines.append('Content-Disposition: form-data; name="%s"' % key)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:520:    lines.append('--' + BOUNDARY)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:521:    lines.append('Content-Disposition: form-data; name="%s"; filename="%s"' %
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:523:    lines.append('Content-Type: %s' % GetContentType(filename))
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:526:  lines.append('--' + BOUNDARY + '--')
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:529:  content_type = 'multipart/form-data; boundary=%s' % BOUNDARY
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:534:  """Helper to guess the content-type from the filename."""
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:535:  return mimetypes.guess_type(filename)[0] or 'application/octet-stream'
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:606:        "abstract method -- subclass %s must override" % self.__class__)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:611:        "abstract method -- subclass %s must override" % self.__class__)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:639:        "abstract method -- subclass %s must override" % self.__class__)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:696:        StatusUpdate("  --> %s" % response_body)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:704:      if file_id_str.find("nobase") != -1:
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:734:    # Cache output from "svn list -r REVNO dirname".
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:735:    # Keys: dirname, Values: 2-tuple (ouput for start rev and end rev).
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:793:      cmd += ["-r", self.options.revision]
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:810:    # who had the same problem (http://reviews.review-board.org/r/276/).
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:837:    status = RunShell(["svn", "status", "--ignore-externals"], silent_ok=True)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:857:      status = RunShell(["svn", "status", "--ignore-externals", filename])
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:862:      # "\n--- Changelist 'cl_name':\n".  See
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:863:      # http://svn.collab.net/repos/svn/trunk/notes/changelist-design.txt
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:866:          status_lines[1].startswith("--- Changelist")):
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:876:        cmd = ["svn", "list", "-r", self.rev_start, dirname or "."]
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:883:          args += ["-r", self.rev_end]
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:904:    # "addition-with-history".  See "svn st" for more information.  We need to
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:910:      mimetype = RunShell(["svn", "propget", "svn:mime-type", filename],
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:925:        args += ["-r", "BASE"]
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:926:      cmd = ["svn"] + args + ["propget", "svn:mime-type", url]
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:958:          # "svn cat -r REV delete_file.txt" doesn't work. cat requires
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:959:          # the full URL with "@REV" appended instead of using "-r" option.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:974:            args += ["-r", "BASE"]
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:990:    # Map of filename -> hash of base file.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:995:    # the diff output to include an svn-style "Index:" line as well as record
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:999:    gitdiff = RunShell(["git", "diff", "--full-index"] + extra_args)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1004:      match = re.match(r"diff --git a/(.*) b/.*$", line)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1022:    status = RunShell(["git", "ls-files", "--exclude-standard", "--others"],
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1031:    if hash == "0" * 40:  # All-zero hash indicates no base file.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1056:      self.base_rev = RunShell(["hg", "parent", "-q"]).split(':')[1].strip()
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1067:    cmd = ["hg", "diff", "--git", "-r", self.base_rev] + extra_args
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1072:      m = re.match("diff --git a/(\S+) b/(\S+)", line)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1093:    status = RunShell(["hg", "status", "--rev", self.base_rev, "-u", "."],
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1110:    # "hg status -C" returns two lines for moved/copied files, one otherwise
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1111:    out = RunShell(["hg", "status", "-C", "--rev", self.base_rev, relpath])
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1125:      base_content = RunShell(["hg", "cat", "-r", self.base_rev, oldrelpath],
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1133:      base_content = RunShell(["hg", "cat", "-r", self.base_rev, oldrelpath],
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1148:    A list of 2-tuple (filename, text) where text is the svn diff output
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1203:      StatusUpdate("  --> %s" % response_body)
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1227:    if errno != 2:  # ENOENT -- they don't have hg installed.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1238:    out, returncode = RunShellWithReturnCode(["git", "rev-parse",
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1239:                                              "--is-inside-work-tree"])
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1243:    if errno != 2:  # ENOENT -- they don't have git installed.
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1259:    A 2-tuple (issue id, patchset id).
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1289:    print "Upload server:", options.server, "(change with -s/--server)"
/Volumes/src/simhub/src/libs/googletest/scripts/upload.py:1296:    ErrorExit("A non-empty message is required")
/Volumes/src/simhub/src/libs/googletest/scripts/upload_gtest.py:32:"""upload_gtest.py v0.1.0 -- uploads a Google Test patch for review.
/Volumes/src/simhub/src/libs/googletest/scripts/upload_gtest.py:35:--cc=googletestframework@googlegroups.com to upload.py.
/Volumes/src/simhub/src/libs/googletest/scripts/upload_gtest.py:45:CC_FLAG = '--cc='
/Volumes/src/simhub/src/libs/googletest/src/gtest-all.cc:43:#include "src/gtest-death-test.cc"
/Volumes/src/simhub/src/libs/googletest/src/gtest-all.cc:44:#include "src/gtest-filepath.cc"
/Volumes/src/simhub/src/libs/googletest/src/gtest-all.cc:45:#include "src/gtest-port.cc"
/Volumes/src/simhub/src/libs/googletest/src/gtest-all.cc:46:#include "src/gtest-printers.cc"
/Volumes/src/simhub/src/libs/googletest/src/gtest-all.cc:47:#include "src/gtest-test-part.cc"
/Volumes/src/simhub/src/libs/googletest/src/gtest-all.cc:48:#include "src/gtest-typed-test.cc"
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:34:#include "gtest/gtest-death-test.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:35:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:67:#include "gtest/gtest-message.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:68:#include "gtest/internal/gtest-string.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:71:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:73:// prevent the accidental inclusion of gtest-internal-inl.h in the
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:76:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:90:    "\"threadsafe\" (child process re-executes the test binary "
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:114:    "process is a sub-process launched for running a thread-safe "
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:136:  // On Windows, death tests are thread-safe regardless of the value of the
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:155:// ExitedWithCode function-call operator.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:173:// KilledBySignal function-call operator.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:258:// exec-style death test child process, in which case the error
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:263:  // On a POSIX system, this function may be called from a threadsafe-style
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:265:  // the heap for any additional non-minuscule memory requirements.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:267:      GetUnitTestImpl()->internal_run_death_test_flag();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:269:    FILE* parent = posix::FDOpen(flag->write_fd(), "w");
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:295:// -1 on failure, and set errno to EINTR when it is interrupted and
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:297:// evaluates the expression as long as it evaluates to -1 and sets
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:298:// errno to EINTR.  If the expression evaluates to -1 but errno is
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:305:    } while (gtest_retval == -1 && errno == EINTR); \
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:306:    if (gtest_retval == -1) { \
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:310:          + #expression + " != -1"); \
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:333:  } while (num_read == -1 && errno == EINTR);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:347:  TestInfo* const info = GetUnitTestImpl()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:358:  return GetUnitTestImpl()->death_test_factory()->Create(
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:379:        status_(-1),
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:381:        read_fd_(-1),
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:382:        write_fd_(-1) {}
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:385:  ~DeathTestImpl() { GTEST_DEATH_TEST_CHECK_(read_fd_ == -1); }
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:423:  // always -1 in the child process.  The child keeps its write end of the
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:427:  // It is always -1 in the parent process.  The parent keeps its end of the
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:446:  } while (bytes_read == -1 && errno == EINTR);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:474:  set_read_fd(-1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:495:  // may assert. As there are no in-process buffers to flush here, we are
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:513:    ret += output.substr(at, line_end + 1 - at);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:571:                 << "  Expected: " << regex()->pattern() << "\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:594:// --gtest_death_test_style=fast setting to be equivalent to
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:595:// --gtest_death_test_style=threadsafe there.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:598:// implementation uses pipes for child-to-parent communication. But due to
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:692:// death test.  The child process is given the --gtest_filter and
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:693:// --gtest_internal_run_death_test flags such that it knows to run the
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:698:      impl->internal_run_death_test_flag();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:699:  const TestInfo* const info = impl->current_test_info();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:700:  const int death_test_index = info->result()->death_test_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:705:    set_write_fd(flag->write_fd());
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:723:      TRUE,    // The event will automatically reset to non-signaled state.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:724:      FALSE,   // The initial state is non-signalled.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:728:      std::string("--") + GTEST_FLAG_PREFIX_ + kFilterFlag + "=" +
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:729:      info->test_case_name() + "." + info->name();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:731:      std::string("--") + GTEST_FLAG_PREFIX_ + kInternalRunDeathTestFlag +
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:735:      // size_t has the same width as pointers on both 32-bit and 64-bit
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:737:      // See http://msdn.microsoft.com/en-us/library/tcxf1dw6.aspx.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:774:      UnitTest::GetInstance()->original_working_dir(),
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:805:      child_pid_(-1) {}
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:831:// The AssumeRole process for a fork-and-run death test.  It implements a
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:840:  GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd) != -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:854:  GTEST_DEATH_TEST_CHECK_(child_pid != -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:865:    GetUnitTestImpl()->listeners()->SuppressEventForwarding();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:876:// A concrete death test class that forks and re-executes the main
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:877:// program from the beginning, with command-line flags set that cause
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:902:// Utility class for accumulating command-line arguments.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:916:    args_.insert(args_.end() - 1, posix::StrDup(argument));
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:924:      args_.insert(args_.end() - 1, posix::StrDup(i->c_str()));
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:936:// threadsafe-style death test process.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:938:  char* const* argv;  // Command-line arguments for the child's call to exec
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:957:// The main function for a threadsafe-style death test child process.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:958:// This function is called in a clone()-ed process and thus must avoid
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:962:  GTEST_DEATH_TEST_CHECK_SYSCALL_(close(args->close_fd));
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:968:      UnitTest::GetInstance()->original_working_dir();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:981:  execve(args->argv[0], args->argv, GetEnviron());
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:982:  DeathTestAbort(std::string("execve(") + args->argv[0] + ", ...) in " +
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1014:// a thread-safe manner and instructs it to run the death test.  The
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1016:// available, it is used instead, being slightly more thread-safe.  On QNX,
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1017:// fork supports only single-threaded environments, so this function uses
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1022:  pid_t child_pid = -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1028:  GTEST_DEATH_TEST_CHECK_(cwd_fd != -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1034:      UnitTest::GetInstance()->original_working_dir();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1051:  GTEST_DEATH_TEST_CHECK_(fchdir(cwd_fd) != -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1057:  // the process may hang. To avoid this, we ignore SIGPROF here and re-enable
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1076:                             MAP_ANON | MAP_PRIVATE, -1, 0);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1079:    // Maximum stack alignment in bytes:  For a downward-growing stack, this
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1088:            (stack_grows_down ? stack_size - kMaxStackAlignment : 0);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1094:    GTEST_DEATH_TEST_CHECK_(munmap(stack, stack_size) != -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1110:  GTEST_DEATH_TEST_CHECK_(child_pid != -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1114:// The AssumeRole process for a fork-and-exec death test.  It re-executes the
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1115:// main program from the beginning, setting the --gtest_filter
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1116:// and --gtest_internal_run_death_test flags to cause only the current
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1117:// death test to be re-run.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1121:      impl->internal_run_death_test_flag();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1122:  const TestInfo* const info = impl->current_test_info();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1123:  const int death_test_index = info->result()->death_test_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1126:    set_write_fd(flag->write_fd());
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1131:  GTEST_DEATH_TEST_CHECK_(pipe(pipe_fd) != -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1132:  // Clear the close-on-exec flag on the write end of the pipe, lest
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1134:  GTEST_DEATH_TEST_CHECK_(fcntl(pipe_fd[1], F_SETFD, 0) != -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1137:      std::string("--") + GTEST_FLAG_PREFIX_ + kFilterFlag + "="
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1138:      + info->test_case_name() + "." + info->name();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1140:      std::string("--") + GTEST_FLAG_PREFIX_ + kInternalRunDeathTestFlag + "="
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1166:// Creates a concrete DeathTest-derived class that depends on the
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1167:// --gtest_death_test_style flag, and sets the pointer pointed to
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1176:      impl->internal_run_death_test_flag();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1177:  const int death_test_index = impl->current_test_info()
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1178:      ->increment_death_test_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1181:    if (death_test_index > flag->index()) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1185:          + StreamableToString(flag->index()) + ")");
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1189:    if (!(flag->file() == file && flag->line() == line &&
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1190:          flag->index() == death_test_index)) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1213:  else {  // NOLINT - this is more readable than unbalanced brackets inside #if.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1231:                                                   FALSE,  // Non-inheritable.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1239:  // compile-time assertion when available.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1253:                         FALSE,  // Request non-inheritable handler.
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1277:  if (write_fd == -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1299:  int line = -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1300:  int index = -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1303:  int write_fd = -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1317:    DeathTestAbort("Bad --gtest_internal_run_death_test flag: " +
/Volumes/src/simhub/src/libs/googletest/src/gtest-death-test.cc:1329:    DeathTestAbort("Bad --gtest_internal_run_death_test flag: "
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:32:#include "gtest/gtest-message.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:33:#include "gtest/internal/gtest-filepath.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:34:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:61:#include "gtest/internal/gtest-string.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:120:// Returns a copy of the FilePath with the case-insensitive extension removed.
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:122:// FilePath("dir/file"). If a case-insensitive extension is not
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:128:        0, pathname_.length() - dot_extension.length()));
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:170:    dir = std::string(c_str(), last_sep + 1 - c_str());
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:207:// Returns true if pathname describes something findable in the file-system,
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:221:// Returns true if pathname describes a directory in the file-system
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:285:// function at the same time -- they could both pick the same filename.
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:302:         IsPathSeparator(pathname_.c_str()[pathname_.length() - 1]);
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:309:  if (!this->IsDirectory()) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:313:  if (pathname_.length() == 0 || this->DirectoryExists()) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:317:  const FilePath parent(this->RemoveTrailingPathSeparator().RemoveFileName());
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:318:  return parent.CreateDirectoriesRecursively() && this->CreateFolder();
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:327:  FilePath removed_sep(this->RemoveTrailingPathSeparator());
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:329:  int result = CreateDirectory(unicode, NULL) ? 0 : -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:337:  if (result == -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:338:    return this->DirectoryExists();  // An error is OK if the directory exists.
/Volumes/src/simhub/src/libs/googletest/src/gtest-filepath.cc:348:      ? FilePath(pathname_.substr(0, pathname_.length() - 1))
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:44:# error "gtest-internal-inl.h is part of Google Test's internal implementation."
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:59:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:71:#include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:108:// g_help_flag is true iff the --help flag or an equivalent form is
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:123:// non-reentrant localtime() function, this function is not thread safe.  Do
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:127:// Parses a string for an Int32 flag, in the form of "--flag=value".
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:135:// given --gtest_random_seed flag value.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:144:      static_cast<int>((raw_seed - 1U) %
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:154:      << "Invalid random seed " << seed << " - must be in [1, "
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:227:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:235:// Converts a wide string to a narrow string in UTF-8 encoding.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:237://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin, Symbian OS)
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:238://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:239:// Parameter str points to a null-terminated wide string.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:241:// of wchar_t characters processed. -1 is used when the entire string
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:246:// and contains invalid UTF-16 surrogate pairs, values in those pairs
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:273:// some arbitrary but unique non-negative integer assigned to each test
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:285:  // Solaris has a non-standard signature.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:300:// Returns the i-th element of the vector, or default_value if i is not
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:307:// Performs an in-place shuffle of a range of the vector's elements.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:308:// 'begin' and 'end' are element indices as an STL-style range;
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:314:  const int size = static_cast<int>(v->size());
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:322:  // Fisher-Yates shuffle, from
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:323:  // http://en.wikipedia.org/wiki/Fisher-Yates_shuffle
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:324:  for (int range_width = end - begin; range_width >= 2; range_width--) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:325:    const int last_in_range = begin + range_width - 1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:326:    const int selected = begin + random->Generate(range_width);
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:331:// Performs an in-place shuffle of the vector's elements.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:334:  ShuffleRange(random, 0, static_cast<int>(v->size()), v);
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:370:// test filter using either GTEST_FILTER or --gtest_filter.  If both
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:394:  // Returns true iff the user-specified filter matches the test case
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:408:  // Returns true if "name" matches the ':' separated list of glob-style
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:425:  //   max_depth  - the maximum number of stack frames to be included
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:427:  //   skip_count - the number of top frames to be skipped; doesn't count
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:507:  // By default, each per-thread test result repoter just passes a new
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:572:    return failed_test_case_count() > 0 || ad_hoc_test_result()->Failed();
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:575:  // Gets the i-th test case among all the test cases. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:576:  // total_test_case_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:578:    const int index = GetElementOr(test_case_indices_, i, -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:582:  // Gets the i-th test case among all the test cases. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:583:  // total_test_case_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:585:    const int index = GetElementOr(test_case_indices_, i, -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:630:  //                   this is not a typed or a type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:648:    // In order to support thread-safe death tests, we need to
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:661:    GetTestCase(test_info->test_case_name(),
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:662:                test_info->type_param(),
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:664:                tear_down_tc)->AddTestInfo(test_info);
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:669:  // value-parameterized tests and instantiate and register them.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:691:  // value-parameterized tests are disabled, RegisterParameterizedTests is
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:706:  // Clears the results of ad-hoc test assertions.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:722:  // Matches the full name of each test against the user-specified
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:730:  // Prints the names of the tests matching the user-specified filter flag.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:737:  // Returns the vector of environments that need to be set-up/torn-down
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:741:  // Getters for the per-thread Google Test trace stack.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:753:  // Returns a pointer to the parsed --gtest_internal_run_death_test
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:830:  // Points to (but doesn't own) the per-thread test part result reporter.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:834:  // The vector of environments that need to be set-up/torn-down
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:843:  // easy shuffling and restoring the test case order.  The i-th
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:844:  // element of this vector is the index of the i-th test case in the
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:849:  // ParameterizedTestRegistry object used to register value-parameterized
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:857:  // Index of the last death test case registered.  Initially -1.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:915:  // A per-thread stack of traces created by the SCOPED_TRACE() macro.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:928:  return UnitTest::GetInstance()->impl();
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:977:  // BiggestConvertible is the largest integer type that system-provided
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:978:  // string-to-number conversion routines can return.
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1019:    test_result->RecordProperty(xml_element, property);
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1023:    test_result->ClearTestPartResults();
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1058:        : sockfd_(-1), host_name_(host), port_num_(port) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1063:      if (sockfd_ != -1)
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1069:      GTEST_CHECK_(sockfd_ != -1)
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1086:      GTEST_CHECK_(sockfd_ != -1)
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1090:      sockfd_ = -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1119:    socket_writer_->CloseConnection();
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1149:           FormatBool((test_info.result())->Passed()) +
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1151:           StreamableToString((test_info.result())->elapsed_time()) + "ms");
/Volumes/src/simhub/src/libs/googletest/src/gtest-internal-inl.h:1165:  void SendLn(const string& message) { socket_writer_->SendLn(message); }
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:32:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:66:#include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:67:#include "gtest/gtest-message.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:68:#include "gtest/internal/gtest-internal.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:69:#include "gtest/internal/gtest-string.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:72:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:74:// prevent the accidental inclusion of gtest-internal-inl.h in the
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:77:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:99:  while (field-- > 0) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:247:  // Static mutexes are leaked intentionally. It is not thread-safe to try
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:251:  // http://msdn.microsoft.com/en-us/library/windows/desktop/aa904937.aspx
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:361:    if (param->thread_can_start_ != NULL)
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:362:      param->thread_can_start_->WaitForNotification();
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:363:    param->runnable_->Run();
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:405:        thread_to_thread_locals->find(current_thread);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:406:    if (thread_local_pos == thread_to_thread_locals->end()) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:407:      thread_local_pos = thread_to_thread_locals->insert(
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:411:    ThreadLocalValues& thread_local_values = thread_local_pos->second;
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:420:                      thread_local_instance->NewValueForCurrentThread())))
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:423:    return value_pos->second.get();
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:436:          thread_to_thread_locals->begin();
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:437:          it != thread_to_thread_locals->end();
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:439:        ThreadLocalValues& thread_local_values = it->second;
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:443:          value_holders.push_back(value_pos->second);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:464:          thread_to_thread_locals->find(thread_id);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:465:      if (thread_local_pos != thread_to_thread_locals->end()) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:466:        ThreadLocalValues& thread_local_values = thread_local_pos->second;
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:471:          value_holders.push_back(value_pos->second);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:473:        thread_to_thread_locals->erase(thread_local_pos);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:524:        ::WaitForSingleObject(tah->second, INFINITE) == WAIT_OBJECT_0);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:525:    OnThreadExit(tah->first);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:526:    ::CloseHandle(tah->second);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:636:  return IsInSet(ch, "^-!\"#$%&'()*+,./:;<=>?@[\\]_`{|}~");
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:679:// Generates non-fatal failures and returns false if regex is invalid;
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:698:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:704:        ADD_FAILURE() << FormatRegexSyntaxError(regex, i - 1)
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:749:      static_cast<size_t>(-1) - 1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:868:  if (len == 0 || regex[len - 1] != '$')
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:893:// Formats a file location for compiler-independent XML output.
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:949:    GTEST_CHECK_(captured_fd != -1) << "Unable to open temporary file "
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:960:    // the location of the world-writable SD Card directory. However,
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:970:    // other OEM-customized locations. Never rely on these, and always
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:989:    if (uncaptured_fd_ != -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:994:      uncaptured_fd_ = -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1028:  const std::string content = (*captured_stream)->GetCapturedString();
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1065:  else if (temp_dir[strlen(temp_dir) - 1] == '\\')
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1091:  // pre-determined file size is reached.
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1093:    bytes_last_read = fread(buffer+bytes_read, 1, file_size-bytes_read, file);
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1133:// "GTEST_FOO" in the open-source version.
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1146:// Parses 'str' for a 32-bit signed integer.  If successful, writes
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1156:    // No - an invalid character was encountered.
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1159:        << " is expected to be a 32-bit integer, but actually"
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1176:        << " is expected to be a 32-bit integer, but actually"
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1201:// Reads and returns a 32-bit integer stored in the environment
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1203:// doesn't represent a valid 32-bit integer, returns default_value.
/Volumes/src/simhub/src/libs/googletest/src/gtest-port.cc:1245:  //   --gtest_output command line flag
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:32:// Google Test - The Google C++ Testing Framework
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:45:#include "gtest/gtest-printers.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:51:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:74:        *os << '-';
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:85:  *os << count << "-byte object <";
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:98:    // Rounds up to 2-byte boundary.
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:99:    const size_t resume_pos = (count - kChunkSize + 1)/2*2;
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:100:    PrintByteSegmentInObjectTo(obj_bytes, resume_pos, count - resume_pos, os);
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:125://   - as is if it's a printable ASCII (e.g. 'a', '2', ' '),
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:126://   - as a hexidecimal escape sequence (e.g. '\x7F'), or
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:127://   - as a special escape sequence (e.g. '\r', '\n').
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:257:// and may not be NUL-terminated.
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:295:  if (len > 0 && begin[len - 1] == '\0') {
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:296:    PrintCharsAsStringTo(begin, len - 1, os);
/Volumes/src/simhub/src/libs/googletest/src/gtest-printers.cc:303:  // that the array is not NUL-terminated.
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:34:#include "gtest/gtest-test-part.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:37:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:39:// prevent the accidental inclusion of gtest-internal-inl.h in the
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:42:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:63:          "Non-fatal failure") << ":\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:72:// Returns the TestPartResult at the given index (0-based).
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:91:      original_reporter_(GetUnitTestImpl()->
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:93:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(this);
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:97:  GetUnitTestImpl()->SetTestPartResultReporterForCurrentThread(
/Volumes/src/simhub/src/libs/googletest/src/gtest-test-part.cc:105:  original_reporter_->ReportTestPartResult(result);
/Volumes/src/simhub/src/libs/googletest/src/gtest-typed-test.cc:32:#include "gtest/gtest-typed-test.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest-typed-test.cc:40:// Skips to the first non-space char in str. Returns an empty string if str
/Volumes/src/simhub/src/libs/googletest/src/gtest-typed-test.cc:82:      if (name == it->first) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-typed-test.cc:99:    if (tests.count(it->first) == 0) {
/Volumes/src/simhub/src/libs/googletest/src/gtest-typed-test.cc:100:      errors << "You forgot to list test " << it->first << ".\n";
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:36:#include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:137:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:139:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:142:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:186:// g_help_flag is true iff the --help flag or an equivalent form is
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:210:    "True iff a failed assertion should be a debugger break-point.");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:229:    "A colon-separated list of glob (not regex) patterns "
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:231:    "'-' and a : separated list of negative patterns (tests to "
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:246:    "within that directory, with file-names based on the test "
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:296:    "if exceptions are enabled or exit the program with a non-zero code "
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:303:    "This flag specifies the flagfile to read command-line flags from.");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:333:// results of calling a given int-returning method on each.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:339:    sum += (case_list[i]->*method)();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:346:  return test_case->should_run() && test_case->Passed();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:351:  return test_case->should_run() && test_case->Failed();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:357:  return test_case->should_run();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:374:  UnitTest::GetInstance()->
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:375:    AddTestPartResult(data_->type, data_->file, data_->line,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:376:                      AppendUserMessage(data_->message, message),
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:377:                      UnitTest::GetInstance()->impl()
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:378:                      ->CurrentOsStackTraceExceptTop(1)
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:421:      std::string(gtest_output_flag, colon - gtest_output_flag);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:435:            UnitTest::GetInstance()->original_working_dir()),
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:445:        internal::FilePath(UnitTest::GetInstance()->original_working_dir()),
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:473:    default:  // Non-special character.  Matches itself.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:500:// Returns true iff the user-specified filter matches the test case
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:506:  // Split --gtest_filter at '-', if there is one, to separate into
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:509:  const char* const dash = strchr(p, '-');
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:519:      // Treat '-test1' as the same as '*-test1'
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:524:  // A filter is a colon-separated list of patterns.  It matches a
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:583:    old_reporter_ = impl->GetGlobalTestPartResultReporter();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:584:    impl->SetGlobalTestPartResultReporter(this);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:586:    old_reporter_ = impl->GetTestPartResultReporterForCurrentThread();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:587:    impl->SetTestPartResultReporterForCurrentThread(this);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:596:    impl->SetGlobalTestPartResultReporter(old_reporter_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:598:    impl->SetTestPartResultReporterForCurrentThread(old_reporter_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:606:  result_->Append(result);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:628:// This predicate-formatter checks that 'results' contains a test part
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:639:                        "1 non-fatal failure");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:681:// non-fatal failure will be generated.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:691:  unit_test_->current_test_result()->AddTestPartResult(result);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:692:  unit_test_->listeners()->repeater()->OnTestPartResult(result);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:700:  unit_test_->GetGlobalTestPartResultReporter()->ReportTestPartResult(result);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:797:  return os_stack_trace_getter()->CurrentStackTrace(
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:800:      // Skips the user-specified number of frames plus this function
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:808:  // Difference between 1970-01-01 and 1601-01-01 in milliseconds.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:823:    now_int64.QuadPart = (now_int64.QuadPart / kTenthMicrosInMilliSecond) -
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:854:// Creates a UTF-16 wide string from the given ANSI string, allocating
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:878:      WideCharToMultiByte(CP_ACP, 0, utf16_str, -1,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:881:  WideCharToMultiByte(CP_ACP, 0, utf16_str, -1,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:892:// C string is considered different to any non-NULL C string,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:904:// Converts an array of wide chars to a narrow string using the UTF-8
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:910:      *msg << WideStringToUtf8(wstr + i, static_cast<int>(length - i));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:932:      parsed.push_back(str.substr(pos, colon - pos));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:936:  dest->swap(parsed);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:953:// using the UTF-8 encoding.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:962:// Converts the given wide string to a narrow string using the UTF-8
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:971:// Converts the given wide string to a narrow string using the UTF-8
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1078:    l_i -= move != kAdd;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1079:    r_i -= move != kRemove;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1092:    if (it != ids_.end()) return it->second;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1142:      case '-':
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1144:        hunk_removes_.push_back(std::make_pair('-', line));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1159:      *os << it->first << it->second << "\n";
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1173:  //   "@@ -<left_start>,<left_length> +<right_start>,<right_length> @@"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1178:      *ss << "-" << left_start_ << "," << (removes_ + common_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1198:// lines prefixed with ' ' for no change, '-' for deletion and '+' for
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1220:    Hunk hunk(l_i - prefix_context + 1, r_i - prefix_context + 1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1221:    for (size_t i = prefix_context; i > 0; --i) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1222:      hunk.PushLine(' ', left[l_i - i].c_str());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1233:        if (it == edits.end() || (it - edits.begin()) - edit_i >= context) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1244:        hunk.PushLine(edit == kMatch ? ' ' : '-', left[l_i].c_str());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1275:  if (end > 2 && str[0] == '"' && str[end - 1] == '"') {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1277:    --end;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1284:        lines.push_back(str.substr(start, i - start - 1));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1291:  lines.push_back(str.substr(start, end - start));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1368:  const double diff = fabs(val1 - val2);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1400:  // val2 is NaN, as the IEEE floating-point standard requires that
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1454:// just to avoid copy-and-paste of similar code.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1673:  // Looks up the human-readable system message for the HRESULT code
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1688:  // Trims tailing white space (FormatMessage leaves a trailing CR-LF)
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1689:  for (; message_length && IsSpace(error_text[message_length - 1]);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1690:          --message_length) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1691:    error_text[message_length - 1] = '\0';
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1721:// UTF-8.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1723:// A Unicode code-point can have upto 21 bits, and is encoded in UTF-8
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1726:// Code-point length   Encoding
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1727://   0 -  7 bits       0xxxxxxx
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1728://   8 - 11 bits       110xxxxx 10xxxxxx
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1729://  12 - 16 bits       1110xxxx 10xxxxxx 10xxxxxx
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1730://  17 - 21 bits       11110xxx 10xxxxxx 10xxxxxx 10xxxxxx
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1732:// The maximum code-point a one-byte UTF-8 sequence can represent.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1733:const UInt32 kMaxCodePoint1 = (static_cast<UInt32>(1) <<  7) - 1;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1735:// The maximum code-point a two-byte UTF-8 sequence can represent.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1736:const UInt32 kMaxCodePoint2 = (static_cast<UInt32>(1) << (5 + 6)) - 1;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1738:// The maximum code-point a three-byte UTF-8 sequence can represent.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1739:const UInt32 kMaxCodePoint3 = (static_cast<UInt32>(1) << (4 + 2*6)) - 1;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1741:// The maximum code-point a four-byte UTF-8 sequence can represent.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1742:const UInt32 kMaxCodePoint4 = (static_cast<UInt32>(1) << (3 + 3*6)) - 1;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1748:  const UInt32 low_bits = *bits & ((static_cast<UInt32>(1) << n) - 1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1753:// Converts a Unicode code point to a narrow string in UTF-8 encoding.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1788:// uses UTF-16 for wide string encoding. All supported systems
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1789:// with 16 bit wchar_t (Windows, Cygwin, Symbian OS) do use UTF-16.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1791:// Determines if the arguments constitute UTF-16 surrogate pair
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1802:  const UInt32 mask = (1 << 10) - 1;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1810:// Converts a wide string to a narrow string in UTF-8 encoding.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1812://   UTF-16 if sizeof(wchar_t) == 2 (on Windows, Cygwin, Symbian OS)
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1813://   UTF-32 if sizeof(wchar_t) == 4 (on Linux)
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1814:// Parameter str points to a null-terminated wide string.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1816:// of wchar_t characters processed. -1 is used when the entire string
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1821:// and contains invalid UTF-16 surrogate pairs, values in those pairs
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1824:  if (num_chars == -1)
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1846:// Converts a wide C string to an std::string using the UTF-8 encoding.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1851:  return internal::WideStringToUtf8(wide_c_str, -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1858:// C string is considered different to any non-NULL C string,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1903:// NULL C string is considered different to any non-NULL C string,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1917:  // A NULL C string is considered different to any non-NULL wide C string,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1954:         CaseInsensitiveCStringEquals(str.c_str() + str_len - suffix_len,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1983:  const ::std::string& str = ss->str();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:1988:  result.reserve(2 * (end - start));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2000:// Appends the user-supplied message to the Google-Test-generated message.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2003:  // Appends the user message if it's non-empty.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2026:// Returns the i-th test part result among all the results. i can
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2027:// range from 0 to total_part_count() - 1. If i is not in that range,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2035:// Returns the i-th test property. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2036:// test_property_count() - 1. If i is not in that range, aborts the
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2070:  property_with_matching_key->SetValue(test_property.value());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2133:    if (i == words.size() - 1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2188:// Returns true iff the test part non-fatally failed.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2193:// Returns true iff the test has a non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2226:// A sub-class may override this.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2232:// A sub-class may override this.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2238:  UnitTest::GetInstance()->RecordProperty(key, value);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2254:  UnitTest::GetInstance()->AddTestPartResult(
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2257:      -1,    // We have no info on which line caused the exception.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2271:  const TestCase* const test_case = impl->current_test_case();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2274:  const TestInfo* const first_test_info = test_case->test_info_list()[0];
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2275:  const internal::TypeId first_fixture_id = first_test_info->fixture_class_id_;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2276:  const char* const first_test_name = first_test_info->name();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2279:  const TestInfo* const this_test_info = impl->current_test_info();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2280:  const internal::TypeId this_fixture_id = this_test_info->fixture_class_id_;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2281:  const char* const this_test_name = this_test_info->name();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2304:          << "illegal.  In test case " << this_test_info->test_case_name()
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2316:          << this_test_info->test_case_name() << ",\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2378:// SEH is supported; returns the 0-value for type Result in case of an
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2387:    return (object->*method)();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2402:  return (object->*method)();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2406:// Runs the given method and catches and reports C++ and/or SEH-style
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2407:// exceptions, if they are supported; returns the 0-value for type
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2415:  // after the exception is caught and either report or re-throw the
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2424:  //     throw;  // Re-throws the original exception.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2431:  // re-throw in this function -- instead of at the point of the original
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2435:  if (internal::GetUnitTestImpl()->catch_exceptions()) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2442:      // framework catch it.  Therefore we just re-throw it.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2458:    return (object->*method)();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2469:  impl->os_stack_trace_getter()->UponLeavingGTest();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2473:    impl->os_stack_trace_getter()->UponLeavingGTest();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2481:  impl->os_stack_trace_getter()->UponLeavingGTest();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2488:  return internal::GetUnitTestImpl()->current_test_result()->HasFatalFailure();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2491:// Returns true iff the current test has a non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2493:  return internal::GetUnitTestImpl()->current_test_result()->
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2533://                     this is not a typed or a type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2535://                     or NULL if this is not a value-parameterized test.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2556:  GetUnitTestImpl()->AddTestInfo(set_up_tc, tear_down_tc, test_info);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2603:    return test_info && test_info->name() == name_;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2635:  impl->set_current_test_info(this);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2637:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2640:  repeater->OnTestStart(*this);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2644:  impl->os_stack_trace_getter()->UponLeavingGTest();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2656:    test->Run();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2660:  impl->os_stack_trace_getter()->UponLeavingGTest();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2664:  result_.set_elapsed_time(internal::GetTimeInMillis() - start);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2667:  repeater->OnTestEnd(*this);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2671:  impl->set_current_test_info(NULL);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2717://                 this is not a typed or a type-parameterized test case.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2737:// Returns the i-th test among all the tests. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2738:// total_test_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2740:  const int index = GetElementOr(test_indices_, i, -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2744:// Returns the i-th test among all the tests. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2745:// total_test_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2747:  const int index = GetElementOr(test_indices_, i, -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2763:  impl->set_current_test_case(this);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2765:  TestEventListener* repeater = UnitTest::GetInstance()->listeners().repeater();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2767:  repeater->OnTestCaseStart(*this);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2768:  impl->os_stack_trace_getter()->UponLeavingGTest();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2774:    GetMutableTestInfo(i)->Run();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2776:  elapsed_time_ = internal::GetTimeInMillis() - start;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2778:  impl->os_stack_trace_getter()->UponLeavingGTest();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2782:  repeater->OnTestCaseEnd(*this);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2783:  impl->set_current_test_case(NULL);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2826:// Converts a TestPartResult::Type enum to human-friendly string
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2867:  // window such that the user can double-click on it to jump to the
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2871:  // to stdout is done by OutputDebugString() there already - we don't
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2925:    // On non-Windows platforms, we rely on the TERM variable.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2929:        String::CStringEquals(term, "xterm-color") ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2930:        String::CStringEquals(term, "xterm-256color") ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2932:        String::CStringEquals(term, "screen-256color") ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2934:        String::CStringEquals(term, "tmux-256color") ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2935:        String::CStringEquals(term, "rxvt-unicode") ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:2936:        String::CStringEquals(term, "rxvt-unicode-256color") ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3004:// Text printed in Google Test's text output and --gunit_list_tests
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3071:    const Int32 shard_index = Int32FromEnvOrDie(kTestShardIndex, -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3093:  ColoredPrintf(COLOR_GREEN,  "[----------] ");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3094:  printf("Global test environment set-up.\n");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3101:  ColoredPrintf(COLOR_GREEN, "[----------] ");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3131:  if (test_info.result()->Passed()) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3137:  if (test_info.result()->Failed())
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3142:           test_info.result()->elapsed_time()).c_str());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3154:  ColoredPrintf(COLOR_GREEN, "[----------] ");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3163:  ColoredPrintf(COLOR_GREEN,  "[----------] ");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3164:  printf("Global test environment tear-down\n");
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3182:      if (!test_info.should_run() || test_info.result()->Passed()) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3298:      listeners_[i]->Name(parameter); \
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3307:    for (int i = static_cast<int>(listeners_.size()) - 1; i >= 0; i--) { \
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3308:      listeners_[i]->Name(parameter); \
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3332:      listeners_[i]->OnTestIterationStart(unit_test, iteration);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3340:    for (int i = static_cast<int>(listeners_.size()) - 1; i >= 0; i--) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3341:      listeners_[i]->OnTestIterationEnd(unit_test, iteration);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3362:  // May c appear in a well-formed XML document?
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3367:  // Returns an XML-escaped copy of the input string str.  If
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3447:    //   2. It's a bit involved to make the errno variable thread-safe on
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3449:    //   3. To interpret the meaning of errno in a thread-safe way,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3464:// Returns an XML-escaped copy of the input string str.  If is_attribute
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3474:// TODO(wan): It might be nice to have a minimally invasive, human-readable
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3538:// <testsuites name="AllTests">        <-- corresponds to a UnitTest object
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3539://   <testsuite name="testcase-name">  <-- corresponds to a TestCase object
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3540://     <testcase name="test-name">     <-- corresponds to a TestInfo object
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3544://                                     <-- individual assertion failures
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3552:  ss << (static_cast<double>(ms) * 1e-3);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3561:  // Windows' localtime(), which has a thread-local tm buffer.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3578:  // YYYY-MM-DDThh:mm:ss
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3579:  return StreamableToString(time_struct.tm_year + 1900) + "-" +
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3580:      String::FormatIntWidth2(time_struct.tm_mon + 1) + "-" +
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3595:      stream->write(
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3596:          segment, static_cast<std::streamsize>(next_segment - segment));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3694:    if (test_case.GetTestInfo(i)->is_reportable())
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3705:  *stream << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3733:    if (unit_test.GetTestCase(i)->reportable_test_count() > 0)
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3759:// in both time and space -- important as the input str may contain an
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3781:  GTEST_CHECK_(sockfd_ == -1)
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3800:  for (addrinfo* cur_addr = servinfo; sockfd_ == -1 && cur_addr != NULL;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3801:       cur_addr = cur_addr->ai_next) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3803:        cur_addr->ai_family, cur_addr->ai_socktype, cur_addr->ai_protocol);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3804:    if (sockfd_ != -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3806:      if (connect(sockfd_, cur_addr->ai_addr, cur_addr->ai_addrlen) == -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3808:        sockfd_ = -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3815:  if (sockfd_ == -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3826:// Pushes the given source file location and message onto a per-thread
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3835:  UnitTest::GetInstance()->PushGTestTrace(trace);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3841:  UnitTest::GetInstance()->PopGTestTrace();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3857:// A helper class that creates the premature-exit file in its
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3863:    // If a path to the premature-exit file is specified...
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3903:  repeater_->Append(listener);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3914:  return repeater_->Release(listener);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3956:  return repeater_->forwarding_enabled();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3960:  repeater_->set_forwarding_enabled(false);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:3995:  return impl()->successful_test_case_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4000:  return impl()->failed_test_case_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4005:  return impl()->total_test_case_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4011:  return impl()->test_case_to_run_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4016:  return impl()->successful_test_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4020:int UnitTest::failed_test_count() const { return impl()->failed_test_count(); }
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4024:  return impl()->reportable_disabled_test_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4029:  return impl()->disabled_test_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4034:  return impl()->reportable_test_count();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4038:int UnitTest::total_test_count() const { return impl()->total_test_count(); }
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4041:int UnitTest::test_to_run_count() const { return impl()->test_to_run_count(); }
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4046:    return impl()->start_timestamp();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4051:  return impl()->elapsed_time();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4055:bool UnitTest::Passed() const { return impl()->Passed(); }
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4059:bool UnitTest::Failed() const { return impl()->Failed(); }
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4061:// Gets the i-th test case among all the test cases. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4062:// total_test_case_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4064:  return impl()->GetTestCase(i);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4070:  return *impl()->ad_hoc_test_result();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4073:// Gets the i-th test case among all the test cases. i can range from 0 to
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4074:// total_test_case_count() - 1. If i is not in that range, returns NULL.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4076:  return impl()->GetMutableTestCase(i);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4082:  return *impl()->listeners();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4086:// program is run, all global test environments will be set-up in the
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4088:// finished, all global test environments will be torn-down in the
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4100:  impl_->environments().push_back(env);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4118:  if (impl_->gtest_trace_stack().size() > 0) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4121:    for (int i = static_cast<int>(impl_->gtest_trace_stack().size());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4122:         i > 0; --i) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4123:      const internal::TraceInfo& trace = impl_->gtest_trace_stack()[i - 1];
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4136:  impl_->GetTestPartResultReporterForCurrentThread()->
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4148:      // when a failure happens and both the --gtest_break_on_failure and
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4149:      // the --gtest_catch_exceptions flags are specified.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4162:      // We cannot call abort() as it generates a pop-up in debug mode
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4177:  impl_->RecordProperty(TestProperty(key, value));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4198:  // running a Google-Test-based test program and check the existence
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4207:  // premature-exit file will be left undeleted, causing a test runner
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4208:  // that understands the premature-exit-file protocol to report the
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4216:  impl()->set_catch_exceptions(GTEST_FLAG(catch_exceptions));
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4221:  // process. In either case the user does not want to see pop-up dialogs
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4222:  // about crashes - they are expected.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4223:  if (impl()->catch_exceptions() || in_death_test_child_process) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4252:          _WRITE_ABORT_MSG | _CALL_REPORTFAULT);  // pop-up window, core dump.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4266:  return impl_->original_working_dir_.c_str();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4274:  return impl_->current_test_case();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4282:  return impl_->current_test_info();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4286:int UnitTest::random_seed() const { return impl_->random_seed(); }
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4290:// value-parameterized tests and instantiate and register them.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4294:  return impl_->parameterized_test_registry();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4308:// Pushes a trace defined by SCOPED_TRACE() on to the per-thread
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4313:  impl_->gtest_trace_stack().push_back(trace);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4316:// Pops a trace from the per-thread Google Test trace stack.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4320:  impl_->gtest_trace_stack().pop_back();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4339:      last_death_test_case_(-1),
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4354:  listeners()->SetDefaultResultPrinter(new PrettyUnitTestResultPrinter);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4378:    test_result = &(current_test_info_->result_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4381:    test_result = &(current_test_case_->ad_hoc_test_result_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4386:  test_result->RecordProperty(xml_element, test_property);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4394:    listeners()->SuppressEventForwarding();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4403:    listeners()->SetDefaultXmlGenerator(new XmlUnitTestResultPrinter(
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4420:      listeners()->Append(new StreamingListener(target.substr(0, pos),
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4443:    listeners()->Append(new GTEST_CUSTOM_TEST_EVENT_LISTENER_());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4483:    return test_case != NULL && strcmp(test_case->name(), name_.c_str()) == 0;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4499://                   this is not a typed or a type-parameterized test case.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4524:    // after a non-death test.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4539:static void SetUpEnvironment(Environment* env) { env->SetUp(); }
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4540:static void TearDownEnvironment(Environment* env) { env->TearDown(); }
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4560:  // Do not run any test if the --help flag was specified.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4564:  // Repeats the call to the post-flag parsing initialization in case the
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4573:  // True iff we are in a subprocess for running a thread-safe-style
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4595:  // Lists the tests and exits if the --gtest_list_tests flag was specified.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4608:  TestEventListener* repeater = listeners()->repeater();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4611:  repeater->OnTestProgramStart(*parent_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4619:    // We want to preserve failures generated by ad-hoc test
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4627:      random()->Reseed(random_seed_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4635:    repeater->OnTestIterationStart(*parent_, i);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4640:      repeater->OnEnvironmentsSetUpStart(*parent_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4642:      repeater->OnEnvironmentsSetUpEnd(*parent_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4645:      // set-up.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4649:          GetMutableTestCase(test_index)->Run();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4654:      repeater->OnEnvironmentsTearDownStart(*parent_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4657:      repeater->OnEnvironmentsTearDownEnd(*parent_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4660:    elapsed_time_ = GetTimeInMillis() - start;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4663:    repeater->OnTestIterationEnd(*parent_, i);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4672:    // N-th iteration without repeating the first (N - 1) iterations.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4684:  repeater->OnTestProgramEnd(*parent_);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4722:  const Int32 total_shards = Int32FromEnvOrDie(total_shards_env, -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4723:  const Int32 shard_index = Int32FromEnvOrDie(shard_index_env, -1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4725:  if (total_shards == -1 && shard_index == -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4727:  } else if (total_shards == -1 && shard_index != -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4735:  } else if (total_shards != -1 && shard_index == -1) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4776:// some arbitrary but unique non-negative integer assigned to each test
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4782:// Compares the name of each test with the user-specified filter to
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4786:// variables in the environment - see
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4791:      Int32FromEnvOrDie(kTestTotalShards, -1) : -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4793:      Int32FromEnvOrDie(kTestShardIndex, -1) : -1;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4803:    const std::string &test_case_name = test_case->name();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4804:    test_case->set_should_run(false);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4806:    for (size_t j = 0; j < test_case->test_info_list().size(); j++) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4807:      TestInfo* const test_info = test_case->test_info_list()[j];
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4808:      const std::string test_name(test_info->name());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4816:      test_info->is_disabled_ = is_disabled;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4821:      test_info->matches_filter_ = matches_filter;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4835:      test_info->should_run_ = is_selected;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4836:      test_case->set_should_run(test_case->should_run() || is_selected);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4842:// Prints the given C-string on a single line by replacing all '\n'
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4864:// Prints the names of the tests matching the user-specified filter flag.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4873:    for (size_t j = 0; j < test_case->test_info_list().size(); j++) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4875:          test_case->test_info_list()[j];
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4876:      if (test_info->matches_filter_) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4879:          printf("%s.", test_case->name());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4880:          if (test_case->type_param() != NULL) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4884:            PrintOnOneLine(test_case->type_param(), kMaxParamLength);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4888:        printf("  %s", test_info->name());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4889:        if (test_info->value_param() != NULL) {
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4893:          PrintOnOneLine(test_info->value_param(), kMaxParamLength);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4934:      &(current_test_info_->result_) : &ad_hoc_test_result_;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4943:  // Shuffles the non-death test cases.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4949:    test_cases_[i]->ShuffleTests(random());
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4957:    test_cases_[i]->UnshuffleTests();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:4977:  return GetUnitTestImpl()->CurrentOsStackTraceExceptTop(skip_count + 1);
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5011:// the format "--flag=value".  When def_optional is true, the "=value"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5021:  // The flag must start with "--" followed by GTEST_FLAG_PREFIX_.
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5022:  const std::string flag_str = std::string("--") + GTEST_FLAG_PREFIX_ + flag;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5044:// "--flag=value" or "--flag".
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5066:// "--flag=value".
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5078:  return ParseInt32(Message() << "The value of flag --" << flag,
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5083:// "--flag=value".
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5106:  return (SkipPrefix("--", &str) ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5107:          SkipPrefix("-", &str) ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5114:// Prints a string containing code-encoded text.  The following escape
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5154:      --str;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5164:"  @G--" GTEST_FLAG_PREFIX_ "list_tests@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5167:"  @G--" GTEST_FLAG_PREFIX_ "filter=@YPOSTIVE_PATTERNS"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5168:    "[@G-@YNEGATIVE_PATTERNS]@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5172:"  @G--" GTEST_FLAG_PREFIX_ "also_run_disabled_tests@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5176:"  @G--" GTEST_FLAG_PREFIX_ "repeat=@Y[COUNT]@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5178:"  @G--" GTEST_FLAG_PREFIX_ "shuffle@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5180:"  @G--" GTEST_FLAG_PREFIX_ "random_seed=@Y[NUMBER]@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5185:"  @G--" GTEST_FLAG_PREFIX_ "color=@Y(@Gyes@Y|@Gno@Y|@Gauto@Y)@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5187:"  -@G-" GTEST_FLAG_PREFIX_ "print_time=0@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5189:"  @G--" GTEST_FLAG_PREFIX_ "output=xml@Y[@G:@YDIRECTORY_PATH@G"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5194:"  @G--" GTEST_FLAG_PREFIX_ "stream_result_to=@YHOST@G:@YPORT@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5200:"  @G--" GTEST_FLAG_PREFIX_ "death_test_style=@Y(@Gfast@Y|@Gthreadsafe@Y)@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5203:"  @G--" GTEST_FLAG_PREFIX_ "break_on_failure@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5204:"      Turn assertion failures into debugger break-points.\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5205:"  @G--" GTEST_FLAG_PREFIX_ "throw_on_failure@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5207:"  @G--" GTEST_FLAG_PREFIX_ "catch_exceptions=0@D\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5209:"      to crash the program or throw a pop-up (on Windows).\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5211:"Except for @G--" GTEST_FLAG_PREFIX_ "list_tests@D, you can alternatively set "
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5213:"environment variable of a flag (all letters in upper-case). For example, to\n"
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5214:"disable colored text output, you can either specify @G--" GTEST_FLAG_PREFIX_
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5296:    } else if (arg_string == "--help" || arg_string == "-h" ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5297:               arg_string == "-?" || arg_string == "/?" ||
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5314:      (*argc)--;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5318:      i--;
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5356:  GetUnitTestImpl()->PostFlagParsingInit();
/Volumes/src/simhub/src/libs/googletest/src/gtest.cc:5369:// Calling the function for the second time has no user-visible effect.
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_ex_test.cc:34:#include "gtest/gtest-death-test.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_ex_test.cc:43:# include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_ex_test.cc:72:                          "gtest-death-test_ex_test.cc");
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:34:#include "gtest/gtest-death-test.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:36:#include "gtest/internal/gtest-filepath.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:58:# include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:61:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:63:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:66:# include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:89:    old_factory_ = unit_test_impl_->death_test_factory_.release();
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:90:    unit_test_impl_->death_test_factory_.reset(new_factory);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:94:    unit_test_impl_->death_test_factory_.release();
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:95:    unit_test_impl_->death_test_factory_.reset(old_factory_);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:115:  // will invoke user-defined exit-hooks, which may do dangerous
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:172:// A non-void function that's expected to die.
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:320:  // with embedded NUL characters - find a way to workaround it.
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:521:// Tests that a non-void function can be used in a death test.
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:540:    EXPECT_DEATH(DieIfLessThan(-1, i), "DieIfLessThan") << "where i == " << i;
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:605:// Tests that run-away death tests are reported as failures.
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:681:         "any pop-up dialogs.\n");
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:791:  // See http://msdn.microsoft.com/en-us/library/dwwzkt4c(VS.71).aspx.
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:941:    parent_->test_deleted_ = true;
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:944:    ++parent_->assume_role_calls_;
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:948:    ++parent_->wait_calls_;
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:952:    parent_->passed_args_.push_back(exit_status_ok);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:956:    parent_->abort_args_.push_back(reason);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1052:  factory_->SetParameters(false, DeathTest::OVERSEE_TEST, 0, true);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1055:  EXPECT_EQ(0, factory_->AssumeRoleCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1056:  EXPECT_EQ(0, factory_->WaitCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1057:  EXPECT_EQ(0U, factory_->PassedCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1058:  EXPECT_EQ(0U, factory_->AbortCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1059:  EXPECT_FALSE(factory_->TestDeleted());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1067:  factory_->SetParameters(true, DeathTest::OVERSEE_TEST, 0, true);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1070:  EXPECT_EQ(1, factory_->AssumeRoleCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1071:  EXPECT_EQ(1, factory_->WaitCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1072:  ASSERT_EQ(1U, factory_->PassedCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1073:  EXPECT_FALSE(factory_->PassedArgument(0));
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1074:  EXPECT_EQ(0U, factory_->AbortCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1075:  EXPECT_TRUE(factory_->TestDeleted());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1082:  factory_->SetParameters(true, DeathTest::OVERSEE_TEST, 1, true);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1085:  EXPECT_EQ(1, factory_->AssumeRoleCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1086:  EXPECT_EQ(1, factory_->WaitCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1087:  ASSERT_EQ(1U, factory_->PassedCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1088:  EXPECT_TRUE(factory_->PassedArgument(0));
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1089:  EXPECT_EQ(0U, factory_->AbortCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1090:  EXPECT_TRUE(factory_->TestDeleted());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1098:  factory_->SetParameters(true, DeathTest::EXECUTE_TEST, 0, true);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1101:  EXPECT_EQ(1, factory_->AssumeRoleCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1102:  EXPECT_EQ(0, factory_->WaitCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1103:  EXPECT_EQ(0U, factory_->PassedCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1104:  EXPECT_EQ(1U, factory_->AbortCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1106:            factory_->AbortArgument(0));
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1107:  EXPECT_TRUE(factory_->TestDeleted());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1114:  factory_->SetParameters(true, DeathTest::EXECUTE_TEST, 0, true);
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1117:  EXPECT_EQ(1, factory_->AssumeRoleCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1118:  EXPECT_EQ(0, factory_->WaitCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1119:  EXPECT_EQ(0U, factory_->PassedCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1125:  ASSERT_EQ(2U, factory_->AbortCalls());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1127:            factory_->AbortArgument(0));
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1129:            factory_->AbortArgument(1));
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1130:  EXPECT_TRUE(factory_->TestDeleted());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1137:  EXPECT_EQ(0, GetUnitTestImpl()->current_test_result()->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1152:// last error is 0 and non-empty string when it is non-zero.
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1203:  // Rejects non-numbers.
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1204:  EXPECT_FALSE(ParseNaturalNumber("non-number string", &result));
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1210:  EXPECT_FALSE(ParseNaturalNumber("-123", &result));
/Volumes/src/simhub/src/libs/googletest/test/gtest-death-test_test.cc:1287:  // in a static assertion in gtest-death-test.cc in the function
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:38:// build or make-files for some existing Google Test clients. Do not
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:41:#include "gtest/internal/gtest-filepath.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:45:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:47:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:50:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:65:// gtest-port.h.
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:70:  int ret = DeleteFile(wpath) ? 0 : -1;
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:79:  int ret = RemoveDirectory(wpath) ? 0 : -1;
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:121:// RemoveDirectoryName "" -> ""
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:126:// RemoveDirectoryName "afile" -> "afile"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:132:// RemoveDirectoryName "/afile" -> "afile"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:138:// RemoveDirectoryName "adir/" -> ""
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:144:// RemoveDirectoryName "adir/afile" -> "afile"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:150:// RemoveDirectoryName "adir/subdir/afile" -> "afile"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:162:// RemoveDirectoryName("/afile") -> "afile"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:167:// RemoveDirectoryName("adir/") -> ""
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:172:// RemoveDirectoryName("adir/afile") -> "afile"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:177:// RemoveDirectoryName("adir/subdir/afile") -> "afile"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:185:// RemoveFileName "" -> "./"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:195:// RemoveFileName "adir/" -> "adir/"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:201:// RemoveFileName "adir/afile" -> "adir/"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:207:// RemoveFileName "adir/subdir/afile" -> "adir/subdir/"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:214:// RemoveFileName "/afile" -> "/"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:225:// RemoveFileName("adir/") -> "adir/"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:231:// RemoveFileName("adir/afile") -> "adir/"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:237:// RemoveFileName("adir/subdir/afile") -> "adir/subdir/"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:243:// RemoveFileName("/afile") -> "\"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:336:// RemoveTrailingPathSeparator "" -> ""
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:341:// RemoveTrailingPathSeparator "foo" -> "foo"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:346:// RemoveTrailingPathSeparator "foo/" -> "foo"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:355:// RemoveTrailingPathSeparator "foo/bar/" -> "foo/bar/"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:362:// RemoveTrailingPathSeparator "foo/bar" -> "foo/bar"
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:372:  current_drive[0] = static_cast<char>(_getdrive() + 'A' - 1);
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:386:  for (char drive = 'Z'; drive >= 'A'; drive--)
/Volumes/src/simhub/src/libs/googletest/test/gtest-filepath_test.cc:387:    if (_chdrive(drive - 'A' + 1) == -1) {
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:33:#include "gtest/internal/gtest-linked_ptr.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:80:    // Use explicit function call notation here to suppress self-assign warning.
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:110:      a3->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:111:      a4->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:112:      a5->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:113:      a6->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:114:      b0->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:116:      b0.get()->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:119:    a0->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:120:    a1->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:121:    a2->Use();
/Volumes/src/simhub/src/libs/googletest/test/gtest-linked_ptr_test.cc:151:    history->GetString().c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:61:    g_events->push_back(GetFullMethodName("OnTestProgramStart"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:69:    g_events->push_back(message.GetString());
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:73:    g_events->push_back(GetFullMethodName("OnEnvironmentsSetUpStart"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:77:    g_events->push_back(GetFullMethodName("OnEnvironmentsSetUpEnd"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:81:    g_events->push_back(GetFullMethodName("OnTestCaseStart"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:85:    g_events->push_back(GetFullMethodName("OnTestStart"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:89:    g_events->push_back(GetFullMethodName("OnTestPartResult"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:93:    g_events->push_back(GetFullMethodName("OnTestEnd"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:97:    g_events->push_back(GetFullMethodName("OnTestCaseEnd"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:101:    g_events->push_back(GetFullMethodName("OnEnvironmentsTearDownStart"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:105:    g_events->push_back(GetFullMethodName("OnEnvironmentsTearDownEnd"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:113:    g_events->push_back(message.GetString());
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:117:    g_events->push_back(GetFullMethodName("OnTestProgramEnd"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:131:    g_events->push_back("Environment::SetUp");
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:135:    g_events->push_back("Environment::TearDown");
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:142:    g_events->push_back("ListenerTest::SetUpTestCase");
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:146:    g_events->push_back("ListenerTest::TearDownTestCase");
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:150:    g_events->push_back("ListenerTest::SetUp");
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:154:    g_events->push_back("ListenerTest::TearDown");
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:161:  g_events->push_back("ListenerTest::* Test Body");
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:166:  g_events->push_back("ListenerTest::* Test Body");
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:206:  UnitTest::GetInstance()->listeners().Append(
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:208:  UnitTest::GetInstance()->listeners().Append(
/Volumes/src/simhub/src/libs/googletest/test/gtest-listener_test.cc:307:  if (UnitTest::GetInstance()->Failed())
/Volumes/src/simhub/src/libs/googletest/test/gtest-message_test.cc:34:#include "gtest/gtest-message.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-message_test.cc:57:// Tests constructing a Message from a C-string.
/Volumes/src/simhub/src/libs/googletest/test/gtest-message_test.cc:80:// Tests streaming a non-char pointer.
/Volumes/src/simhub/src/libs/googletest/test/gtest-message_test.cc:87:// Tests streaming a NULL non-char pointer.
/Volumes/src/simhub/src/libs/googletest/test/gtest-message_test.cc:115:                                      sizeof(char_array_with_nul) - 1);
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:38:// make-files on Windows and other platforms. Do not #include this file
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:50:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:52:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:55:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:110:      _strcmpi("gtest-options_test", exe_str.c_str()) == 0 ||
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:111:      _strcmpi("gtest-options-ex_test", exe_str.c_str()) == 0 ||
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:115:  // TODO(wan@google.com): remove the hard-coded "lt-" prefix when
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:118:      exe_str == "gtest-options_test" ||
/Volumes/src/simhub/src/libs/googletest/test/gtest-options_test.cc:120:      exe_str == "lt-gtest_all_test" ||
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test2_test.cc:37:#include "test/gtest-param-test_test.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test2_test.cc:46:// in gtest-param-test_test.cc.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test2_test.cc:50:// and instantiated in another. The test is defined in gtest-param-test_test.cc
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test2_test.cc:52:// gtest-param-test_test.h.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test2_test.cc:59:// in gtest-param-test_test.cc and InstantiationInMultipleTranslaionUnitsTest
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test2_test.cc:60:// fixture is defined in gtest-param-test_test.h
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:47:// To include gtest-internal-inl.h.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:49:# include "src/gtest-internal-inl.h"  // for UnitTestOptions
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:52:# include "test/gtest-param-test_test.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:93:// Argument-Dependent Lookup, yet defining anything in the std
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:94:// namespace in non-STL code is undefined behavior.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:263:// Verifies that Range works with user-defined types that define
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:295:  EXPECT_STREQ("cat", it->value().c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:298:  EXPECT_STREQ("catdog", it->value().c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:328:  EXPECT_EQ(0, it->value());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:331:  EXPECT_EQ(1, it->value());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:388:// single value generates a single-element sequence.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:443:// Edge case test. Tests that single-parameter Values() generates the sequence
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:581:    // If all MultipleTestGenerationTest tests have been de-selected
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:634:    Environment::Instance()->FixtureConstructorExecuted();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:638:    Environment::Instance()->SetUpExecuted();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:642:    Environment::Instance()->TearDownExecuted();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:689:  Environment::Instance()->TestBodyExecuted();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:724:// functional. Generator extern_gen is defined in gtest-param-test_test2.cc.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:738:// gtest-param-test_test2.cc. ExternalInstantiationTest fixture class is
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:739:// defined in gtest-param-test_test.h.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:754:// here and in gtest-param-test_test2.cc.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:756:// is defined in gtest-param-test_test.h.
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:774:        << "GeneratorEvaluationTest are selected or de-selected together "
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:793:// SequenceName/TestCaseName.TestName/i, where i is the 0-based index of the
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:799:     ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:801:  EXPECT_STREQ("ZeroToFiveSequence/NamingTest", test_info->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:805:  EXPECT_STREQ(index_stream.GetString().c_str(), test_info->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:807:  EXPECT_EQ(::testing::PrintToString(GetParam()), test_info->value_param());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:870:       case_num < unit_test->total_test_case_count();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:872:    const ::testing::TestCase* test_case = unit_test->GetTestCase(case_num);
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:874:         test_num < test_case->total_test_count();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:876:      const ::testing::TestInfo* test_info = test_case->GetTestInfo(test_num);
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:877:      test_names.insert(std::string(test_info->name()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:893:     ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:896:  EXPECT_STREQ(test_name_stream.GetString().c_str(), test_info->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:920:     ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:923:  EXPECT_STREQ(test_name_stream.GetString().c_str(), test_info->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:951:     ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:955:  EXPECT_STREQ(test_name_stream.GetString().c_str(), test_info->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:979:     ::testing::UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:981:  EXPECT_EQ(::testing::PrintToString(GetParam()), test_info->value_param());
/Volumes/src/simhub/src/libs/googletest/test/gtest-param-test_test.cc:1023:                            ".* value-parameterized test .*");
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:32:// This file tests the internal cross-platform support utilities.
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:34:#include "gtest/internal/gtest-port.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:47:#include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:50:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:52:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:55:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:72:  EXPECT_FALSE(IsXDigit('-'));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:90:  EXPECT_FALSE(IsXDigit(L'-'));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:282:  EXPECT_EQ("foo.cc:", FormatFileLocation("foo.cc", -1));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:286:  EXPECT_EQ("unknown file:", FormatFileLocation(NULL, -1));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:300:  EXPECT_EQ("foo.cc", FormatCompilerIndependentFileLocation("foo.cc", -1));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:304:  EXPECT_EQ("unknown file", FormatCompilerIndependentFileLocation(NULL, -1));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:310:  mutex->Lock();
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:311:  mutex->Unlock();
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:357:     "gtest-port_test\\.cc\\(\\d+\\):"
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:359:     "gtest-port_test\\.cc:[0-9]+"
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:361:     "gtest-port_test\\.cc:\\d+"
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:484:  EXPECT_FALSE(IsAsciiDigit('-'));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:505:  for (const char* p = "^-!\"#$%&'()*+,./:;<=>?@[\\]_`{|}~"; *p; p++) {
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:515:  EXPECT_FALSE(IsRepeat('-'));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:589:  EXPECT_TRUE(IsValidEscape('-'));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:634:  EXPECT_TRUE(AtomMatchesChar(true, 'D', '-'));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:785:  EXPECT_TRUE(MatchRepetitionAndRegexAtHead(true, 'w', '*', "-", "ab_1-g"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:796:  EXPECT_TRUE(MatchRepetitionAndRegexAtHead(true, 'w', '+', "-", "ab_1-g"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:823:  EXPECT_TRUE(MatchRegexAtHead(".*a", "bc12-ab"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:842:  EXPECT_TRUE(MatchRegexAtHead("ab.*c", "ab-fsc"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:860:  EXPECT_FALSE(MatchRegexAnywhere("a.+a", "--aa88888888"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:864:  EXPECT_TRUE(MatchRegexAnywhere("\\w+", "ab1_ - 5"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:870:  EXPECT_TRUE(MatchRegexAnywhere("\\w+", "$$$ ab1_ - 5"));
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1098:      param.first->Increment();
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1121:    counting_threads[i]->Join();
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1138:  *param.second = param.first->get();
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1184:    for (size_t i = 0; i < list_->size(); ++i) {
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1185:      delete list_->at(i);
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1187:    list_->clear();
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1213:    DestructorCall::List()[index_]->ReportDestroyed();
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1219:    return DestructorCall::List().size() - 1;
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1229:  thread_local_param->get();
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1244:    ASSERT_FALSE(DestructorCall::List()[0]->CheckDestroyed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1249:  EXPECT_TRUE(DestructorCall::List()[0]->CheckDestroyed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1254:// Tests that when a thread exits, the thread-local object for that
/Volumes/src/simhub/src/libs/googletest/test/gtest-port_test.cc:1275:  EXPECT_TRUE(DestructorCall::List()[0]->CheckDestroyed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:32:// Google Test - The Google C++ Testing Framework
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:36:#include "gtest/gtest-printers.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:65:// Some user-defined types for testing the universal value printer.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:69:  kAE1 = -1,
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:73:// An enum without a user-defined printer.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:75:  kEWP1 = -2,
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:103:// A user-defined unprintable class template in the global namespace.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:112:// A user-defined streamable type in the global namespace.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:128:// A user-defined unprintable type in a user namespace.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:138:// A user-defined printable type in a user-chosen namespace.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:148:// A type with a user-defined << for printing its pointer.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:157:// A user-defined printable class template in a user-chosen namespace.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:173:// A user-defined streamable class template in a user namespace.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:254:  EXPECT_EQ("-1", Print(kAE1));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:259:  EXPECT_EQ("-2", Print(kEWP1));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:304:  EXPECT_EQ("'\\xCE' (-50)",
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:305:            Print(static_cast<signed char>(-50)));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:315:// Tests printing other simple, built-in types.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:353:  EXPECT_EQ("'\\x80' (-128)", Print(static_cast<signed char>(-128)));  // int8
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:355:  EXPECT_EQ("-32768", Print(SHRT_MIN));  // int16
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:357:  EXPECT_EQ("-2147483648", Print(INT_MIN));  // int32
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:359:            Print(static_cast<testing::internal::UInt64>(-1)));  // uint64
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:360:  EXPECT_EQ("-9223372036854775808",
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:369:  EXPECT_EQ("-2", Print(static_cast<ssize_t>(-2)));  // ssize_t.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:373:// Floating-points.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:376:  EXPECT_EQ("-2.5", Print(-2.5));  // double
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:488:// Tests printing pointers to simple, built-in types.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:522:// Tests printing (non-member) function pointers.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:555:// Their representation is implementation-defined.  Thus they will be
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:569:                        Print(sizeof(&Foo::value)) + "-byte object "));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:572:                        Print(sizeof(p)) + "-byte object "));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:577:// Their representation is implementation-defined.  Thus they will be
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:581:                        Print(sizeof(&Foo::MyMethod)) + "-byte object "));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:584:                Print(sizeof((&Foo::MyVirtualMethod))) + "-byte object "));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:587:                        Print(sizeof(p)) + "-byte object "));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:599:// One-dimensional array.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:605:// Two-dimensional array.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:685:  // a hex escaping sequence following by a hex digit (lower-case)
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:687:  // a hex escaping sequence following by a hex digit (upper-case)
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:689:  // a hex escaping sequence following by a non-xdigit
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:690:  EXPECT_EQ("\"!\\x5-!\"", Print(::std::string("!\x5-!")));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:723:  EXPECT_EQ("L\"!\\x5-!\"", Print(::std::wstring(L"!\x5-!")));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:731:// Tests printing a non-template type that supports generic streaming.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:796:  const StringPiece sp(str, sizeof(str) - 1);
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:862:      numbers.push_back(result[i] - '0');
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:982:  EXPECT_EQ("1-byte object <00>", Print(it));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:993:  EXPECT_EQ("1-byte object <00>", Print(it));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1039:      t10(false, 'a', 3, 4, 5, 1.5F, -2.5, str,
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1041:  EXPECT_EQ("(false, 'a' (97, 0x61), 3, 4, 5, 1.5, -2.5, " + PrintPointer(str) +
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1098:      t10(false, 'a', 3, 4, 5, 1.5F, -2.5, str,
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1100:  EXPECT_EQ("(false, 'a' (97, 0x61), 3, 4, 5, 1.5, -2.5, " + PrintPointer(str) +
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1114:// Tests printing user-defined unprintable types.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1118:  EXPECT_EQ("1-byte object <00>",
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1124:  EXPECT_EQ("16-byte object <EF-12 00-00 34-AB 00-00 00-00 00-00 00-00 00-00>",
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1136:  EXPECT_EQ("257-byte object <00-00 00-00 00-00 00-00 00-00 00-00 "
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1137:            "00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 "
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1138:            "00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 "
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1139:            "00-00 00-00 00-00 00-00 00-00 00-00 ... 00-00 00-00 00-00 "
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1140:            "00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 "
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1141:            "00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 "
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1142:            "00-00 00-00 00-00 00-00 00-00 00-00 00-00 00-00 00>",
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1146:// Tests printing user-defined streamable types.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1161:// Tests printing user-defined types that have a PrintTo() function.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1167:// Tests printing a pointer to a user-defined type that has a <<
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1174:// Tests printing user-defined class template that have a PrintTo() function.
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1194:  EXPECT_EQ("@" + PrintPointer(&x) + " 16-byte object "
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1195:            "<EF-12 00-00 34-AB 00-00 00-00 00-00 00-00 00-00>",
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1222:          Print(sizeof(p)) + "-byte object "));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1228:          Print(sizeof(p2)) + "-byte object "));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1237:      "@" + PrintPointer(&p) + " " + Print(sizeof(p)) + "-byte object "));
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1250:// non-char pointer
/Volumes/src/simhub/src/libs/googletest/test/gtest-printers_test.cc:1257:// non-char array
/Volumes/src/simhub/src/libs/googletest/test/gtest-test-part_test.cc:33:#include "gtest/gtest-test-part.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-test-part_test.cc:51:        r2_(TestPartResult::kNonFatalFailure, "foo/bar.cc", -1, "Failure!"),
/Volumes/src/simhub/src/libs/googletest/test/gtest-test-part_test.cc:52:        r3_(TestPartResult::kFatalFailure, NULL, -1, "Failure!") {}
/Volumes/src/simhub/src/libs/googletest/test/gtest-test-part_test.cc:121:  EXPECT_EQ(-1, r2_.line_number());
/Volumes/src/simhub/src/libs/googletest/test/gtest-test-part_test.cc:162:      : r1_(TestPartResult::kNonFatalFailure, "foo/bar.cc", -1, "Failure 1"),
/Volumes/src/simhub/src/libs/googletest/test/gtest-test-part_test.cc:163:        r2_(TestPartResult::kFatalFailure, "foo/bar.cc", -1, "Failure 2") {}
/Volumes/src/simhub/src/libs/googletest/test/gtest-test-part_test.cc:202:  EXPECT_DEATH_IF_SUPPORTED(results.GetTestPartResult(-1), "");
/Volumes/src/simhub/src/libs/googletest/test/gtest-tuple_test.cc:32:#include "gtest/internal/gtest-tuple.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-tuple_test.cc:185:  // Non-reference fields.
/Volumes/src/simhub/src/libs/googletest/test/gtest-tuple_test.cc:217:// Tests constructing a 2-tuple from an std::pair.
/Volumes/src/simhub/src/libs/googletest/test/gtest-tuple_test.cc:244:// Tests assigning an std::pair to a 2-tuple.
/Volumes/src/simhub/src/libs/googletest/test/gtest-tuple_test.cc:276:// Tests that get<N>(t) returns the N-th (0-based) field of tuple t.
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test2_test.cc:34:#include "test/gtest-typed-test_test.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test2_test.cc:39:// Tests that the same type-parameterized test case can be
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test2_test.cc:41:// (ContainerTest is also instantiated in gtest-typed-test_test.cc.)
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:32:#include "test/gtest-typed-test_test.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:43:// type-parameterized test.
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:111:  // Non-static members of the fixture class must be visited via
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:113:  EXPECT_EQ(2, this->value_);
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:121:  ASSERT_TRUE(this->shared_ != NULL);
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:122:  EXPECT_EQ(5, *this->shared_);
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:125:  EXPECT_EQ(static_cast<TypeParam>(2), this->value_);
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:171:// This #ifdef block tests type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:225:// a run-time error if the test case has been registered.
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:235:// and SetUp()/TearDown() work correctly in type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:248:  // Non-static members of the fixture class must be visited via
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:250:  EXPECT_EQ(2, this->value_);
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:258:  ASSERT_TRUE(this->shared_ != NULL);
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:259:  EXPECT_EQ(5, *this->shared_);
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:260:  EXPECT_EQ(2, this->value_);
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:297:// This also verifies that tests from different type-parameterized
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:313:// Tests that the same type-parameterized test case can be
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:317:// Tests that the same type-parameterized test case can be
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:319:// (ContainerTest is also instantiated in gtest-typed-test_test.cc.)
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:323:// Tests that a type-parameterized test case can be defined and
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:348:  return testing::UnitTest::GetInstance()->current_test_info()->name();
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.cc:372:// Google Test may not support type-parameterized tests with some
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.h:41:// For testing that the same type-parameterized test case can be
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.h:43:// ContainerTest will be instantiated in both gtest-typed-test_test.cc
/Volumes/src/simhub/src/libs/googletest/test/gtest-typed-test_test.h:44:// and gtest-typed-test2_test.cc.
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:49:    return strcmp(a->name(), b->name()) < 0;
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:77:      if (0 == strcmp(test_case->name(), name))
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:88:        new const TestInfo*[test_case->total_test_count()];
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:90:    for (int i = 0; i < test_case->total_test_count(); ++i)
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:91:      tests[i] = test_case->GetTestInfo(i);
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:93:    std::sort(tests, tests + test_case->total_test_count(),
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:117:  ASSERT_EQ(2 + kTypedTestCases, unit_test->total_test_case_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:118:  EXPECT_EQ(1 + kTypedTestCases, unit_test->test_case_to_run_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:119:  EXPECT_EQ(2, unit_test->disabled_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:120:  EXPECT_EQ(5 + kTypedTests, unit_test->total_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:121:  EXPECT_EQ(3 + kTypedTests, unit_test->test_to_run_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:125:  EXPECT_STREQ("ApiTest", test_cases[0]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:126:  EXPECT_STREQ("DISABLED_Test", test_cases[1]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:128:  EXPECT_STREQ("TestCaseWithCommentTest/0", test_cases[2]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:151:  EXPECT_STREQ("ApiTest", test_case->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:152:  EXPECT_TRUE(IsNull(test_case->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:153:  EXPECT_TRUE(test_case->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:154:  EXPECT_EQ(1, test_case->disabled_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:155:  EXPECT_EQ(3, test_case->test_to_run_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:156:  ASSERT_EQ(4, test_case->total_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:160:  EXPECT_STREQ("DISABLED_Dummy1", tests[0]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:161:  EXPECT_STREQ("ApiTest", tests[0]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:162:  EXPECT_TRUE(IsNull(tests[0]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:163:  EXPECT_TRUE(IsNull(tests[0]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:164:  EXPECT_FALSE(tests[0]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:166:  EXPECT_STREQ("TestCaseDisabledAccessorsWork", tests[1]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:167:  EXPECT_STREQ("ApiTest", tests[1]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:168:  EXPECT_TRUE(IsNull(tests[1]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:169:  EXPECT_TRUE(IsNull(tests[1]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:170:  EXPECT_TRUE(tests[1]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:172:  EXPECT_STREQ("TestCaseImmutableAccessorsWork", tests[2]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:173:  EXPECT_STREQ("ApiTest", tests[2]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:174:  EXPECT_TRUE(IsNull(tests[2]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:175:  EXPECT_TRUE(IsNull(tests[2]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:176:  EXPECT_TRUE(tests[2]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:178:  EXPECT_STREQ("UnitTestImmutableAccessorsWork", tests[3]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:179:  EXPECT_STREQ("ApiTest", tests[3]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:180:  EXPECT_TRUE(IsNull(tests[3]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:181:  EXPECT_TRUE(IsNull(tests[3]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:182:  EXPECT_TRUE(tests[3]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:191:  EXPECT_STREQ("TestCaseWithCommentTest/0", test_case->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:192:  EXPECT_STREQ(GetTypeName<int>().c_str(), test_case->type_param());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:193:  EXPECT_TRUE(test_case->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:194:  EXPECT_EQ(0, test_case->disabled_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:195:  EXPECT_EQ(1, test_case->test_to_run_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:196:  ASSERT_EQ(1, test_case->total_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:200:  EXPECT_STREQ("Dummy", tests[0]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:201:  EXPECT_STREQ("TestCaseWithCommentTest/0", tests[0]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:202:  EXPECT_TRUE(IsNull(tests[0]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:203:  EXPECT_STREQ(GetTypeName<int>().c_str(), tests[0]->type_param());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:204:  EXPECT_TRUE(tests[0]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:214:  EXPECT_STREQ("DISABLED_Test", test_case->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:215:  EXPECT_TRUE(IsNull(test_case->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:216:  EXPECT_FALSE(test_case->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:217:  EXPECT_EQ(1, test_case->disabled_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:218:  EXPECT_EQ(0, test_case->test_to_run_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:219:  ASSERT_EQ(1, test_case->total_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:221:  const TestInfo* const test_info = test_case->GetTestInfo(0);
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:222:  EXPECT_STREQ("Dummy2", test_info->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:223:  EXPECT_STREQ("DISABLED_Test", test_info->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:224:  EXPECT_TRUE(IsNull(test_info->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:225:  EXPECT_TRUE(IsNull(test_info->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:226:  EXPECT_FALSE(test_info->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:239:    EXPECT_EQ(1 + kTypedTestCases, unit_test->successful_test_case_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:240:    EXPECT_EQ(3 + kTypedTests, unit_test->successful_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:241:    EXPECT_EQ(0, unit_test->failed_test_case_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:242:    EXPECT_EQ(0, unit_test->failed_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:243:    EXPECT_TRUE(unit_test->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:244:    EXPECT_FALSE(unit_test->Failed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:245:    ASSERT_EQ(2 + kTypedTestCases, unit_test->total_test_case_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:249:    EXPECT_STREQ("ApiTest", test_cases[0]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:250:    EXPECT_TRUE(IsNull(test_cases[0]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:251:    EXPECT_TRUE(test_cases[0]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:252:    EXPECT_EQ(1, test_cases[0]->disabled_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:253:    ASSERT_EQ(4, test_cases[0]->total_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:254:    EXPECT_EQ(3, test_cases[0]->successful_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:255:    EXPECT_EQ(0, test_cases[0]->failed_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:256:    EXPECT_TRUE(test_cases[0]->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:257:    EXPECT_FALSE(test_cases[0]->Failed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:259:    EXPECT_STREQ("DISABLED_Test", test_cases[1]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:260:    EXPECT_TRUE(IsNull(test_cases[1]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:261:    EXPECT_FALSE(test_cases[1]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:262:    EXPECT_EQ(1, test_cases[1]->disabled_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:263:    ASSERT_EQ(1, test_cases[1]->total_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:264:    EXPECT_EQ(0, test_cases[1]->successful_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:265:    EXPECT_EQ(0, test_cases[1]->failed_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:268:    EXPECT_STREQ("TestCaseWithCommentTest/0", test_cases[2]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:269:    EXPECT_STREQ(GetTypeName<int>().c_str(), test_cases[2]->type_param());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:270:    EXPECT_TRUE(test_cases[2]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:271:    EXPECT_EQ(0, test_cases[2]->disabled_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:272:    ASSERT_EQ(1, test_cases[2]->total_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:273:    EXPECT_EQ(1, test_cases[2]->successful_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:274:    EXPECT_EQ(0, test_cases[2]->failed_test_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:275:    EXPECT_TRUE(test_cases[2]->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:276:    EXPECT_FALSE(test_cases[2]->Failed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:281:    EXPECT_STREQ("DISABLED_Dummy1", tests[0]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:282:    EXPECT_STREQ("ApiTest", tests[0]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:283:    EXPECT_FALSE(tests[0]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:285:    EXPECT_STREQ("TestCaseDisabledAccessorsWork", tests[1]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:286:    EXPECT_STREQ("ApiTest", tests[1]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:287:    EXPECT_TRUE(IsNull(tests[1]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:288:    EXPECT_TRUE(IsNull(tests[1]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:289:    EXPECT_TRUE(tests[1]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:290:    EXPECT_TRUE(tests[1]->result()->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:291:    EXPECT_EQ(0, tests[1]->result()->test_property_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:293:    EXPECT_STREQ("TestCaseImmutableAccessorsWork", tests[2]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:294:    EXPECT_STREQ("ApiTest", tests[2]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:295:    EXPECT_TRUE(IsNull(tests[2]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:296:    EXPECT_TRUE(IsNull(tests[2]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:297:    EXPECT_TRUE(tests[2]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:298:    EXPECT_TRUE(tests[2]->result()->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:299:    EXPECT_EQ(0, tests[2]->result()->test_property_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:301:    EXPECT_STREQ("UnitTestImmutableAccessorsWork", tests[3]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:302:    EXPECT_STREQ("ApiTest", tests[3]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:303:    EXPECT_TRUE(IsNull(tests[3]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:304:    EXPECT_TRUE(IsNull(tests[3]->type_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:305:    EXPECT_TRUE(tests[3]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:306:    EXPECT_TRUE(tests[3]->result()->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:307:    EXPECT_EQ(1, tests[3]->result()->test_property_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:308:    const TestProperty& property = tests[3]->result()->GetTestProperty(0);
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:318:    EXPECT_STREQ("Dummy", tests[0]->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:319:    EXPECT_STREQ("TestCaseWithCommentTest/0", tests[0]->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:320:    EXPECT_TRUE(IsNull(tests[0]->value_param()));
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:321:    EXPECT_STREQ(GetTypeName<int>().c_str(), tests[0]->type_param());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:322:    EXPECT_TRUE(tests[0]->should_run());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:323:    EXPECT_TRUE(tests[0]->result()->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest-unittest-api_test.cc:324:    EXPECT_EQ(0, tests[0]->result()->test_property_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_all_test.cc:36:#include "test/gtest-filepath_test.cc"
/Volumes/src/simhub/src/libs/googletest/test/gtest_all_test.cc:37:#include "test/gtest-linked_ptr_test.cc"
/Volumes/src/simhub/src/libs/googletest/test/gtest_all_test.cc:38:#include "test/gtest-message_test.cc"
/Volumes/src/simhub/src/libs/googletest/test/gtest_all_test.cc:39:#include "test/gtest-options_test.cc"
/Volumes/src/simhub/src/libs/googletest/test/gtest_all_test.cc:40:#include "test/gtest-port_test.cc"
/Volumes/src/simhub/src/libs/googletest/test/gtest_all_test.cc:43:#include "test/gtest-test-part_test.cc"
/Volumes/src/simhub/src/libs/googletest/test/gtest_all_test.cc:44:#include "test/gtest-typed-test_test.cc"
/Volumes/src/simhub/src/libs/googletest/test/gtest_all_test.cc:45:#include "test/gtest-typed-test2_test.cc"
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:32:"""Unit test for Google Test's break-on-failure mode.
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:34:A user can ask Google Test to seg-fault when an assertion fails, using
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:36:--gtest_break_on_failure flag.  This script tests such functionality
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:52:# The environment variable for enabling/disabling the break-on-failure mode.
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:55:# The command line flag for enabling/disabling the break-on-failure mode.
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:58:# The environment variable for enabling/disabling the throw-on-failure mode.
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:61:# The environment variable for enabling/disabling the catch-exceptions mode.
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:72:# Tests in this file run a Google-Test-based test program and expect it
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:74:# the premature-exit-file protocol by design.  Unset the
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:75:# premature-exit filepath to prevent Google Test from creating
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:95:  the --gtest_break_on_failure flag to turn assertion failures into
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:101:    (or does not) have a seg-fault.
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:106:      flag_value:       value of the --gtest_break_on_failure flag;
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:108:      expect_seg_fault: 1 if the program is expected to generate a seg-fault;
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:122:      flag = '--%s=0' % BREAK_ON_FAILURE_FLAG
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:124:      flag = '--%s' % BREAK_ON_FAILURE_FLAG
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:139:    msg = ('when %s%s, an assertion failure in "%s" %s cause a seg-fault.' %
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest.py:162:    """Tests using the --gtest_break_on_failure flag."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest_.cc:32:// Unit test for Google Test's break-on-failure mode.
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest_.cc:34:// A user can ask Google Test to seg-fault when an assertion fails, using
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest_.cc:36:// --gtest_break_on_failure flag.  This file is used for testing such
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest_.cc:60:  exit(exception_pointers->ExceptionRecord->ExceptionCode);
/Volumes/src/simhub/src/libs/googletest/test/gtest_break_on_failure_unittest_.cc:75:  // with the exception code as exit code - for example it exits with
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:45:FLAG_PREFIX = '--gtest_'
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:63:# Tests in this file run a Google-Test-based test program and expect it
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:65:# the premature-exit-file protocol by design.  Unset the
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:66:# premature-exit filepath to prevent Google Test from creating
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:84:  # pylint:disable-msg=C6302
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:86:    """Tests exception-catching behavior."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:115:  """Tests C++ exception-catching behavior.
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:222:    # cause tests to show pop-up windows there.
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test.py:223:    FITLER_OUT_SEH_TESTS_FLAG = FILTER_FLAG + '=-*Seh*'
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test_.cc:291:  throw "C-string";
/Volumes/src/simhub/src/libs/googletest/test/gtest_catch_exceptions_test_.cc:295:// This avoids showing pop-ups on Windows systems and core dumps on Unix-like
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:65:    args = ['--%s=%s' % (COLOR_FLAG, color_flag)]
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:72:    """Tests the case when there's neither GTEST_COLOR nor --gtest_color."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:77:      self.assert_(not UsesColor('xterm-mono', None, None))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:83:    self.assert_(UsesColor('xterm-color', None, None))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:84:    self.assert_(UsesColor('xterm-256color', None, None))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:87:    """Tests the case when there's --gtest_color but not GTEST_COLOR."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:90:    self.assert_(not UsesColor('xterm-color', None, 'no'))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:98:    """Tests the case when there's GTEST_COLOR but not --gtest_color."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:101:    self.assert_(not UsesColor('xterm-color', 'no', None))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:104:    self.assert_(UsesColor('xterm-color', 'auto', None))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:106:    self.assert_(UsesColor('xterm-color', 'yes', None))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:109:    """Tests the case when there are both GTEST_COLOR and --gtest_color."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:111:    self.assert_(not UsesColor('xterm-color', 'no', 'no'))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:113:    self.assert_(UsesColor('xterm-color', 'no', 'auto'))
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test.py:116:    """Tests using aliases in specifying --gtest_color."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test_.cc:41:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test_.cc:43:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test_.cc:46:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_color_test_.cc:53:// works the same way as in a real Google-Test-based test.  We don't actual
/Volumes/src/simhub/src/libs/googletest/test/gtest_env_var_test_.cc:40:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:39:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:58:  // generate a non-fatal failure, generate a fatal failure, or
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:65:        ADD_FAILURE() << "Expected non-fatal failure in global set-up.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:68:        FAIL() << "Expected fatal failure in global set-up.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:75:  // Generates a non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:78:    ADD_FAILURE() << "Expected non-fatal failure in global tear-down.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:126:// be generated by the global set-up.
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:128:  env->Reset();
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:129:  env->set_failure_in_set_up(failure);
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:131:  testing::internal::GetUnitTestImpl()->ClearAdHocTestResult();
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:147:  // set-up is successful.
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:149:        "RUN_ALL_TESTS() should return non-zero, as the global tear-down "
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:152:        "The tests should run, as the global set-up should generate no "
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:154:  Check(env->tear_down_was_run(),
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:155:        "The global tear-down should run, as the global set-up was run.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:158:  // set-up generates no fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:160:        "RUN_ALL_TESTS() should return non-zero, as both the global set-up "
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:161:        "and the global tear-down should generate a non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:163:        "The tests should run, as the global set-up should generate no "
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:165:  Check(env->tear_down_was_run(),
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:166:        "The global tear-down should run, as the global set-up was run.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:168:  // Verifies that RUN_ALL_TESTS() runs no test when the global set-up
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:171:        "RUN_ALL_TESTS() should return non-zero, as the global set-up "
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:174:        "The tests should not run, as the global set-up should generate "
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:176:  Check(env->tear_down_was_run(),
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:177:        "The global tear-down should run, as the global set-up was run.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:179:  // Verifies that RUN_ALL_TESTS() doesn't do global set-up or
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:180:  // tear-down when there is no test to run.
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:181:  testing::GTEST_FLAG(filter) = "-*";
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:184:  Check(!env->set_up_was_run(),
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:185:        "The global set-up should not run, as there is no test to run.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:186:  Check(!env->tear_down_was_run(),
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:187:        "The global tear-down should not run, "
/Volumes/src/simhub/src/libs/googletest/test/gtest_environment_test.cc:188:        "as the global set-up was not run.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:34:the GTEST_FILTER environment variable or the --gtest_filter flag.
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:64:    [sys.executable, '-c', 'import os; print(\'EMPTY_VAR\' in os.environ)'])
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:69:# We set an env variable to a non-empty string, unset it, and invoke
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:77:    [sys.executable, '-c', 'import os; print(\'UNSET_VAR\' not in os.environ)'])
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:84:# the difference between "" and NULL -- Borland and Solaris < 5.10)
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:109:TEST_CASE_REGEX = re.compile(r'^\[\-+\] \d+ tests? from (\w+(/\w+)?)')
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:116:LIST_TESTS_FLAG = '--gtest_list_tests'
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:151:# All the non-disabled tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:256:      return list(set(tests_to_run) - set(PARAM_TESTS))
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:272:    # pylint: disable-msg=C6403
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:278:    # pylint: enable-msg=C6403
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:285:      args = ['--%s=%s' % (FILTER_FLAG, gtest_filter)]
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:314:    # pylint: disable-msg=C6403
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:326:    # pylint: enable-msg=C6403
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:342:    args = ['--%s' % ALSO_RUN_DISABED_TESTS_FLAG]
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:344:      args.append('--%s=%s' % (FILTER_FLAG, gtest_filter))
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:352:    Determines whether value-parameterized tests are enabled in the binary and
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:371:    self.RunAndVerifyWithSharding(None, len(ACTIVE_TESTS) - 1, ACTIVE_TESTS)
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:400:    self.RunAndVerifyWithSharding('*.*', len(ACTIVE_TESTS) - 3, ACTIVE_TESTS)
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:482:    # An empty pattern + a non-empty one
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:515:    self.RunAndVerify('*-BazTest.TestOne', [
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:527:    self.RunAndVerify('*-FooTest.Abc:BazTest.*', [
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:535:    self.RunAndVerify('BarTest.*-BarTest.TestOne', [
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:541:    self.RunAndVerify('-FooTest.Abc:FooTest.Xyz:BazTest.*', [
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:570:    args = ['--%s=%s' % (FILTER_FLAG, '*One')]
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:628:      for flag in ['--gtest_death_test_style=threadsafe',
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest.py:629:                   '--gtest_death_test_style=fast']:
/Volumes/src/simhub/src/libs/googletest/test/gtest_filter_unittest_.cc:35:// either the GTEST_FILTER environment variable or the --gtest_filter
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:32:"""Tests the --help flag of Google C++ Testing Framework.
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:35:       gtest_help_test.py --build_dir=BUILD/DIR
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:51:FLAG_PREFIX = '--gtest_'
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:56:INCORRECT_FLAG_VARIANTS = [re.sub('^--', '-', LIST_TESTS_FLAG),
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:57:                           re.sub('^--', '/', LIST_TESTS_FLAG),
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:58:                           re.sub('_', '-', LIST_TESTS_FLAG)]
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:87:    flag: the command-line flag to pass to gtest_help_test_, or None.
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:99:  """Tests the --help flag and its equivalent forms."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:140:    self.TestHelpFlag('--help')
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:143:    self.TestHelpFlag('-h')
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test.py:146:    self.TestHelpFlag('-?')
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test_.cc:39:// causing this program to exit with a non-zero code.
/Volumes/src/simhub/src/libs/googletest/test/gtest_help_test_.cc:41:  ASSERT_TRUE(false) << "Tests shouldn't be run when --help is specified.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:32:"""Unit test for Google Test's --gtest_list_tests flag.
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:35:--gtest_list_tests flag.  This script tests such functionality
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:55:# --gtest_list_tests
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:99:# --gtest_list_tests and --gtest_filter=Foo*.
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:127:  """Tests using the --gtest_list_tests flag to list all tests."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:134:      flag_value:         value of the --gtest_list_tests flag;
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:147:      flag = '--%s=0' % LIST_TESTS_FLAG
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:150:      flag = '--%s' % LIST_TESTS_FLAG
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:181:    """Tests using the --gtest_list_tests flag."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:191:    """Tests that --gtest_list_tests overrides the non-filter flags."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:195:                      other_flag='--gtest_break_on_failure')
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:198:    """Tests that --gtest_list_tests takes into account the
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:199:    --gtest_filter flag."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest.py:203:                      other_flag='--gtest_filter=Foo*')
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest_.cc:32:// Unit test for Google Test's --gtest_list_tests flag.
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest_.cc:77:// A group of value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest_.cc:111:// A deliberately long type name for testing the line-truncating
/Volumes/src/simhub/src/libs/googletest/test/gtest_list_tests_unittest_.cc:135:// A group of type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_no_test_unittest.cc:40:  // An ad-hoc assertion outside of all tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_no_test_unittest.cc:44:  // 1. It verifies that an ad-hoc assertion can be executed even if
/Volumes/src/simhub/src/libs/googletest/test/gtest_no_test_unittest.cc:46:  // 2. It verifies that a failed ad-hoc assertion causes the test
/Volumes/src/simhub/src/libs/googletest/test/gtest_no_test_unittest.cc:50:  //    though --gtest_output=xml is specified.  This makes sure the
/Volumes/src/simhub/src/libs/googletest/test/gtest_no_test_unittest.cc:54:  // The above EXPECT_EQ() should cause RUN_ALL_TESTS() to return non-zero.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:35:       gtest_output_test.py --build_dir=BUILD/DIR --gengolden
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:37:       gtest_output_test.py --gengolden
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:51:GENGOLDEN_FLAG = '--gengolden'
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:63:COMMAND_LIST_TESTS = ({}, [PROGRAM_PATH, '--gtest_list_tests'])
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:64:COMMAND_WITH_COLOR = ({}, [PROGRAM_PATH, '--gtest_color=yes'])
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:66:                          '--gtest_print_time',
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:68:                          '--gtest_filter=FatalFailureTest.*:LoggingTest.*'])
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:71:         '--gtest_also_run_disabled_tests',
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:73:         '--gtest_filter=*DISABLED_*'])
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:78:     '--gtest_filter=PassingTest.*'])
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:127:  """Removes compiler-specific type info from Google Test program's output.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:163:  output = re.sub(r'\d+ tests? from ([a-zA-Z_])',
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:202:  """Runs a command in a sub-process, and returns its output in a string.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:205:    env_cmd: The shell command. A 2-tuple where element 0 is a dict of extra
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:213:  # Spawns cmd in a sub-process, and gets its standard I/O file objects.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:227:    env_cmd:  The shell command. A 2-tuple where element 0 is a dict of extra
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:232:  # Disables exception pop-ups on Windows.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test.py:283:    # A mis-configured source control system can cause \r appear in EOL
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:38:#include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:42:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:44:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:47:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:116:  std::string golden_str(kGoldenString, sizeof(kGoldenString) - 1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:259://   -------------------------------+--------------------------------
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:263://   -------------------------------+--------------------------------
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:267://   -------------------------------|--------------------------------
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:272://   -------------------------------|--------------------------------
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:276://   -------------------------------|--------------------------------
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:290:    check_points->n1.Notify();
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:291:    check_points->n2.WaitForNotification();
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:298:  check_points->n3.Notify();
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:329:  // verifying that the --gtest_also_run_disabled_tests flag
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:338:  printf("The non-test part of the code is expected to have 2 failures.\n\n");
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:349:// Tests non-fatal failures in the fixture constructor.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:410:// Tests non-fatal failures in SetUp().
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:469:  GTEST_CHECK_(!should_die) << " - death inside DieIf().";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:472:// Tests running death tests in a multi-threaded context.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:489:  notifications->spawn_thread_started.Notify();
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:492:  notifications->spawn_thread_ok_to_terminate.WaitForNotification();
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:495:// This is a death-test test, but it's not named with a DeathTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:600:    EXPECT_EQ(1, global_integer) << "Expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:601:  }, "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:611:    EXPECT_EQ(m, n) << "Expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:612:  }, "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:616:// one non-fatal failure and no fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:619:    ADD_FAILURE() << "Expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:620:  }, "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:624:// non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:632:// non-fatal failures.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:636:    ADD_FAILURE() << "Expected non-fatal failure 1.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:637:    ADD_FAILURE() << "Expected non-fatal failure 2.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:694:// one fatal failure and no non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:724:// Tests that EXPECT_FATAL_FAILURE() fails when there is one non-fatal
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:729:    ADD_FAILURE() << "Expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:758:// This #ifdef block tests the output of value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:803:// This #ifdef block tests the output of type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:855:// We rely on the golden file to verify that type-parameterized tests
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:887:      ADD_FAILURE() << "Expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:896:  // Expected fatal failure, but got a non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:898:  EXPECT_FATAL_FAILURE(AddFailure(NONFATAL_FAILURE), "Expected non-fatal "
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:907:  // Expected non-fatal failure, but succeeds.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:909:  EXPECT_NONFATAL_FAILURE(SUCCEED(), "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:910:  // Expected non-fatal failure, but got a fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:915:  EXPECT_NONFATAL_FAILURE(AddFailure(NONFATAL_FAILURE), "Some other non-fatal "
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:940:                          "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:967:  // Expected fatal failure, but got a non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:970:                                      "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:978:  // Expected non-fatal failure, but succeeds.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:980:  EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(SUCCEED(), "Expected non-fatal "
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:982:  // Expected non-fatal failure, but got a fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:989:                                         "Some other non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:1015:    ADD_FAILURE() << "Expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_.cc:1042:    // process of an threadsafe-style death test.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:1:The non-test part of the code is expected to have 2 failures.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:11:[0;32m[----------] [mGlobal test environment set-up.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:14:[0;32m[----------] [m1 test from ADeathTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:17:[0;32m[----------] [m1 test from ATypedDeathTest/0, where TypeParam = int
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:20:[0;32m[----------] [m1 test from ATypedDeathTest/1, where TypeParam = double
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:23:[0;32m[----------] [m1 test from My/ATypeParamDeathTest/0, where TypeParam = int
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:26:[0;32m[----------] [m1 test from My/ATypeParamDeathTest/1, where TypeParam = double
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:29:[0;32m[----------] [m2 tests from PassingTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:34:[0;32m[----------] [m2 tests from NonfatalFailureTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:53:@@ -1,2 @@
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:54:-\"Line\0 1\"
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:58:[0;32m[----------] [m3 tests from FatalFailureTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:80:[0;32m[----------] [m1 test from LoggingTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:92:[0;32m[----------] [m6 tests from SCOPED_TRACETest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:204:[0;32m[----------] [m1 test from NonFatalFailureInFixtureConstructorTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:223:[0;32m[----------] [m1 test from FatalFailureInFixtureConstructorTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:233:[0;32m[----------] [m1 test from NonFatalFailureInSetUpTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:249:[0;32m[----------] [m1 test from FatalFailureInSetUpTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:262:[0;32m[----------] [m1 test from AddFailureAtTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:268:[0;32m[----------] [m4 tests from MixedUpTestCaseTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:295:[0;32m[----------] [m2 tests from MixedUpTestCaseWithSameTestNameTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:309:[0;32m[----------] [m2 tests from TEST_F_before_TEST_in_same_test_case
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:323:[0;32m[----------] [m2 tests from TEST_before_TEST_F_in_same_test_case
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:337:[0;32m[----------] [m8 tests from ExpectNonfatalFailureTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:347:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:353:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:355:gtest_output_test_.cc:#: Non-fatal failure:
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:357:Expected non-fatal failure 1.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:359:gtest_output_test_.cc:#: Non-fatal failure:
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:361:Expected non-fatal failure 2.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:367:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:377:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:383:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:386:[0;32m[----------] [m8 tests from ExpectFatalFailureTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:418:gtest_output_test_.cc:#: Non-fatal failure:
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:420:Expected non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:435:[0;32m[----------] [m2 tests from TypedTest/0, where TypeParam = int
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:445:[0;32m[----------] [m2 tests from Unsigned/TypedTestP/0, where TypeParam = unsigned char
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:456:[0;32m[----------] [m2 tests from Unsigned/TypedTestP/1, where TypeParam = unsigned int
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:467:[0;32m[----------] [m4 tests from ExpectFailureTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:480:gtest_output_test_.cc:#: Non-fatal failure:
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:482:Expected non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:496:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:503:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:511:Expected: 1 non-fatal failure containing "Some other non-fatal failure."
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:513:gtest_output_test_.cc:#: Non-fatal failure:
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:515:Expected non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:530:gtest_output_test_.cc:#: Non-fatal failure:
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:532:Expected non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:546:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:553:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:561:Expected: 1 non-fatal failure containing "Some other non-fatal failure."
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:563:gtest_output_test_.cc:#: Non-fatal failure:
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:565:Expected non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:568:[0;32m[----------] [m2 tests from ExpectFailureWithThreadsTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:582:Expected non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:584:Expected: 1 non-fatal failure
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:587:[0;32m[----------] [m1 test from ScopedFakeTestPartResultReporterTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:595:Expected non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:597:[0;32m[----------] [m1 test from PrintingFailingParams/FailingParamTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:604:[0;32m[----------] [m2 tests from PrintingStrings/ParamTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:614:[0;32m[----------] [mGlobal test environment tear-down
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:618:Expected non-fatal failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:676:[----------] Global test environment set-up.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:677:[----------] 3 tests from FatalFailureTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:699:[----------] 3 tests from FatalFailureTest (? ms total)
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:701:[----------] 1 test from LoggingTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:713:[----------] 1 test from LoggingTest (? ms total)
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:715:[----------] Global test environment tear-down
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:727:[----------] Global test environment set-up.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:728:[----------] 1 test from DisabledTestsWarningTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:731:[----------] Global test environment tear-down
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:737:[----------] Global test environment set-up.
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:738:[----------] 1 test from PassingTest
/Volumes/src/simhub/src/libs/googletest/test/gtest_output_test_golden_lin.txt:741:[----------] Global test environment tear-down
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:48:// stand-alone regression test.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:53:#include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:55:// A user-defined data type.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:99:// A unary predicate-formatter function.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:112:// A unary predicate-formatter functor.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:166:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:174:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:182:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:190:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:198:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:208:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:218:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:228:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:238:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:246:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:254:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:262:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:270:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:281:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:292:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:303:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:314:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:322:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:330:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:338:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:346:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:356:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:366:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:376:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:386:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:394:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:402:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:410:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:418:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:429:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:440:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:451:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:487:// A binary predicate-formatter function.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:502:// A binary predicate-formatter functor.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:563:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:572:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:581:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:590:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:599:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:610:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:621:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:632:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:643:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:652:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:661:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:670:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:679:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:691:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:703:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:715:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:727:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:736:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:745:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:754:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:763:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:774:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:785:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:796:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:807:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:816:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:825:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:834:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:843:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:855:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:867:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:879:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:917:// A ternary predicate-formatter function.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:934:// A ternary predicate-formatter functor.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1002:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1012:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1022:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1032:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1042:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1054:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1066:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1078:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1090:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1100:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1110:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1120:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1130:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1143:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1156:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1169:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1182:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1192:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1202:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1212:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1222:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1234:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1246:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1258:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1270:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1280:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1290:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1300:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1310:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1323:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1336:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1349:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1360:// Sample functions/functors for testing 4-ary predicate assertions.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1362:// A 4-ary predicate function.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1378:// A 4-ary predicate functor.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1389:// A 4-ary predicate-formatter function.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1408:// A 4-ary predicate-formatter functor.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1483:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1494:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1505:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1516:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1527:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1540:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1553:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1566:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1579:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1590:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1601:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1612:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1623:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1637:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1651:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1665:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1679:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1690:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1701:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1712:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1723:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1736:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1749:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1762:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1775:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1786:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1797:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1808:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1819:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1833:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1847:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1861:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1873:// Sample functions/functors for testing 5-ary predicate assertions.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1875:// A 5-ary predicate function.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1891:// A 5-ary predicate functor.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1903:// A 5-ary predicate-formatter function.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:1924:// A 5-ary predicate-formatter functor.
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2006:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2018:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2030:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2042:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2054:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2068:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2082:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2096:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2110:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2122:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2134:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2146:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2158:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2173:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2188:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2203:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2218:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2230:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2242:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2254:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2266:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2280:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2294:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2308:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2322:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2334:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2346:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2358:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2370:// predicate-formatter is a function on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2385:// predicate-formatter is a function on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2400:// predicate-formatter is a functor on a built-in type (int).
/Volumes/src/simhub/src/libs/googletest/test/gtest_pred_impl_unittest.cc:2415:// predicate-formatter is a functor on a user-defined type (Bool).
/Volumes/src/simhub/src/libs/googletest/test/gtest_premature_exit_test.cc:32:// Tests that Google Test manipulates the premature-exit-detection
/Volumes/src/simhub/src/libs/googletest/test/gtest_premature_exit_test.cc:65:  // Returns true iff the premature-exit file exists.
/Volumes/src/simhub/src/libs/googletest/test/gtest_premature_exit_test.cc:76://   - the premature-exit file exists during the execution of a
/Volumes/src/simhub/src/libs/googletest/test/gtest_premature_exit_test.cc:78://   - a death test doesn't interfere with the main test process's
/Volumes/src/simhub/src/libs/googletest/test/gtest_premature_exit_test.cc:79://     handling of the premature-exit file.
/Volumes/src/simhub/src/libs/googletest/test/gtest_premature_exit_test.cc:96:// Tests that the premature-exit file exists during the execution of a
/Volumes/src/simhub/src/libs/googletest/test/gtest_premature_exit_test.cc:97:// normal (non-death) test.
/Volumes/src/simhub/src/libs/googletest/test/gtest_premature_exit_test.cc:114:  // Test that the premature-exit file is deleted upon return from
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:32:// Tests the --gtest_repeat=number flag.
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:39:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:41:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:44:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:77:// Used for verifying that global environment set-up and tear-down are
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:107:// A test that contains a thread-safe death test and a fast death
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:164:// Tests the behavior of Google Test when --gtest_repeat is not specified.
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:171:// Tests the behavior of Google Test when --gtest_repeat has the given value.
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:180:// Tests using --gtest_repeat when --gtest_filter specifies an empty
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:191:// Tests using --gtest_repeat when --gtest_filter specifies a set of
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:195:  GTEST_FLAG(filter) = "*-*ShouldFail";
/Volumes/src/simhub/src/libs/googletest/test/gtest_repeat_test.cc:209:// Tests using --gtest_repeat when --gtest_filter specifies a set of
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:59:  return '--gtest_also_run_disabled_tests'
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:63:  return '--gtest_filter=%s' % (test_filter,)
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:67:  return '--gtest_repeat=%s' % (n,)
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:71:  return '--gtest_shuffle'
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:75:  return '--gtest_random_seed=%s' % (n,)
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:95:    A list where the i-th element is the list of tests run in the i-th
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:101:    if line.startswith('----'):
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:241:                     '%s appears after a non-death test' % (test,))
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:249:      if test_cases and test_cases[-1] != test_case:
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:279:    # correctly restores the test order before re-shuffling at the
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test.py:287:    # correctly restores the test order before re-shuffling at the
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test_.cc:78:// iteration with a "----" marker.
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test_.cc:83:    printf("----\n");
/Volumes/src/simhub/src/libs/googletest/test/gtest_shuffle_test_.cc:98:  TestEventListeners& listeners = UnitTest::GetInstance()->listeners();
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:41:// gtest-internal-inl.h.  This is how Google Test prevents a user from
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:44:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:59:// in gtest-port.h, where it is defined for already supported platforms.
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:84:  EXPECT_STREQ(IdToString(id).c_str(), property->value());
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:112:    // multi-threaded context.
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:118:  const TestInfo* const info = UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:119:  const TestResult* const result = info->result();
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:120:  GTEST_CHECK_(expected_failures == result->total_part_count())
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:121:      << "Logged " << result->total_part_count() << " failures "
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:140:      threads[i]->Join();
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:144:  const TestInfo* const info = UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:145:  const TestResult* const result = info->result();
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:150:  for (int i = 0; i < result->test_property_count(); ++i)
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:151:    properties.push_back(result->GetTestProperty(i));
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:153:  EXPECT_EQ(kThreadCount * 2 + 1, result->test_property_count())
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:168:    ADD_FAILURE() << "Non-fatal failure in some other thread. "
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:212:  ADD_FAILURE() << "This is an expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_stress_test.cc:231:  ADD_FAILURE() << "This is an expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:45:# pylint: disable-msg=C6204
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:52:# pylint: enable-msg=C6204
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:59:# The environment variable for specifying the path to the premature-exit file.
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:77:TestCase = _test_module.TestCase  # pylint: disable-msg=C6409
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:90:  # here to maintain module-wide state.
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:91:  global _gtest_flags_are_parsed  # pylint: disable-msg=W0603
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:104:      prefix = '--' + flag + '='
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:110:        # We don't increment i in case we just found a --gtest_* flag
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:119:  # _ParseAndStripGTestFlags() here to make sure the --gtest_* flags
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:179:        'a path to the binary via the --build_dir flag or the BUILD_DIR\n'
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:188:  """Returns the argument to exit(), or -1 if exit() wasn't called.
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:204:      return -1
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:292:        self._return_code = -os.WTERMSIG(ret_code)
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:299:      self.signal = -self._return_code
/Volumes/src/simhub/src/libs/googletest/test/gtest_test_utils.py:311:  # --gtest_* flags.
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_ex_test.cc:32:// Tests Google Test's throw-on-failure mode with exceptions enabled.
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_ex_test.cc:42:// non-zero.  We use this instead of a Google Test assertion to
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_ex_test.cc:86:  // properly and set the thrown-on-failure mode.  Therefore, we don't
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:32:"""Tests Google Test's throw-on-failure mode with exceptions disabled.
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:46:# The command line flag for enabling/disabling the throw-on-failure mode.
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:81:  """Tests the throw-on-failure mode."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:85:    (or does not) exit with a non-zero code.
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:90:      flag_value:       value of the --gtest_break_on_failure flag;
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:105:      flag = '--%s=0' % THROW_ON_FAILURE
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:107:      flag = '--%s' % THROW_ON_FAILURE
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:122:    msg = ('when %s%s, an assertion failure in "%s" %s cause a non-zero '
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:144:    """Tests using the --gtest_throw_on_failure flag."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test.py:154:    """Tests that --gtest_throw_on_failure overrides GTEST_THROW_ON_FAILURE."""
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test_.cc:32:// Tests Google Test's throw-on-failure mode with exceptions disabled.
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test_.cc:36:// with non-zero in the throw-on-failure mode or 0 otherwise.
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test_.cc:45:// This avoids showing pop-ups on Windows systems and core dumps on Unix-like
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test_.cc:61:  // properly and set the throw-on-failure mode.  Therefore, we don't
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test_.cc:65:  // In the throw-on-failure mode with exceptions disabled, this
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test_.cc:66:  // assertion will cause the program to exit with a non-zero code.
/Volumes/src/simhub/src/libs/googletest/test/gtest_throw_on_failure_test_.cc:69:  // When not in the throw-on-failure mode, the control will reach
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:68:#include "gtest/gtest-spi.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:71:// implementation.  It must come before gtest-internal-inl.h is
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:73:// prevent a user from accidentally including gtest-internal-inl.h in
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:76:#include "src/gtest-internal-inl.h"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:101:  string* output() { return &(fake_sock_writer_->output_); }
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:163:    return listeners->repeater();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:168:    listeners->SetDefaultResultPrinter(listener);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:172:    listeners->SetDefaultXmlGenerator(listener);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:180:    listeners->SuppressEventForwarding();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:327:  EXPECT_EQ(kMaxRandomSeed - 1, GetRandomSeedFromFlag(kMaxRandomSeed - 1));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:333:  const int seed1 = GetRandomSeedFromFlag(-1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:346:            GetNextRandomSeed(kMaxRandomSeed - 1));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:357:      GetUnitTestImpl()->current_test_result());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:400:  EXPECT_EQ("-0.003", FormatTimeInMillisAsSeconds(-3));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:401:  EXPECT_EQ("-0.01", FormatTimeInMillisAsSeconds(-10));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:402:  EXPECT_EQ("-0.2", FormatTimeInMillisAsSeconds(-200));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:403:  EXPECT_EQ("-1.2", FormatTimeInMillisAsSeconds(-1200));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:404:  EXPECT_EQ("-3", FormatTimeInMillisAsSeconds(-3000));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:416:  // 32 bits, even when 64-bit integer types are available.  We have to
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:417:  // force the constants to have a 64-bit type here.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:470:  EXPECT_EQ("2011-10-31T18:52:42",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:476:      "2011-10-31T18:52:42",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:481:  EXPECT_EQ("2011-09-03T05:07:02",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:486:  EXPECT_EQ("2011-09-28T17:08:22",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:491:  EXPECT_EQ("1970-01-01T00:00:00", FormatEpochTimeInMillisAsIso8601(0));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:498:#  pragma option push -w-ccc -w-rch
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:541:// Tests that Unicode code-points that have 8 to 11 bits are encoded
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:544:  // 000 1101 0011 => 110-00011 10-010011
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:547:  // 101 0111 0110 => 110-10101 10-110110
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:548:  // Some compilers (e.g., GCC on MinGW) cannot handle non-ASCII codepoints
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:555:// Tests that Unicode code-points that have 12 to 16 bits are encoded
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:558:  // 0000 1000 1101 0011 => 1110-0000 10-100011 10-010011
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:562:  // 1100 0111 0100 1101 => 1110-1100 10-011101 10-001101
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:570:// 16-bit wide. This code may not compile on those systems.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:572:// Tests that Unicode code-points that have 17 to 21 bits are encoded
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:575:  // 0 0001 0000 1000 1101 0011 => 11110-000 10-010000 10-100011 10-010011
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:578:  // 0 0001 0000 0100 0000 0000 => 11110-000 10-010000 10-010000 10-000000
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:581:  // 1 0000 1000 0110 0011 0100 => 11110-100 10-001000 10-011000 10-110100
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:585:// Tests that encoding an invalid code-point generates the expected result.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:597:  EXPECT_STREQ("", WideStringToUtf8(L"", -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:604:  EXPECT_STREQ("a", WideStringToUtf8(L"a", -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:605:  EXPECT_STREQ("ab", WideStringToUtf8(L"ab", -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:608:// Tests that Unicode code-points that have 8 to 11 bits are encoded
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:611:  // 000 1101 0011 => 110-00011 10-010011
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:613:  EXPECT_STREQ("\xC3\x93", WideStringToUtf8(L"\xD3", -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:615:  // 101 0111 0110 => 110-10101 10-110110
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:618:  EXPECT_STREQ("\xD5\xB6", WideStringToUtf8(s, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:621:// Tests that Unicode code-points that have 12 to 16 bits are encoded
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:624:  // 0000 1000 1101 0011 => 1110-0000 10-100011 10-010011
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:627:  EXPECT_STREQ("\xE0\xA3\x93", WideStringToUtf8(s1, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:629:  // 1100 0111 0100 1101 => 1110-1100 10-011101 10-001101
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:632:  EXPECT_STREQ("\xEC\x9D\x8D", WideStringToUtf8(s2, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:647:// Tests that Unicode code-points that have 17 to 21 bits are encoded
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:649:// on the systems using UTF-16 encoding.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:651:  // 0 0001 0000 1000 1101 0011 => 11110-000 10-010000 10-100011 10-010011
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:653:  EXPECT_STREQ("\xF0\x90\xA3\x93", WideStringToUtf8(L"\x108D3", -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:655:  // 1 0000 1000 0110 0011 0100 => 11110-100 10-001000 10-011000 10-110100
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:657:  EXPECT_STREQ("\xF4\x88\x98\xB4", WideStringToUtf8(L"\x108634", -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:660:// Tests that encoding an invalid code-point generates the expected result.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:663:               WideStringToUtf8(L"\xABCDFF", -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:667:// UTF-16 encoding in the wide strings.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:670:  EXPECT_STREQ("\xF0\x90\x90\x80", WideStringToUtf8(s, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:673:// Tests that encoding an invalid UTF-16 surrogate pair
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:678:  EXPECT_STREQ("\xED\xA0\x80", WideStringToUtf8(s1, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:681:  EXPECT_STREQ("\xED\xA0\x80M", WideStringToUtf8(s2, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:684:  EXPECT_STREQ("\xED\xB0\x80PQR", WideStringToUtf8(s3, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:699:      WideStringToUtf8(s, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:706:      WideStringToUtf8(s, -1).c_str());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:763:  v.push_back(-1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:768:  v.push_back(-10);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:805:  EXPECT_EQ('x', GetElementOr(a, -2, 'x'));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:817:      ShuffleRange(&random, -1, 1, &a),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:818:      "Invalid shuffle range start -1: must be in range \\[0, 3\\]");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:903:  ShuffleRange(&random_, kVectorSize - 1, kVectorSize - 1, &vector_);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:925:  ShuffleRange(&random_, kVectorSize - 1, kVectorSize, &vector_);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:939:  // there are no off-by-one problems in our shuffle algorithm.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:941:  EXPECT_NE(kVectorSize - 1, vector_[kVectorSize - 1]);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1081:// AddFatalFailure() and AddNonfatalFailure() must be stand-alone
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1089:  ADD_FAILURE() << "Expected non-fatal failure.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1196:# pragma option push -w-ccc
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1199:// Tests that EXPECT_FATAL_FAILURE() can be used in a non-void
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1261:                          "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1267:                          ::string("Expected non-fatal failure."));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1273:                          ::std::string("Expected non-fatal failure."));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1278:  // non-fatal failures generated on another thread.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1280:                                         "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1310:      AddFailureInOtherThread(NONFATAL_FAILURE), "Expected non-fatal failure.");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1354:                             -1,  // This line number means "unknown"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1365:    // We cast it to a non-const object s.t. it can be modified (yes,
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1375:    results1->push_back(*pr1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1378:    results2->push_back(*pr1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1379:    results2->push_back(*pr2);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1408:  ASSERT_EQ(0, r0->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1409:  ASSERT_EQ(1, r1->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1410:  ASSERT_EQ(2, r2->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1415:  ASSERT_TRUE(r0->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1416:  ASSERT_TRUE(r1->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1417:  ASSERT_FALSE(r2->Passed());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1422:  ASSERT_FALSE(r0->Failed());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1423:  ASSERT_FALSE(r1->Failed());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1424:  ASSERT_TRUE(r2->Failed());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1432:  CompareTestPartResult(*pr1, r2->GetTestPartResult(0));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1433:  CompareTestPartResult(*pr2, r2->GetTestPartResult(1));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1434:  EXPECT_DEATH_IF_SUPPORTED(r2->GetTestPartResult(2), "");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1435:  EXPECT_DEATH_IF_SUPPORTED(r2->GetTestPartResult(-1), "");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1518:  EXPECT_DEATH_IF_SUPPORTED(test_result.GetTestProperty(-1), "");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1647:  putenv(const_cast<char*>(added_env[name]->c_str()));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1684:  SetEnv(GTEST_FLAG_PREFIX_UPPER_ "TEMP", "-12345678987654321");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1709:  SetEnv(GTEST_FLAG_PREFIX_UPPER_ "TEMP", "-321");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1710:  EXPECT_EQ(-321, Int32FromGTestEnv("temp", 0));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1720:  EXPECT_FALSE(ParseInt32Flag("--a=100", "b", &value));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1733:  EXPECT_FALSE(ParseInt32Flag("--abc=12345678987654321", "abc", &value));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1736:  EXPECT_FALSE(ParseInt32Flag("--abc=-12345678987654321", "abc", &value));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1747:  EXPECT_FALSE(ParseInt32Flag("--abc=A1", "abc", &value));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1750:  EXPECT_FALSE(ParseInt32Flag("--abc=12X", "abc", &value));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1759:  EXPECT_TRUE(ParseInt32Flag("--" GTEST_FLAG_PREFIX_ "abc=456", "abc", &value));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1762:  EXPECT_TRUE(ParseInt32Flag("--" GTEST_FLAG_PREFIX_ "abc=-789",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1764:  EXPECT_EQ(-789, value);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1775:  SetEnv(GTEST_FLAG_PREFIX_UPPER_ "UnsetVar", "-123");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1776:  EXPECT_EQ(-123, Int32FromEnvOrDie(GTEST_FLAG_PREFIX_UPPER_ "UnsetVar", 333));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1874:  SetEnv(total_var_, "-2");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1895:    int prev_selected_shard_index = -1;
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1931:  ASSERT_TRUE(UnitTest::GetInstance()->original_working_dir() != NULL);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1932:  EXPECT_STRNE(UnitTest::GetInstance()->original_working_dir(), "");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1936:  EXPECT_LT(0, UnitTest::GetInstance()->start_timestamp());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1937:  EXPECT_LE(UnitTest::GetInstance()->start_timestamp(), GetTimeInMillis());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1941:// tests that a non-fatal failure is added, a fatal failure is not added,
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1952:  const TestInfo* test_info = UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1954:  ExpectNonFatalFailureRecordingPropertyWithReservedKey(*test_info->result(),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1960:  const TestCase* test_case = UnitTest::GetInstance()->current_test_case();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1963:      test_case->ad_hoc_test_result(), key);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1969:      UnitTest::GetInstance()->ad_hoc_test_result(), key);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1993:    const TestCase* test_case = UnitTest::GetInstance()->current_test_case();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1996:    ASSERT_EQ(1, test_case->ad_hoc_test_result().test_property_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:1998:                 test_case->ad_hoc_test_result().GetTestProperty(0).key());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2000:                 test_case->ad_hoc_test_result().GetTestProperty(0).value());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2108:// First, some predicates and predicate-formatters needed by the tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2120:// A predicate-formatter function that asserts the argument is an even
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2151:// A predicate-formatter functor that asserts the argument is an even
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2172:// A predicate-formatter function that asserts the sum of the
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2189:// A predicate-formatter functor that asserts the sum of the arguments
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2365:  // C++Builder requires C-style casts rather than static_cast.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2373:  EXPECT_PRED1(IsNegative<int>, -5);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2416:  EXPECT_PRED_FORMAT1(IsNegativeFormat, -5);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2423:// Tests ASSERT_STREQ with non-NULL arguments.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2439:  EXPECT_FATAL_FAILURE(ASSERT_STREQ(NULL, "non-null"),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2440:                       "non-null");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2445:  EXPECT_FATAL_FAILURE(ASSERT_STREQ("non-null", NULL),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2446:                       "non-null");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2493:  // Non-null vs NULL.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2494:  EXPECT_NONFATAL_FAILURE(EXPECT_STREQ(L"non-null", NULL),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2495:                          "non-null");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2525:  // Non-null vs NULL.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2526:  ASSERT_STRNE(L"non-null", NULL);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2666:// Tests floating-point assertions.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2671:  // Pre-calculated numbers to be used by the tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2700:    values_.close_to_negative_zero = -Floating::ReinterpretBits(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2701:        zero_bits + max_ulps - max_ulps/2);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2702:    values_.further_from_negative_zero = -Floating::ReinterpretBits(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2703:        zero_bits + max_ulps + 1 - max_ulps/2);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2721:        infinity_bits - max_ulps);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2723:        infinity_bits - max_ulps - 1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2729:        | (static_cast<Bits>(1) << (Floating::kFractionBitCount - 1)) | 1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2731:        | (static_cast<Bits>(1) << (Floating::kFractionBitCount - 1)) | 200);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2753:// Tests comparing with +0 and -0.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2755:  EXPECT_FLOAT_EQ(0.0, -0.0);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2756:  EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(-0.0, 1.0),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2774:  static const FloatTest::TestValues& v = this->values_;
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2777:  EXPECT_FLOAT_EQ(-0.0, v.close_to_negative_zero);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2805:  EXPECT_FLOAT_EQ(-values_.infinity, -values_.close_to_infinity);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2808:  EXPECT_NONFATAL_FAILURE(EXPECT_FLOAT_EQ(values_.infinity, -values_.infinity),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2809:                          "-values_.infinity");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2829:  static const FloatTest::TestValues& v = this->values_;
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2862:  EXPECT_NEAR(-1.0f, -1.1f, 0.2f);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2873:  ASSERT_NEAR(-1.0f, -1.1f, 0.2f);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2897:  // or by a small yet non-negligible margin,
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2910:    EXPECT_PRED_FORMAT2(FloatLE, -values_.infinity, values_.nan1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2911:  }, "(-values_.infinity) <= (values_.nan1)");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2926:// Tests comparing with +0 and -0.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2928:  EXPECT_DOUBLE_EQ(0.0, -0.0);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2929:  EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(-0.0, 1.0),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2947:  static const DoubleTest::TestValues& v = this->values_;
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2950:  EXPECT_DOUBLE_EQ(-0.0, v.close_to_negative_zero);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2978:  EXPECT_DOUBLE_EQ(-values_.infinity, -values_.close_to_infinity);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2981:  EXPECT_NONFATAL_FAILURE(EXPECT_DOUBLE_EQ(values_.infinity, -values_.infinity),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:2982:                          "-values_.infinity");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3000:  static const DoubleTest::TestValues& v = this->values_;
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3034:  EXPECT_NEAR(-1.0, -1.1, 0.2);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3045:  ASSERT_NEAR(-1.0, -1.1, 0.2);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3069:  // or by a small yet non-negligible margin,
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3082:    EXPECT_PRED_FORMAT2(DoubleLE, -values_.infinity, values_.nan1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3083:  }, " (-values_.infinity) <= (values_.nan1)");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3168:// Tests that disabled type-parameterized tests aren't run.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3180:         << "Disabled type-parameterized test should not run.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3195:         << "Disabled type-parameterized test should not run.";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3284:  EXPECT_NONFATAL_FAILURE(EXPECT_TRUE(-1 == a_++), "-1 == a_++");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3363:    ADD_FAILURE() << "some non-fatal failure";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3388:      "some non-fatal failure");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3391:      "some non-fatal failure");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3449:// Tests non-string assertions.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3454:    static const char kEdits[] = " +-/";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3492:      {__LINE__, "XA", "X", " -", "@@ -1,2 @@\n X\n-A\n"},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3493:      {__LINE__, "XABCD", "X", " ----", "@@ -1,5 @@\n X\n-A\n-B\n-C\n-D\n"},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3495:      {__LINE__, "A", "a", "/", "@@ -1,1 +1,1 @@\n-A\n+a\n"},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3497:       "@@ -1,4 +1,4 @@\n-A\n-B\n-C\n-D\n+a\n+b\n+c\n+d\n"},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3499:      {__LINE__, "ABCDEFGH", "ABXEGH1", "  -/ -  +",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3500:       "@@ -1,8 +1,7 @@\n A\n B\n-C\n-D\n+X\n E\n-F\n G\n H\n+1\n"},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3501:      {__LINE__, "AAAABCCCC", "ABABCDCDC", "- /   + / ",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3502:       "@@ -1,9 +1,9 @@\n-A\n A\n-A\n+B\n A\n B\n C\n+D\n C\n-C\n+D\n C\n"},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3503:      {__LINE__, "ABCDE", "BCDCD", "-   +/",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3504:       "@@ -1,5 +1,5 @@\n-A\n B\n C\n D\n-E\n+C\n+D\n"},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3505:      {__LINE__, "ABCDEFGHIJKL", "BCDCDEFGJKLJK", "- ++     --   ++",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3506:       "@@ -1,4 +1,5 @@\n-A\n B\n+C\n+D\n C\n D\n"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3507:       "@@ -6,7 +7,7 @@\n F\n G\n-H\n-I\n J\n K\n L\n+J\n+K\n"},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3509:  for (const Case* c = kCases; c->left; ++c) {
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3510:    EXPECT_TRUE(c->expected_edits ==
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3511:                EditsToString(CalculateOptimalEdits(CharsToIndices(c->left),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3512:                                                    CharsToIndices(c->right))))
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3513:        << "Left <" << c->left << "> Right <" << c->right << "> Edits <"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3515:               CharsToIndices(c->left), CharsToIndices(c->right))) << ">";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3516:    EXPECT_TRUE(c->expected_diff == CreateUnifiedDiff(CharsToLines(c->left),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3517:                                                      CharsToLines(c->right)))
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3518:        << "Left <" << c->left << "> Right <" << c->right << "> Diff <"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3519:        << CreateUnifiedDiff(CharsToLines(c->left), CharsToLines(c->right))
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3588:      "With diff:\n@@ -1,5 +1,6 @@\n 1\n-2XXX\n+2\n 3\n+4\n 5\n 6\n"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3589:      "@@ -7,8 +8,6 @@\n 8\n 9\n-10\n 11\n-12XXX\n+12\n 13\n 14\n-15\n",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3608:# pragma option push -w-ccc -w-rch
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3847:  Uncopyable y(-1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3853:  Uncopyable y(-1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3863:    "IsPositiveUncopyable(y) evaluates to false, where\ny evaluates to -1");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3865:    "Expected: x\n      Which is: 5\nTo be equal to: y\n      Which is: -1");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3872:  Uncopyable y(-1);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3874:    "IsPositiveUncopyable(y) evaluates to false, where\ny evaluates to -1");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3877:    "Expected: x\n      Which is: 5\nTo be equal to: y\n      Which is: -1");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3900:  kCaseA = -1,
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3940:                          "-1 vs 42");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3959:                       "Which is: -1");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:3978:// HRESULT assertion tests test both zero and non-zero
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4059:# pragma option push -w-ccc -w-rch
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4197:  EXPECT_EQ(2, GetUnitTestImpl()->current_test_result()->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4203:  EXPECT_EQ(0, GetUnitTestImpl()->current_test_result()->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4209:  EXPECT_EQ(0, GetUnitTestImpl()->current_test_result()->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4215:  EXPECT_EQ(0, GetUnitTestImpl()->current_test_result()->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4221:  EXPECT_EQ(0, GetUnitTestImpl()->current_test_result()->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4396:  EXPECT_NONFATAL_FAILURE(EXPECT_EQ(5, 2 - 3),
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4397:                          "2 - 3");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4460:  // a direct C-style to char*.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4553:// Tests using StreamableToString() on a non-char pointer.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4560:// Tests using StreamableToString() on a NULL non-char pointer.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4594:                                           - 1);  // drops the trailing NUL
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4650:  // the failure message contains the user-streamed part.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4653:  // Verifies that the user-streamed part is optional.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4876:  // a direct C-style to char*.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4898:  // a direct C-style to char*.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4965:  EXPECT_NONFATAL_FAILURE(EXPECT_EQ(x, y), "1-byte object <78>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4966:  EXPECT_NONFATAL_FAILURE(EXPECT_EQ(x, y), "1-byte object <79>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4967:  EXPECT_NONFATAL_FAILURE(EXPECT_LT(y, y), "1-byte object <79>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4968:  EXPECT_NONFATAL_FAILURE(EXPECT_GT(x, y), "1-byte object <78>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4969:  EXPECT_NONFATAL_FAILURE(EXPECT_GT(x, y), "1-byte object <79>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4976:                       "1-byte object <78>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4978:                       "1-byte object <78>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4981:                       "1-byte object <79>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4983:                       "1-byte object <78>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:4985:                       "1-byte object <79>");
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5037:  ~TestLifeCycleTest() { count_--; }
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5128:// The next test uses explicit conversion operators -- a C++11 feature.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5168:  return os << "(" << pointer->x() << ")";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5192:  return os << "(" << pointer->x() << ")";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5217:  return os << "(" << pointer->x() << ")";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5243:  return os << "(" << pointer->x() << ")";
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5281:  // Streams a non-NULL of type const wchar_t*.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5286:  // Streams a non-NULL of type wchar_t*.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5301:    const TestCase* const test_case = GetUnitTestImpl()->
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5304:    for (int i = 0; i < test_case->total_test_count(); ++i) {
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5305:      const TestInfo* const test_info = test_case->GetTestInfo(i);
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5306:      if (strcmp(test_name, test_info->name()) == 0)
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5314:    return test_info->result();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5322:  ASSERT_STREQ("TestInfoTest", test_info->test_case_name());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5323:  ASSERT_STREQ("Names", test_info->name());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5331:  ASSERT_EQ(0, GetTestResult(test_info)->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5334:  ASSERT_EQ(0, GetTestResult(test_info)->total_part_count());
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5338:  const int expected_line = __LINE__ - 1; \
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5339:  const TestInfo* const test_info = GetUnitTestImpl()->current_test_info(); \
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5341:  EXPECT_STREQ(__FILE__, test_info->file()); \
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5342:  EXPECT_EQ(expected_line, test_info->line())
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5417:    counter_--;
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5706:  TestParsingFlags(sizeof(argv1)/sizeof(*argv1) - 1, argv1, \
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5707:                   sizeof(argv2)/sizeof(*argv2) - 1, argv2, \
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5739:// Tests parsing a bad --gtest_filter flag.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5743:    "--gtest_filter",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5749:    "--gtest_filter",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5756:// Tests parsing an empty --gtest_filter flag.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5760:    "--gtest_filter=",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5772:// Tests parsing a non-empty --gtest_filter flag.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5776:    "--gtest_filter=abc",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5788:// Tests parsing --gtest_break_on_failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5792:    "--gtest_break_on_failure",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5804:// Tests parsing --gtest_break_on_failure=0.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5808:    "--gtest_break_on_failure=0",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5820:// Tests parsing --gtest_break_on_failure=f.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5824:    "--gtest_break_on_failure=f",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5836:// Tests parsing --gtest_break_on_failure=F.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5840:    "--gtest_break_on_failure=F",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5852:// Tests parsing a --gtest_break_on_failure flag that has a "true"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5857:    "--gtest_break_on_failure=1",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5869:// Tests parsing --gtest_catch_exceptions.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5873:    "--gtest_catch_exceptions",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5885:// Tests parsing --gtest_death_test_use_fork.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5889:    "--gtest_death_test_use_fork",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5906:    "--gtest_filter=a",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5907:    "--gtest_filter=b",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5923:    "--gtest_break_on_failure",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5925:    "--gtest_filter=b",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5941:// Tests having a --gtest_list_tests flag
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5945:      "--gtest_list_tests",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5957:// Tests having a --gtest_list_tests flag with a "true" value
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5961:      "--gtest_list_tests=1",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5973:// Tests having a --gtest_list_tests flag with a "false" value
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5977:      "--gtest_list_tests=0",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5989:// Tests parsing --gtest_list_tests=f.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:5993:    "--gtest_list_tests=f",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6005:// Tests parsing --gtest_list_tests=F.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6009:    "--gtest_list_tests=F",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6021:// Tests parsing --gtest_output (invalid).
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6025:    "--gtest_output",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6031:    "--gtest_output",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6038:// Tests parsing --gtest_output=xml
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6042:    "--gtest_output=xml",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6054:// Tests parsing --gtest_output=xml:file
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6058:    "--gtest_output=xml:file",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6070:// Tests parsing --gtest_output=xml:directory/path/
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6074:    "--gtest_output=xml:directory/path/",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6087:// Tests having a --gtest_print_time flag
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6091:      "--gtest_print_time",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6103:// Tests having a --gtest_print_time flag with a "true" value
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6107:      "--gtest_print_time=1",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6119:// Tests having a --gtest_print_time flag with a "false" value
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6123:      "--gtest_print_time=0",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6135:// Tests parsing --gtest_print_time=f.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6139:    "--gtest_print_time=f",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6151:// Tests parsing --gtest_print_time=F.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6155:    "--gtest_print_time=F",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6167:// Tests parsing --gtest_random_seed=number
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6171:    "--gtest_random_seed=1000",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6183:// Tests parsing --gtest_repeat=number
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6187:    "--gtest_repeat=1000",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6199:// Tests having a --gtest_also_run_disabled_tests flag
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6203:      "--gtest_also_run_disabled_tests",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6216:// Tests having a --gtest_also_run_disabled_tests flag with a "true" value
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6220:      "--gtest_also_run_disabled_tests=1",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6233:// Tests having a --gtest_also_run_disabled_tests flag with a "false" value
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6237:      "--gtest_also_run_disabled_tests=0",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6250:// Tests parsing --gtest_shuffle.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6254:    "--gtest_shuffle",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6266:// Tests parsing --gtest_shuffle=0.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6270:    "--gtest_shuffle=0",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6282:// Tests parsing a --gtest_shuffle flag that has a "true"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6287:    "--gtest_shuffle=1",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6299:// Tests parsing --gtest_stack_trace_depth=number.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6303:    "--gtest_stack_trace_depth=5",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6318:    "--gtest_stream_result_to=localhost:1234",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6331:// Tests parsing --gtest_throw_on_failure.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6335:    "--gtest_throw_on_failure",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6347:// Tests parsing --gtest_throw_on_failure=0.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6351:    "--gtest_throw_on_failure=0",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6363:// Tests parsing a --gtest_throw_on_failure flag that has a "true"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6368:    "--gtest_throw_on_failure=1",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6385:    L"--gtest_filter=Foo*",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6386:    L"--gtest_list_tests=1",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6387:    L"--gtest_break_on_failure",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6388:    L"--non_gtest_flag",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6394:    L"--non_gtest_flag",
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6442:      std::string("--" GTEST_FLAG_PREFIX_ "flagfile=") + flagfile_path.c_str();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6458:// Tests passing a non-empty --gtest_filter flag via --gtest_flagfile.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6461:      "--"  GTEST_FLAG_PREFIX_  "filter=abc"));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6463:      std::string("--" GTEST_FLAG_PREFIX_ "flagfile=") + flagfile_path.c_str();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6479:// Tests passing several flags via --gtest_flagfile.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6482:      "--"  GTEST_FLAG_PREFIX_  "filter=abc\n"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6483:      "--"  GTEST_FLAG_PREFIX_  "break_on_failure\n"
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6484:      "--"  GTEST_FLAG_PREFIX_  "list_tests"));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6486:      std::string("--" GTEST_FLAG_PREFIX_ "flagfile=") + flagfile_path.c_str();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6516:      UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6525:      UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6535:    UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6538:  EXPECT_STREQ("CurrentTestInfoTest", test_info->test_case_name())
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6540:  EXPECT_STREQ("WorksForFirstTestInATestCase", test_info->name())
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6550:    UnitTest::GetInstance()->current_test_info();
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6553:  EXPECT_STREQ("CurrentTestInfoTest", test_info->test_case_name())
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6555:  EXPECT_STREQ("WorksForSecondTestInATestCase", test_info->name())
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6593:// Tests that one can call superclass SetUp and TearDown methods--
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6619:# pragma option push -w-ccc -w-rch
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6814:  // On non-Windows platforms, we rely on TERM to determine if the
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6826:  SetEnv("TERM", "xterm-mono");  // TERM doesn't support colors.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6832:  SetEnv("TERM", "xterm-color");  // TERM supports colors.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6835:  SetEnv("TERM", "xterm-256color");  // TERM supports colors.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6841:  SetEnv("TERM", "screen-256color");  // TERM supports colors.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6847:  SetEnv("TERM", "tmux-256color");  // TERM supports colors.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6850:  SetEnv("TERM", "rxvt-unicode");  // TERM supports colors.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:6853:  SetEnv("TERM", "rxvt-unicode-256color");  // TERM supports colors.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7050:    TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7067:    vector_->push_back(GetEventDescription("OnTestProgramStart"));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7071:    vector_->push_back(GetEventDescription("OnTestProgramEnd"));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7076:    vector_->push_back(GetEventDescription("OnTestIterationStart"));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7081:    vector_->push_back(GetEventDescription("OnTestIterationEnd"));
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7104:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7112:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramEnd(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7120:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestIterationStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7128:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestIterationEnd(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7149:    TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7168:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7178:          *GetUnitTestImpl()->listeners())) << "expected failure";},
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7195:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7209:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7232:    TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7254:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7268:  TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7291:    TestEventListenersAccessor::GetRepeater(&listeners)->OnTestProgramStart(
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7355:// Tests that IsAProtocolMessage<T>::value is a compile-time constant.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7363:// proto2::Message or a sub-class of it.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7370:// ProtocolMessage nor a sub-class of it.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7383:// Tests that RemoveReference does not affect non-reference types.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7408:// Tests that RemoveConst does not affect non-const types.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7455:// Tests that AddReference adds reference to non-reference types.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7487:// Tests that ImplicitlyConvertible<T1, T2>::value is a compile-time constant.
/Volumes/src/simhub/src/libs/googletest/test/gtest_unittest.cc:7652:  EXPECT_EQ(3, na.end() - na.begin());
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_outfiles_test.py:47:EXPECTED_XML_1 = """<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_outfiles_test.py:55:EXPECTED_XML_2 = """<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_outfiles_test.py:100:    command = [gtest_prog_path, "--gtest_output=xml:%s" % self.output_dir_]
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_outfiles_test.py:107:    #   named lt-gtest_xml_outfiles_test_ instead of
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_outfiles_test.py:113:    output_file_name2 = 'lt-' + output_file_name1
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:47:GTEST_FILTER_FLAG = '--gtest_filter'
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:48:GTEST_LIST_TESTS_FLAG = '--gtest_list_tests'
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:49:GTEST_OUTPUT_FLAG         = "--gtest_output"
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:60:EXPECTED_NON_EMPTY_XML = """<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:86:      <failure message="gtest_xml_output_unittest_.cc:*&#x0A;Failed&#x0A;XML output: &lt;?xml encoding=&quot;utf-8&quot;&gt;&lt;top&gt;&lt;![CDATA[cdata text]]&gt;&lt;/top&gt;" type=""><![CDATA[gtest_xml_output_unittest_.cc:*
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:88:XML output: <?xml encoding="utf-8"><top><![CDATA[cdata text]]>]]&gt;<![CDATA[</top>%(stack)s]]></failure>
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:132:EXPECTED_FILTERED_TEST_XML = """<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:141:EXPECTED_EMPTY_XML = """<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:158:  # type-parameterized tests, so we don't run it under them.
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:162:      Runs a test program that generates a non-empty XML output, and
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:186:    match = re.match(r'(\d+)-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d)', date_time_str)
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:195:    time_delta = abs(datetime.datetime.now() - date_time_from_xml)
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:237:               '--shut_down_xml']
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest.py:257:    non-selected tests do not show up in the XML output.
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest_.cc:35:// either the GTEST_OUTPUT environment variable or the --gtest_output
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest_.cc:88:            "<?xml encoding=\"utf-8\"><top><![CDATA[cdata text]]></top>";
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest_.cc:144:// XML attribute for value-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest_.cc:161:// XML attribute for type-parameterized tests.
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest_.cc:175:  if (argc > 1 && strcmp(argv[1], "--shut_down_xml") == 0) {
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_output_unittest_.cc:176:    TestEventListeners& listeners = UnitTest::GetInstance()->listeners();
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_test_utils.py:42:GTEST_OUTPUT_FLAG         = '--gtest_output'
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_test_utils.py:62:       convertible to a floating-point number and any attribute named
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_test_utils.py:63:       "type_param" which only has to be non-empty.
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_test_utils.py:123:    the value of the "message" attribute; CDATA sections and non-whitespace
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_test_utils.py:161:       single asterisk (if it sn non-empty) as it is the type name returned
/Volumes/src/simhub/src/libs/googletest/test/gtest_xml_test_utils.py:172:      timestamp.value = re.sub(r'^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d$',
/Volumes/src/simhub/src/libs/googletest/xcode/Config/DebugProject.xcconfig:8://  http://code.google.com/p/google-toolbox-for-mac/
/Volumes/src/simhub/src/libs/googletest/xcode/Config/DebugProject.xcconfig:26:OTHER_CFLAGS = $(OTHER_CFLAGS) -DDEBUG=1
/Volumes/src/simhub/src/libs/googletest/xcode/Config/FrameworkTarget.xcconfig:7://  http://code.google.com/p/google-toolbox-for-mac/
/Volumes/src/simhub/src/libs/googletest/xcode/Config/FrameworkTarget.xcconfig:14:STRIP_STYLE = non-global
/Volumes/src/simhub/src/libs/googletest/xcode/Config/General.xcconfig:7://  http://code.google.com/p/google-toolbox-for-mac/
/Volumes/src/simhub/src/libs/googletest/xcode/Config/General.xcconfig:10:// Build for PPC and Intel, 32- and 64-bit
/Volumes/src/simhub/src/libs/googletest/xcode/Config/General.xcconfig:20:WARNING_CFLAGS = -Wall -Werror -Wendif-labels -Wnewline-eof -Wno-sign-compare -Wshadow
/Volumes/src/simhub/src/libs/googletest/xcode/Config/General.xcconfig:23:// http://lists.apple.com/archives/Xcode-users/2006/Feb/msg00050.html
/Volumes/src/simhub/src/libs/googletest/xcode/Config/ReleaseProject.xcconfig:8://  http://code.google.com/p/google-toolbox-for-mac/
/Volumes/src/simhub/src/libs/googletest/xcode/Config/ReleaseProject.xcconfig:29:OTHER_CFLAGS = $(OTHER_CFLAGS) -DNDEBUG=1 -Wno-unused-variable
/Volumes/src/simhub/src/libs/googletest/xcode/Config/StaticLibraryTarget.xcconfig:7://  http://code.google.com/p/google-toolbox-for-mac/
/Volumes/src/simhub/src/libs/googletest/xcode/Resources/Info.plist:1:<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/xcode/Resources/Info.plist:2:<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/Info.plist:1:<?xml version="1.0" encoding="UTF-8"?>
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/Info.plist:2:<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/WidgetFramework.xcodeproj/project.pbxproj:77:		3B07BDEA0E3F3F9E00647869 /* WidgetFrameworkTest */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = WidgetFrameworkTest; sourceTree = BUILT_PRODUCTS_DIR; };
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/WidgetFramework.xcodeproj/project.pbxproj:202:			productType = "com.apple.product-type.tool";
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/WidgetFramework.xcodeproj/project.pbxproj:222:			productType = "com.apple.product-type.framework";
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/runtests.sh:48:  if [ $result -eq 0 ]; then
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/runtests.sh:58:if [ $failed -ne 0 ]; then
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/widget.cc:32:// Google Test - FrameworkSample
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/widget.cc:60:  strncpy(buffer, name_.c_str(), max_size-1);
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/widget.cc:61:  buffer[max_size-1] = '\0';
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/widget.h:32:// Google Test - FrameworkSample
/Volumes/src/simhub/src/libs/googletest/xcode/Samples/FrameworkSample/widget_test.cc:32:// Google Test - FrameworkSample
/Volumes/src/simhub/src/libs/googletest/xcode/Scripts/runtests.sh:39:test_executables=("$BUILT_PRODUCTS_DIR/gtest_unittest-framework"
/Volumes/src/simhub/src/libs/googletest/xcode/Scripts/runtests.sh:41:                  "$BUILT_PRODUCTS_DIR/sample1_unittest-framework"
/Volumes/src/simhub/src/libs/googletest/xcode/Scripts/runtests.sh:42:                  "$BUILT_PRODUCTS_DIR/sample1_unittest-static")
/Volumes/src/simhub/src/libs/googletest/xcode/Scripts/runtests.sh:51:  if [ $result -eq 0 ]; then
/Volumes/src/simhub/src/libs/googletest/xcode/Scripts/runtests.sh:61:if [ $failed -ne 0 ]; then
/Volumes/src/simhub/src/libs/googletest/xcode/Scripts/versiongenerate.py:73:#     (*? is the non-greedy flag) since that would pull in everything between
/Volumes/src/simhub/src/libs/googletest/xcode/Scripts/versiongenerate.py:89:// header file is not used during compilation of C-source. Rather, it simply
/Volumes/src/simhub/src/libs/googletest/xcode/Scripts/versiongenerate.py:91:// this, we are not not restricted to C-syntax nor are we using include guards.
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:40:		224A12A30E9EADCC00BD17FD /* gtest-test-part.h in Headers */ = {isa = PBXBuildFile; fileRef = 224A12A20E9EADCC00BD17FD /* gtest-test-part.h */; settings = {ATTRIBUTES = (Public, ); }; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:41:		3BF6F2A00E79B5AD000F2EEE /* gtest-type-util.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 3BF6F29F0E79B5AD000F2EEE /* gtest-type-util.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:42:		3BF6F2A50E79B616000F2EEE /* gtest-typed-test.h in Headers */ = {isa = PBXBuildFile; fileRef = 3BF6F2A40E79B616000F2EEE /* gtest-typed-test.h */; settings = {ATTRIBUTES = (Public, ); }; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:43:		404884380E2F799B00CF7658 /* gtest-death-test.h in Headers */ = {isa = PBXBuildFile; fileRef = 404883DB0E2F799B00CF7658 /* gtest-death-test.h */; settings = {ATTRIBUTES = (Public, ); }; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:44:		404884390E2F799B00CF7658 /* gtest-message.h in Headers */ = {isa = PBXBuildFile; fileRef = 404883DC0E2F799B00CF7658 /* gtest-message.h */; settings = {ATTRIBUTES = (Public, ); }; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:45:		4048843A0E2F799B00CF7658 /* gtest-spi.h in Headers */ = {isa = PBXBuildFile; fileRef = 404883DD0E2F799B00CF7658 /* gtest-spi.h */; settings = {ATTRIBUTES = (Public, ); }; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:50:		404884A00E2F7BE600CF7658 /* gtest-death-test-internal.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 404883E20E2F799B00CF7658 /* gtest-death-test-internal.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:51:		404884A10E2F7BE600CF7658 /* gtest-filepath.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 404883E30E2F799B00CF7658 /* gtest-filepath.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:52:		404884A20E2F7BE600CF7658 /* gtest-internal.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 404883E40E2F799B00CF7658 /* gtest-internal.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:53:		404884A30E2F7BE600CF7658 /* gtest-port.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 404883E50E2F799B00CF7658 /* gtest-port.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:54:		404884A40E2F7BE600CF7658 /* gtest-string.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 404883E60E2F799B00CF7658 /* gtest-string.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:58:		40899F3A0FFA70D4000B29AE /* gtest-all.cc in Sources */ = {isa = PBXBuildFile; fileRef = 224A12A10E9EADA700BD17FD /* gtest-all.cc */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:59:		40899F500FFA7281000B29AE /* gtest-tuple.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 40899F4D0FFA7271000B29AE /* gtest-tuple.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:63:		40C848FF101A21150083642A /* gtest-all.cc in Sources */ = {isa = PBXBuildFile; fileRef = 224A12A10E9EADA700BD17FD /* gtest-all.cc */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:77:		4539C9340EC280AE00A70F4C /* gtest-param-test.h in Headers */ = {isa = PBXBuildFile; fileRef = 4539C9330EC280AE00A70F4C /* gtest-param-test.h */; settings = {ATTRIBUTES = (Public, ); }; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:78:		4539C9380EC280E200A70F4C /* gtest-linked_ptr.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 4539C9350EC280E200A70F4C /* gtest-linked_ptr.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:79:		4539C9390EC280E200A70F4C /* gtest-param-util-generated.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 4539C9360EC280E200A70F4C /* gtest-param-util-generated.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:80:		4539C93A0EC280E200A70F4C /* gtest-param-util.h in Copy Headers Internal */ = {isa = PBXBuildFile; fileRef = 4539C9370EC280E200A70F4C /* gtest-param-util.h */; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:81:		4567C8181264FF71007740BE /* gtest-printers.h in Headers */ = {isa = PBXBuildFile; fileRef = 4567C8171264FF71007740BE /* gtest-printers.h */; settings = {ATTRIBUTES = (Public, ); }; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:104:			remoteInfo = "gtest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:118:			remoteInfo = "gtest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:125:			remoteInfo = "gtest_main-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:132:			remoteInfo = "gtest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:139:			remoteInfo = "gtest_main-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:146:			remoteInfo = "gtest_main-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:153:			remoteInfo = "gtest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:160:			remoteInfo = "gtest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:167:			remoteInfo = "gtest_unittest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:174:			remoteInfo = "sample1_unittest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:185:				404884A00E2F7BE600CF7658 /* gtest-death-test-internal.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:186:				404884A10E2F7BE600CF7658 /* gtest-filepath.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:187:				404884A20E2F7BE600CF7658 /* gtest-internal.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:188:				4539C9380EC280E200A70F4C /* gtest-linked_ptr.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:189:				4539C9390EC280E200A70F4C /* gtest-param-util-generated.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:190:				4539C93A0EC280E200A70F4C /* gtest-param-util.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:191:				404884A30E2F7BE600CF7658 /* gtest-port.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:192:				404884A40E2F7BE600CF7658 /* gtest-string.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:193:				40899F500FFA7281000B29AE /* gtest-tuple.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:194:				3BF6F2A00E79B5AD000F2EEE /* gtest-type-util.h in Copy Headers Internal */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:202:		224A12A10E9EADA700BD17FD /* gtest-all.cc */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.cpp.cpp; path = "gtest-all.cc"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:203:		224A12A20E9EADCC00BD17FD /* gtest-test-part.h */ = {isa = PBXFileReference; fileEncoding = 30; lastKnownFileType = sourcecode.c.h; path = "gtest-test-part.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:206:		3BF6F29F0E79B5AD000F2EEE /* gtest-type-util.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-type-util.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:207:		3BF6F2A40E79B616000F2EEE /* gtest-typed-test.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-typed-test.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:209:		404883DB0E2F799B00CF7658 /* gtest-death-test.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-death-test.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:210:		404883DC0E2F799B00CF7658 /* gtest-message.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-message.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:211:		404883DD0E2F799B00CF7658 /* gtest-spi.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-spi.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:215:		404883E20E2F799B00CF7658 /* gtest-death-test-internal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-death-test-internal.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:216:		404883E30E2F799B00CF7658 /* gtest-filepath.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-filepath.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:217:		404883E40E2F799B00CF7658 /* gtest-internal.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-internal.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:218:		404883E50E2F799B00CF7658 /* gtest-port.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-port.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:219:		404883E60E2F799B00CF7658 /* gtest-string.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-string.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:225:		40899F430FFA7184000B29AE /* gtest_unittest-framework */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = "gtest_unittest-framework"; sourceTree = BUILT_PRODUCTS_DIR; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:226:		40899F4D0FFA7271000B29AE /* gtest-tuple.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-tuple.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:228:		4089A0130FFACEFC000B29AE /* sample1_unittest-framework */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = "sample1_unittest-framework"; sourceTree = BUILT_PRODUCTS_DIR; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:234:		40C84987101A36850083642A /* gtest_unittest */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = gtest_unittest; sourceTree = BUILT_PRODUCTS_DIR; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:235:		40C84997101A36A60083642A /* sample1_unittest-static */ = {isa = PBXFileReference; explicitFileType = "compiled.mach-o.executable"; includeInIndex = 0; path = "sample1_unittest-static"; sourceTree = BUILT_PRODUCTS_DIR; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:242:		4539C9330EC280AE00A70F4C /* gtest-param-test.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-param-test.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:243:		4539C9350EC280E200A70F4C /* gtest-linked_ptr.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-linked_ptr.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:244:		4539C9360EC280E200A70F4C /* gtest-param-util-generated.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-param-util-generated.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:245:		4539C9370EC280E200A70F4C /* gtest-param-util.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-param-util.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:246:		4567C8171264FF71007740BE /* gtest-printers.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = "gtest-printers.h"; sourceTree = "<group>"; };
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:295:				40899F430FFA7184000B29AE /* gtest_unittest-framework */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:297:				4089A0130FFACEFC000B29AE /* sample1_unittest-framework */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:298:				40C84997101A36A60083642A /* sample1_unittest-static */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:361:				224A12A20E9EADCC00BD17FD /* gtest-test-part.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:362:				404883DB0E2F799B00CF7658 /* gtest-death-test.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:363:				404883DC0E2F799B00CF7658 /* gtest-message.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:364:				4539C9330EC280AE00A70F4C /* gtest-param-test.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:365:				4567C8171264FF71007740BE /* gtest-printers.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:366:				404883DD0E2F799B00CF7658 /* gtest-spi.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:370:				3BF6F2A40E79B616000F2EEE /* gtest-typed-test.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:378:				404883E20E2F799B00CF7658 /* gtest-death-test-internal.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:379:				404883E30E2F799B00CF7658 /* gtest-filepath.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:380:				404883E40E2F799B00CF7658 /* gtest-internal.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:381:				4539C9350EC280E200A70F4C /* gtest-linked_ptr.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:382:				4539C9360EC280E200A70F4C /* gtest-param-util-generated.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:383:				4539C9370EC280E200A70F4C /* gtest-param-util.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:384:				404883E50E2F799B00CF7658 /* gtest-port.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:385:				404883E60E2F799B00CF7658 /* gtest-string.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:386:				40899F4D0FFA7271000B29AE /* gtest-tuple.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:387:				3BF6F29F0E79B5AD000F2EEE /* gtest-type-util.h */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:395:				224A12A10E9EADA700BD17FD /* gtest-all.cc */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:440:				404884380E2F799B00CF7658 /* gtest-death-test.h in Headers */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:441:				404884390E2F799B00CF7658 /* gtest-message.h in Headers */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:442:				4539C9340EC280AE00A70F4C /* gtest-param-test.h in Headers */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:443:				4567C8181264FF71007740BE /* gtest-printers.h in Headers */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:444:				3BF6F2A50E79B616000F2EEE /* gtest-typed-test.h in Headers */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:445:				4048843A0E2F799B00CF7658 /* gtest-spi.h in Headers */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:449:				224A12A30E9EADCC00BD17FD /* gtest-test-part.h in Headers */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:456:		40899F420FFA7184000B29AE /* gtest_unittest-framework */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:458:			buildConfigurationList = 40899F4A0FFA71BC000B29AE /* Build configuration list for PBXNativeTarget "gtest_unittest-framework" */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:468:			name = "gtest_unittest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:470:			productReference = 40899F430FFA7184000B29AE /* gtest_unittest-framework */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:471:			productType = "com.apple.product-type.tool";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:473:		4089A0120FFACEFC000B29AE /* sample1_unittest-framework */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:475:			buildConfigurationList = 4089A0240FFACF01000B29AE /* Build configuration list for PBXNativeTarget "sample1_unittest-framework" */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:485:			name = "sample1_unittest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:487:			productReference = 4089A0130FFACEFC000B29AE /* sample1_unittest-framework */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:488:			productType = "com.apple.product-type.tool";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:490:		40C848F9101A209C0083642A /* gtest-static */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:492:			buildConfigurationList = 40C84902101A212E0083642A /* Build configuration list for PBXNativeTarget "gtest-static" */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:500:			name = "gtest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:501:			productName = "gtest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:503:			productType = "com.apple.product-type.library.static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:505:		40C8490A101A217E0083642A /* gtest_main-static */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:507:			buildConfigurationList = 40C84912101A21D20083642A /* Build configuration list for PBXNativeTarget "gtest_main-static" */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:515:			name = "gtest_main-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:516:			productName = "gtest_main-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:518:			productType = "com.apple.product-type.library.static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:520:		40C8497A101A36850083642A /* gtest_unittest-static */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:522:			buildConfigurationList = 40C84984101A36850083642A /* Build configuration list for PBXNativeTarget "gtest_unittest-static" */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:533:			name = "gtest_unittest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:536:			productType = "com.apple.product-type.tool";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:538:		40C84989101A36A60083642A /* sample1_unittest-static */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:540:			buildConfigurationList = 40C84994101A36A60083642A /* Build configuration list for PBXNativeTarget "sample1_unittest-static" */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:551:			name = "sample1_unittest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:553:			productReference = 40C84997101A36A60083642A /* sample1_unittest-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:554:			productType = "com.apple.product-type.tool";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:556:		8D07F2BC0486CC7A007CD1D0 /* gtest-framework */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:558:			buildConfigurationList = 4FADC24208B4156D00ABE55E /* Build configuration list for PBXNativeTarget "gtest-framework" */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:572:			name = "gtest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:576:			productType = "com.apple.product-type.framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:602:				8D07F2BC0486CC7A007CD1D0 /* gtest-framework */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:603:				40C848F9101A209C0083642A /* gtest-static */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:604:				40C8490A101A217E0083642A /* gtest_main-static */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:605:				40899F420FFA7184000B29AE /* gtest_unittest-framework */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:606:				40C8497A101A36850083642A /* gtest_unittest-static */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:607:				4089A0120FFACEFC000B29AE /* sample1_unittest-framework */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:608:				40C84989101A36A60083642A /* sample1_unittest-static */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:685:				40C848FF101A21150083642A /* gtest-all.cc in Sources */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:718:				40899F3A0FFA70D4000B29AE /* gtest-all.cc in Sources */,
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:727:			target = 40899F420FFA7184000B29AE /* gtest_unittest-framework */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:732:			target = 4089A0120FFACEFC000B29AE /* sample1_unittest-framework */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:737:			target = 40C848F9101A209C0083642A /* gtest-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:747:			target = 40C848F9101A209C0083642A /* gtest-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:752:			target = 40C8490A101A217E0083642A /* gtest_main-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:757:			target = 40C848F9101A209C0083642A /* gtest-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:762:			target = 40C8490A101A217E0083642A /* gtest_main-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:767:			target = 40C8490A101A217E0083642A /* gtest_main-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:772:			target = 8D07F2BC0486CC7A007CD1D0 /* gtest-framework */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:777:			target = 8D07F2BC0486CC7A007CD1D0 /* gtest-framework */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:782:			target = 40C8497A101A36850083642A /* gtest_unittest-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:787:			target = 40C84989101A36A60083642A /* sample1_unittest-static */;
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:811:				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:824:				PRODUCT_NAME = "gtest_unittest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:834:				PRODUCT_NAME = "gtest_unittest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:843:				PRODUCT_NAME = "sample1_unittest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:852:				PRODUCT_NAME = "sample1_unittest-framework";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:969:				PRODUCT_NAME = "sample1_unittest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:978:				PRODUCT_NAME = "sample1_unittest-static";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1000:				VERSIONING_SYSTEM = "apple-generic";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1021:				VERSIONING_SYSTEM = "apple-generic";
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1051:		40899F4A0FFA71BC000B29AE /* Build configuration list for PBXNativeTarget "gtest_unittest-framework" */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1060:		4089A0240FFACF01000B29AE /* Build configuration list for PBXNativeTarget "sample1_unittest-framework" */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1078:		40C84902101A212E0083642A /* Build configuration list for PBXNativeTarget "gtest-static" */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1087:		40C84912101A21D20083642A /* Build configuration list for PBXNativeTarget "gtest_main-static" */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1096:		40C84984101A36850083642A /* Build configuration list for PBXNativeTarget "gtest_unittest-static" */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1105:		40C84994101A36A60083642A /* Build configuration list for PBXNativeTarget "sample1_unittest-static" */ = {
/Volumes/src/simhub/src/libs/googletest/xcode/gtest.xcodeproj/project.pbxproj:1114:		4FADC24208B4156D00ABE55E /* Build configuration list for PBXNativeTarget "gtest-framework" */ = {
/Volumes/src/simhub/src/libs/plugins/common/private/pluginstatemanager.h:18: * implementations - for use within the guts of the plugin
/Volumes/src/simhub/src/libs/plugins/common/private/pluginstatemanager.h:22: * the purposes of demonstration - eventually some of these
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:55:    //! pre-flight checks method
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:59:     * tell the manager to prepare event loop - the final argment
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:61:     * handle that has mean within the callback - the same pattern
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:68:     * - the name is actually a name-spaced endpoint
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:92:        return -1;
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:100:    plugin_vtable->simplug_init = (int (*)(SPHANDLE *, LoggingFunctionCB))dlsym(handle, "simplug_init");
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:101:    if (!plugin_vtable->simplug_init)
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:102:        return -1;
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:104:    plugin_vtable->simplug_config_passthrough = (int (*)(SPHANDLE, void *))dlsym(handle, "simplug_config_passthrough");
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:105:    if (!plugin_vtable->simplug_config_passthrough)
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:106:        return -1;
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:108:    plugin_vtable->simplug_preflight_complete = (int (*)(SPHANDLE))dlsym(handle, "simplug_preflight_complete");
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:109:    if (!plugin_vtable->simplug_preflight_complete)
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:110:        return -1;
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:112:    plugin_vtable->simplug_commence_eventing = (void (*)(SPHANDLE, EnqueueEventHandler, void *))dlsym(handle, "simplug_commence_eventing");
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:113:    if (!plugin_vtable->simplug_commence_eventing)
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:114:        return -1;
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:116:    plugin_vtable->simplug_deliver_value = (int (*)(SPHANDLE, GenericTLV *))dlsym(handle, "simplug_deliver_value");
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:119:    plugin_vtable->simplug_cease_eventing = (void (*)(SPHANDLE))dlsym(handle, "simplug_cease_eventing");
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:120:    if (!plugin_vtable->simplug_cease_eventing)
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:121:        return -1;
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:123:    plugin_vtable->simplug_release = (void (*)(SPHANDLE))dlsym(handle, "simplug_release");
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:124:    if (!plugin_vtable->simplug_release)
/Volumes/src/simhub/src/libs/plugins/common/simhubdeviceplugin.h:125:        return -1;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/MAX7219.cpp:75:    _stateMatrix[col - 1][row - 1] = enabled;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/MAX7219.cpp:77:    uint8_t colRegister = REG_COL_1 + col - 1;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/MAX7219.cpp:80:        if (_stateMatrix[col - 1][idx]) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/MAX7219.cpp:144:        if (led->name() == name) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/MAX7219.h:150:    void setState(bool val) { _owner->setPinState(_col, _row, val); }
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/PokeyMAX7219Manager.cpp:30:        if (max7219->id() == id) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/PokeyMAX7219Manager.cpp:43:    max7219->addLed(ledIndex, name, description, enabled, row, col);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/PokeyMAX7219Manager.cpp:52:        std::shared_ptr<Led> led = max7219->findLedByName(name);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/PokeyMAX7219Manager.cpp:55:        if (led->enabled()) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeyMAX7219Manager/PokeyMAX7219Manager.cpp:56:            led->setState(value);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:17:    pokey->Pins[enablePin - 1].PinFunction = PK_PinCap_digitalOutput | (invertEnablePin ? PK_PinCap_invertPin : 0x00);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:18:    pokey->Pins[pin - 1].PinFunction = PK_PinCap_digitalInput | (invert ? PK_PinCap_invertPin : 0x00);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:51:    el->name = (char *)name().c_str();
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:52:    el->type = CONFIG_STRING;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:54:    el->value.string_value = (char *)calloc(value.size() + 1, 1);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:55:    strncpy(el->value.string_value, value.c_str(), value.size() + 1);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:110:        int value = (*iter).second->second;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:111:        size_t pos = (*iter).second->first;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:126:    if (mapContains(_physPinMask, pokeyPin->name())) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:128:        std::shared_ptr<std::pair<size_t, int>> valueInfo = _physPinMask[pokeyPin->name()];
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/#PokeySwitch.cpp#:129:        valueInfo->second = pokeyPin->currentValue();
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:17:    pokey->Pins[enablePin - 1].PinFunction = PK_PinCap_digitalOutput | (invertEnablePin ? PK_PinCap_invertPin : 0x00);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:18:    pokey->Pins[pin - 1].PinFunction = PK_PinCap_digitalInput | (invert ? PK_PinCap_invertPin : 0x00);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:51:    el->name = (char *)name().c_str();
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:52:    el->type = CONFIG_STRING;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:54:    el->value.string_value = (char *)calloc(value.size() + 1, 1);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:55:    strncpy(el->value.string_value, value.c_str(), value.size() + 1);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:106:        int value = (*iter).second->second;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:107:        size_t pos = (*iter).second->first;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:122:    if (mapContains(_physPinMask, pokeyPin->name())) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:124:        std::shared_ptr<std::pair<size_t, int>> valueInfo = _physPinMask[pokeyPin->name()];
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitch.cpp:125:        valueInfo->second = pokeyPin->currentValue();
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:49:    pin->setVirtualPinMask(virtualPinMask);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:50:    pin->setValueTransforms(valueTransforms);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:60:        if ((*iter).second->updateVirtualPinMask(pokeyPin)) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:74:        std::pair<std::string, uint8_t> swData = sw->read();
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:78:            if (sw->previousValue() != sw->currentValue()) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:80:                el->type = CONFIG_BOOL;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:81:                el->name = (char *)calloc(sw->name().size() + 1, 1);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:82:                strncpy(el->name, (char *)sw->name().c_str(), sw->name().size() + 1);
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:83:                el->value.int_value = (int)swData.second;
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:90:    //     vpin.second->updateVirtualValue();
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:92:    //     if (vpin.second->currentValue() != vpin.second->previousValue()) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrix.cpp:93:    //         end = retVal.insert(end, vpin.second->valueAsGeneric());
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrixManager.cpp:21:        if (matrix->name() == name) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrixManager.cpp:33:        if (matrix->id() == id) {
/Volumes/src/simhub/src/libs/plugins/pokey/drivers/PokeySwitchMatrixManager/PokeySwitchMatrixManager.cpp:46:        std::vector<std::shared_ptr<GenericTLV>> switches = matrix->readSwitches();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:12:// -- public C FFI
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:24:    return static_cast<PluginStateManager *>(plugin_instance)->configPassthrough(static_cast<libconfig::Config *>(libconfig_instance));
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:29:    return static_cast<PluginStateManager *>(plugin_instance)->preflightComplete();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:34:    static_cast<PluginStateManager *>(plugin_instance)->commenceEventing(enqueue_callback, arg);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:39:    return static_cast<PluginStateManager *>(plugin_instance)->deliverValue(value);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:44:    static_cast<PluginStateManager *>(plugin_instance)->ceaseEventing();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:56:// -- private C++ pokey plugin implementation
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:83:        devPair.second->stopPolling();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:97:    // printf("-----> %s %i %i\n",data->name, data->type, (int)data->value);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:99:    std::shared_ptr<PokeyDevice> device = targetFromDeviceTargetList(data->name);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:102:        if (data->type == ConfigType::CONFIG_BOOL) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:103:            retVal = device->targetValue(data->name, (bool)data->value);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:105:        else if (data->type == ConfigType::CONFIG_INT) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:106:            retVal = device->targetValue(data->name, (int)data->value);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:122:        devPair.second->setCallbackInfo(_enqueueCallback, _callbackArg, this);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:134:            if (device->pokey()) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:135:                _logger(LOG_INFO, "    - #%s %s %s (v%d.%d.%d) - %u.%u.%u.%u ", device->serialNumber().c_str(), device->hardwareTypeString().c_str(),
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:136:                    device->deviceData().DeviceName, device->firmwareMajorMajorVersion(), device->firmwareMajorVersion(), device->firmwareMinorVersion(), device->ipAddress()[0],
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:137:                    device->ipAddress()[1], device->ipAddress()[2], device->ipAddress()[3]);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:140:            _deviceMap.emplace(device->serialNumber(), device);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:150:    // printf("----> adding %s to %s\n", target.c_str(), device->name().c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:171:        retVal = _deviceMap.find(serialNumber)->second;
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:182:        iter->lookup("pins");
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:201:        iter->lookupValue("serialNumber", configSerialNumber);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:204:            _logger(LOG_ERROR, "    - #%s. No physical device. Skipping....", configSerialNumber.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:208:            iter->lookupValue("name", configName);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:210:            if (configName != pokeyDevice->name().c_str()) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:211:                uint32_t retValue = pokeyDevice->name(configName);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:213:                    _logger(LOG_INFO, "      - Device name set (%s)", configName.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:216:                    _logger(LOG_INFO, "      - Error setting device name (%s)", configName.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:231:    _logger(LOG_INFO, " - transform %s", pinName.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:233:    if (transform->exists("On") && transform->exists("Off")) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:237:        transform->lookupValue("On", transformResultOn);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:238:        transform->lookupValue("Off", transformResultOff);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:250:        _logger(LOG_INFO, " - transform %s", name.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:263:        if (entry.second->ownsPin(pinName)) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:280:    int pinCount = pins->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:283:        _logger(LOG_INFO, "%s | Pin | Found %i pins", pokeyDevice->name().c_str(), pinCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:287:        for (libconfig::SettingIterator iter = pins->begin(); iter != pins->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:298:                iter->lookupValue("pin", pinNumber);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:299:                iter->lookupValue("name", pinName);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:300:                iter->lookupValue("type", pinType);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:301:                iter->lookupValue("description", description);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:302:                iter->lookupValue("units", units);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:303:                if (iter->exists("transform")) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:304:                    loadTransform(pinName, &iter->lookup("transform"));
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:311:            if (pokeyDevice->validatePinCapability(pinNumber, pinType)) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:312:                if (iter->exists("mapTo")) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:313:                    iter->lookupValue("mapTo", mapTo);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:329:                        if (iter->exists("default"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:330:                            iter->lookupValue("default", defaultValue);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:332:                        pokeyDevice->addPin(pinIndex, pinName, pinNumber, pinType, defaultValue, description, false);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:333:                        _logger(LOG_INFO, "%s | Pin | %d Added target %s on pin %d", pokeyDevice->name().c_str(), pinIndex, pinName.c_str(), pinNumber);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:337:                    if (iter->exists("default"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:338:                        iter->lookupValue("default", defaultValue);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:341:                    if (iter->exists("invert"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:342:                        iter->lookupValue("invert", invert);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:344:                    pokeyDevice->addPin(pinIndex, pinName, pinNumber, pinType, defaultValue, description, invert);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:346:                    _logger(LOG_INFO, "%s | Pin | [%d] Added source %s on pin %d", pokeyDevice->name().c_str(), pinIndex, pinName.c_str(), pinNumber);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:351:                _logger(LOG_ERROR, "%s | Pin |[%d] Invalid pin type %s on pin %d", pokeyDevice->name().c_str(), pinIndex, pinType.c_str(), pinNumber);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:398:    int pwmCount = pwm->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:401:        _logger(LOG_INFO, "%s | PWM | Found %i PWM Channels", pokeyDevice->name().c_str(), pwmCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:404:        for (libconfig::SettingIterator iter = pwm->begin(); iter != pwm->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:414:    int encoderCount = encoders->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:417:        _logger(LOG_INFO, "%s | Encoder | Found %i encoders", pokeyDevice->name().c_str(), encoderCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:420:        for (libconfig::SettingIterator iter = encoders->begin(); iter != encoders->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:433:                iter->lookupValue("encoder", encoderNumber);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:434:                iter->lookupValue("name", encoderName);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:435:                iter->lookupValue("default", encoderDefault);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:436:                iter->lookupValue("description", description);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:437:                iter->lookupValue("min", encoderMin);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:438:                iter->lookupValue("max", encoderMax);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:439:                iter->lookupValue("step", encoderStep);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:440:                iter->lookupValue("invertDirection", invertDirection);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:441:                iter->lookupValue("units", units);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:442:                iter->lookupValue("type", type);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:445:                _logger(LOG_ERROR, "%s | Encoder | Could not find %s. Skipping....", pokeyDevice->name().c_str(), nfex.what());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:449:            if (pokeyDevice->validateEncoder(encoderNumber)) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:450:                pokeyDevice->addEncoder(encoderNumber, encoderDefault, encoderName, description, encoderMin, encoderMax, encoderStep, invertDirection, units, type);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:451:                _logger(LOG_INFO, "%s | Encoder | Added encoder %i (%s)", pokeyDevice->name().c_str(), encoderNumber, encoderName.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:466:    int ledMatrixCount = ledMatrix->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:471:        _logger(LOG_ERROR, "%s | LED Matrix | Invalid number of LED Matrix (%i). Maximum 1", pokeyDevice->name().c_str(), ledMatrixCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:474:        _logger(LOG_INFO, "%s | LED Matrix | Found %i LED Matrix", pokeyDevice->name().c_str(), ledMatrixCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:475:        for (libconfig::SettingIterator iter = ledMatrix->begin(); iter != ledMatrix->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:484:                iter->lookupValue("type", matrixType);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:485:                iter->lookupValue("chipSelect", chipSelect);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:486:                iter->lookupValue("enabled", enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:487:                iter->lookupValue("description", description);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:488:                iter->lookupValue("name", name);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:490:                _logger(LOG_INFO, " %s | LED Matrix> %s (%s - CS %i)", pokeyDevice->name().c_str(), name.c_str(), matrixType.c_str(), chipSelect);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:491:                pokeyDevice->configMatrix(ledMatrixIndex, (uint8_t)chipSelect, matrixType, (uint8_t)enabled, name, description);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:497:                if (iter->exists("leds")) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:501:                    leds = &iter->lookup("leds");
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:502:                    int ledCount = leds->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:503:                    for (libconfig::SettingIterator led = leds->begin(); led != leds->end(); led++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:511:                        led->lookupValue("name", name);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:512:                        led->lookupValue("description", description);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:513:                        led->lookupValue("enabled", enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:514:                        led->lookupValue("row", row);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:515:                        led->lookupValue("col", col);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:517:                        pokeyDevice->addLedToLedMatrix(ledMatrixIndex, ledIndex, name, description, (uint8_t)enabled, (uint8_t)row, (uint8_t)col);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:518:                        _logger(LOG_INFO, "%s | LED Matrix | Led | %s (row %i / col %i)", pokeyDevice->name().c_str(), name.c_str(), row, col);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:522:                    _logger(LOG_INFO, "<%s><LED Matrix> %s Loaded %i leds", pokeyDevice->name().c_str(), name.c_str(), ledCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:528:                _logger(LOG_ERROR, "%s | LED Matrix | Could not find %s. Skipping....", pokeyDevice->name().c_str(), nfex.what());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:540:    int displayCount = displays->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:545:        _logger(LOG_ERROR, "<%s> | Display | Invalid number of displays (%i). Maximum 2", pokeyDevice->name().c_str(), displayCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:548:        _logger(LOG_INFO, "<%s> | Display | Found %i display(s)", pokeyDevice->name().c_str(), displayCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:549:        for (libconfig::SettingIterator iter = displays->begin(); iter != displays->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:555:                iter->lookupValue("name", name);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:556:                iter->lookupValue("type", type);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:557:                iter->lookupValue("enabled", enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:559:                _logger(LOG_INFO, "<%s> <Display> %s [%s]", pokeyDevice->name().c_str(), name.c_str(), type.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:561:                int matrixRows = deviceDisplaysGroupsConfiguration(&iter->lookup("groups"), displayIndex, pokeyDevice, type);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:562:                _logger(LOG_INFO, "<%s> <Display> Added %i digit(s)", pokeyDevice->name().c_str(), matrixRows);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:564:                pokeyDevice->configMatrixLED(displayIndex, 8, 8, enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:568:                _logger(LOG_ERROR, "<%s> | Display | Could not find %s. Skipping....", pokeyDevice->name().c_str(), nfex.what());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:579:    int groupCount = displayGroups->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:583:        _logger(LOG_ERROR, "<%s> <%s> | Display | Group | Invalid number of display groups (%i). Minimum 1 Maximum 8", pokeyDevice->name().c_str(), groupCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:586:        _logger(LOG_INFO, "<%s> | Display | Group | Found %i display group(s)", pokeyDevice->name().c_str(), groupCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:588:        for (libconfig::SettingIterator iter = displayGroups->begin(); iter != displayGroups->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:594:                iter->lookupValue("name", name);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:595:                iter->lookupValue("digits", digits);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:596:                iter->lookupValue("position", position);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:598:                _logger(LOG_INFO, "<%s> | Display | Group | %s %i digits / position %i", pokeyDevice->name().c_str(), name.c_str(), digits, position);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:599:                pokeyDevice->addMatrixLED(displayId, name, type);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:601:                pokeyDevice->addGroupToMatrixLED(id++, displayId, name, digits, position);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:606:                _logger(LOG_ERROR, "<%s> | Display | Group | Could not find %s. Skipping....", pokeyDevice->name().c_str(), nfex.what());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:616:    int retVal = -1;
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:618:    int pinCount = switchMatrix->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:627:        for (libconfig::SettingIterator iter = switchMatrix->begin(); iter != switchMatrix->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:634:                iter->lookupValue("name", name);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:635:                iter->lookupValue("type", type);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:636:                iter->lookupValue("enabled", enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:639:                pokeyDevice->configSwitchMatrix(id++, name, type, enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:640:                _logger(LOG_INFO, "%s | SwitchMatrix | Found switch matrix [%s] [%i switches]", pokeyDevice->name().c_str(), name.c_str(), type.c_str(),
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:641:                    (&iter->lookup("switches"))->getLength());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:643:                int switchCount = deviceSwitchMatrixSwitchConfiguration(&iter->lookup("switches"), index, pokeyDevice, name, type, enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:644:                _logger(LOG_INFO, "%s | SwitchMatrix | Added %i switches", pokeyDevice->name().c_str(), switchCount);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:649:                _logger(LOG_ERROR, "%s | SwitchMatrix | Could not find %s. Skipping....", pokeyDevice->name().c_str(), nfex.what());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:661:    int retVal = -1;
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:663:    int switchCount = switches->getLength();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:667:        _logger(LOG_ERROR, "%s | SwitchMatrix | Invalid number of switches (%i). Minimum 0 Maximum %i", pokeyDevice->name().c_str(), switchCount, MAX_SWITCH_MATRIX_SWITCHES);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:679:        for (libconfig::SettingIterator iter = switches->begin(); iter != switches->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:681:                iter->lookupValue("name", name);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:682:                iter->lookupValue("enabled", enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:683:                iter->lookupValue("invert", invert);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:685:                if (iter->exists("vpins")) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:687:                    libconfig::Setting &vpins = iter->lookup("vpins");
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:690:                        virtualPinMask[pinInfoIter->getName()] = std::make_shared<std::pair<size_t, int>>((unsigned int)*pinInfoIter, 0);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:693:                    assert(iter->exists("valueTransforms"));
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:695:                    libconfig::Setting &transforms = iter->lookup("valueTransforms");
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:699:                        valueTransforms[(int)*transformIter] = transformIter->getName();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:702:                    pokeyDevice->configSwitchMatrixVirtualPin(id, name, invert, virtualPinMask, valueTransforms);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:705:                    iter->lookupValue("pin", pin);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:706:                    iter->lookupValue("enablePin", enablePin);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:707:                    iter->lookupValue("invertEnablePin", invertEnablePin);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:709:                    _logger(LOG_INFO, "                       - %s [pin: %i, enable pin: %i]", name.c_str(), pin, enablePin);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:710:                    pokeyDevice->configSwitchMatrixSwitch(id, index, name, pin, enablePin, invert, invertEnablePin);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:716:                _logger(LOG_ERROR, "%s | SwitchMatrix | Could not find %s. Skipping....", pokeyDevice->name().c_str(), nfex.what());
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:735:        devicesConfiguraiton = &_config->lookup("configuration");
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:741:    for (libconfig::SettingIterator iter = devicesConfiguraiton->begin(); iter != devicesConfiguraiton->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:744:        iter->lookupValue("serialNumber", serialNumber);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:749:        dev->setSerialNumber(serialNumber);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:750:        _deviceMap.emplace(dev->serialNumber(), dev);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:765:        if (iter->exists("pins"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:766:            devicePinsConfiguration(&iter->lookup("pins"), pokeyDevice);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:769:        if (iter->exists("encoders"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:770:            deviceEncodersConfiguration(&iter->lookup("encoders"), pokeyDevice);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:773:        if (iter->exists("displays"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:774:            deviceDisplaysConfiguration(&iter->lookup("displays"), pokeyDevice);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:777:        if (iter->exists("ledMatrix"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:778:            deviceLedMatrixConfiguration(&iter->lookup("ledMatrix"), pokeyDevice);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:781:        if (iter->exists("pwm"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:782:            devicePWMConfiguration(&iter->lookup("pwm"), pokeyDevice);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:784:        if (iter->exists("switchMatrix"))
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:785:            deviceSwitchMatrixConfiguration(&iter->lookup("switchMatrix"), pokeyDevice);
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:787:        pokeyDevice->startPolling();
/Volumes/src/simhub/src/libs/plugins/pokey/main.cpp:795:        _logger(LOG_INFO, "    - WARNING: No Pokey devices discovered");
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:59:    for (int i = 0; i < _pokey->info.iPinCount; i++) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:77:    PokeyDevice *self = static_cast<PokeyDevice *>(timer->data);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:82:    if (!self->_owner->successfulPreflightCompleted()) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:87:    int encoderRetValue = PK_EncoderValuesGet(self->_pokey);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:91:        for (int i = 0; i < self->_encoderMap.size(); i++) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:93:            uint32_t step = self->_encoders[i].step;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:94:            uint32_t newEncoderValue = self->_pokey->Encoders[i].encoderValue;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:95:            uint32_t previousEncoderValue = self->_encoders[i].previousEncoderValue;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:97:            uint32_t currentValue = self->_encoders[i].value;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:98:            uint32_t min = self->_encoders[i].min;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:99:            uint32_t max = self->_encoders[i].max;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:105:                    // absolute encoders send 1 or -1
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:106:                    if (self->_encoders[i].type == "absolute") {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:107:                        self->_encoders[i].value = 1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:111:                            self->_encoders[i].previousValue = min;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:112:                            self->_encoders[i].value = min;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:115:                            self->_encoders[i].value = currentValue - step;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:121:                    if (self->_encoders[i].type == "absolute") {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:122:                        // absolute encoders send 1 or -1
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:123:                        self->_encoders[i].value = -1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:127:                            self->_encoders[i].previousValue = max;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:128:                            self->_encoders[i].value = max;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:131:                            self->_encoders[i].value = currentValue + step;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:136:                el.ownerPlugin = self->_owner;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:138:                el.value.int_value = (int)self->_encoders[i].value;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:140:                el.name = (char *)self->_encoders[i].name.c_str();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:141:                el.description = (char *)self->_encoders[i].description.c_str();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:142:                el.units = (char *)self->_encoders[i].units.c_str();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:145:                self->_enqueueCallback(self, (void *)&el, self->_callbackArg);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:147:                self->_encoders[i].previousEncoderValue = newEncoderValue;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:153:    int retVal = PK_DigitalIOGet(self->_pokey);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:156:        self->_owner->pinRemappingMutex().lock();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:160:        for (int i = 0; i < self->_pokey->info.iPinCount; i++) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:161:            if (self->_pins[i].type == "DIGITAL_INPUT") {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:162:                int sourcePinNumber = self->_pins[i].pinNumber;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:164:                if (self->_pins[i].value != self->_pokey->Pins[sourcePinNumber - 1].DigitalValueGet && !self->_pins[i].skipNext) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:166:                    printf("DIN pin-index %i - %i\n", sourcePinNumber - 1, self->_pokey->Pins[sourcePinNumber - 1].DigitalValueGet);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:168:                    el.ownerPlugin = self->_owner;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:173:                    if (self->_owner->pinRemapped(self->_pins[i].pinName)) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:180:                        std::pair<std::shared_ptr<PokeyDevice>, std::string> remappedPinInfo = self->_owner->remappedPinDetails(self->_pins[i].pinName);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:181:                        int remappedPinIndex = remappedPinInfo.first->pinIndexFromName(remappedPinInfo.second);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:183:                        // remappedPinInfo.first->pins()[remappedPinIndex].previousValue = self->_pins[self->_pins[i].pinNumber - 1].value;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:184:                        self->_pins[i].previousValue = self->_pins[self->_pins[i].pinNumber - 1].value;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:186:                        remappedPinInfo.first->_pins[remappedPinIndex].previousValue = self->_pokey->Pins[sourcePinNumber - 1].DigitalValueGet;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:188:                        remappedPinInfo.first->_pins[remappedPinIndex].value = self->_pokey->Pins[sourcePinNumber - 1].DigitalValueGet;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:189:                        self->_pins[i].value = self->_pokey->Pins[sourcePinNumber - 1].DigitalValueGet;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:192:                        el.value.bool_value = self->_pokey->Pins[sourcePinNumber - 1].DigitalValueGet;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:195:                            remappedPinInfo.first->_pins[remappedPinIndex].skipNext = true;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:198:                            if (!remappedPinInfo.first->_pins[remappedPinIndex].skipNext) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:199:                                self->_owner->pinRemappingMutex().unlock();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:204:                                if (remappedPinInfo.first->_pins[remappedPinIndex].skipNext) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:209:                            remappedPinInfo.first->_pins[remappedPinIndex].skipNext = false;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:212:                        printf("--> remapping %s to  %s\n", self->_pins[i].pinName.c_str(), remappedPinInfo.first->pins()[remappedPinIndex].pinName.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:215:                        el.name = (char *)self->_pins[i].pinName.c_str();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:216:                        el.value.bool_value = self->_pins[i].value;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:217:                        self->_pins[i].previousValue = self->_pins[i].value;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:218:                        self->_pins[i].value = self->_pokey->Pins[self->_pins[i].pinNumber - 1].DigitalValueGet;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:222:                        printf("HACKSKIP, %s, %i\n", self->_pins[i].pinName.c_str(), self->_pins[i].value);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:223:                        self->_owner->pinRemappingMutex().unlock();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:227:                    el.description = (char *)self->_pins[i].description.c_str();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:228:                    el.units = (char *)self->_pins[i].units.c_str();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:231:                    TransformFunction transformer = self->_owner->transformForPinName(self->_pins[i].pinName);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:234:                        std::string transformedValue = transformer(attribute->valueToString(), "NULL", "NULL");
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:236:                        attribute->setType(STRING_ATTRIBUTE);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:237:                        attribute->setValue(transformedValue);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:240:                        printf("---> %s: %s\n", (char *)self->_pins[i].pinName.c_str(), transformedValue.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:241:                        self->_enqueueCallback(self, (void *)transformedGeneric, self->_callbackArg);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:246:                        printf("---> %s\n", (char *)self->_pins[i].pinName.c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:247:                        self->_enqueueCallback(self, (void *)&el, self->_callbackArg);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:254:        std::vector<std::shared_ptr<GenericTLV>> matrixResult = self->_switchMatrixManager->readAll();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:257:            el.ownerPlugin = self->_owner;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:260:            el.description = (char *)res->description;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:261:            el.name = (char *)res->name;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:262:            el.value.bool_value = (bool)res->value.bool_value;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:264:            self->_enqueueCallback(self, (void *)&el, self->_callbackArg);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:268:        self->_owner->pinRemappingMutex().unlock();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:272:            printf("----> PK_ERR_TRANSFER %i\n\n", retVal);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:275:            printf("----> PK_ERR_GENERIC %i\n\n", retVal);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:278:            printf("----> PK_ERR_PARAMETER %i\n\n", retVal);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:311:    if (_pollThread->joinable())
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:312:        _pollThread->join();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:325:        if (_pollThread->joinable()) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:326:            _pollThread->join();
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:357:        retVal = isPinDigitalOutput(pin - 1);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:360:        retVal = isPinDigitalInput(pin - 1);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:417:    int encoderIndex = encoderNumber - 1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:419:    _pokey->Encoders[encoderIndex].encoderValue = defaultValue;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:420:    _pokey->Encoders[encoderIndex].encoderOptions = 0b11;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:424:            _pokey->Encoders[encoderIndex].channelApin = 1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:425:            _pokey->Encoders[encoderIndex].channelBpin = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:428:            _pokey->Encoders[encoderIndex].channelApin = 1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:429:            _pokey->Encoders[encoderIndex].channelBpin = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:434:            _pokey->Encoders[encoderIndex].channelApin = 5;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:435:            _pokey->Encoders[encoderIndex].channelBpin = 4;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:438:            _pokey->Encoders[encoderIndex].channelApin = 4;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:439:            _pokey->Encoders[encoderIndex].channelBpin = 5;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:444:            _pokey->Encoders[encoderIndex].channelApin = 15;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:445:            _pokey->Encoders[encoderIndex].channelBpin = 14;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:448:            _pokey->Encoders[encoderIndex].channelApin = 14;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:449:            _pokey->Encoders[encoderIndex].channelBpin = 15;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:497:    _pokey->MatrixLED[id].rows = rows;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:498:    _pokey->MatrixLED[id].columns = cols;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:499:    _pokey->MatrixLED[id].displayEnabled = enabled;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:500:    _pokey->MatrixLED[id].RefreshFlag = 1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:501:    _pokey->MatrixLED[id].data[0] = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:502:    _pokey->MatrixLED[id].data[1] = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:503:    _pokey->MatrixLED[id].data[2] = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:504:    _pokey->MatrixLED[id].data[3] = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:505:    _pokey->MatrixLED[id].data[4] = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:506:    _pokey->MatrixLED[id].data[5] = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:507:    _pokey->MatrixLED[id].data[6] = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:508:    _pokey->MatrixLED[id].data[7] = 0;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:519:        _pokeyMax7219Manager->addMatrix(id, chipSelect, type, enabled, name, description);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:526:    _pokeyMax7219Manager->addLedToMatrix(ledMatrixIndex, ledIndex, name, description, enabled, row, col);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:541:    uint8_t pin = pinFromName(targetName) - 1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:547:        // we have output matrix - so deliver there
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:548:        _pokeyMax7219Manager->setLedByName(targetName, value);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:553:        printf("----> PK_ERR_TRANSFER pin %d --> %d %d (pokey: %s)\n\n", pin, (uint8_t)value, result, name().c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:556:        printf("----> PK_ERR_GENERIC pin %d --> %d %d (pokey: %s)\n\n", pin, (uint8_t)value, result, name().c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:559:        printf("----> PK_ERR_PARAMETER pin %d --> %d %d (pokey: %s)\n\n", pin, (uint8_t)value, result, name().c_str());
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:579:    if (value < -1) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:580:        value = value * -1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:590:            _pokey->MatrixLED[displayNumber].data[i] = 0b00000000;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:592:        _pokey->MatrixLED[displayNumber].data[(position + groupLength) - 1] = _intToDisplayRow[0];
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:598:            int displayOffset = (int)charString.at(i) - 48;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:604:                _pokey->MatrixLED[displayNumber].data[position] = convertedValue;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:606:            else if (value == -1) {
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:608:                    _pokey->MatrixLED[displayNumber].data[i] = 0b00000000;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:614:    _pokey->MatrixLED[displayNumber].RefreshFlag = 1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:619:        printf("----> PK_ERR_TRANSFER %i\n\n", retValue);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:622:        printf("----> PK_ERR_GENERIC %i\n\n", retValue);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:625:        printf("----> PK_ERR_PARAMETER pin %i\n\n", retValue);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:633:    int retVal = -1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:635:    _switchMatrixManager->addMatrix(id, name, type, enabled);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:642:    std::shared_ptr<PokeySwitchMatrix> matrix = _switchMatrixManager->matrix(switchMatrixId);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:643:    matrix->addSwitch(switchId, name, pin, enablePin, invert, invertEnablePin);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:649:    std::shared_ptr<PokeySwitchMatrix> matrix = _switchMatrixManager->matrix(switchMatrixId);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:650:    matrix->addVirtualPin(name, invert, virtualPinMask, valueTransforms);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:656:    _pokey->Pins[--pin].PinFunction = PK_PinCap_digitalOutput | PK_PinCap_invertPin;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:668:    _pokey->Pins[--pin].PinFunction = pinSetting;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:674:    strncpy((char *)_pokey->DeviceData.DeviceName, name.c_str(), 30);
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:684:        return it->second;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:687:        printf("---> cant find display\n");
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:688:        return -1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:700:    return -1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:709:        return it->second;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.cpp:712:        return -1;
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.h:190:    sPoKeysDevice_Info info() { return _pokey->info; }
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.h:191:    sPoKeysMatrixLED *matrixLED() { return _pokey->MatrixLED; };
/Volumes/src/simhub/src/libs/plugins/pokey/pokeyDevice.h:198:        return _pokey->DeviceData;
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:11:// -- public C FFI
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:22:    return static_cast<PluginStateManager *>(plugin_instance)->configPassthrough(static_cast<libconfig::Config *>(libconfig_instance));
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:27:    return static_cast<PluginStateManager *>(plugin_instance)->preflightComplete();
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:32:    static_cast<PluginStateManager *>(plugin_instance)->commenceEventing(enqueue_callback, arg);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:37:    return static_cast<PluginStateManager *>(plugin_instance)->deliverValue(value);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:42:    static_cast<PluginStateManager *>(plugin_instance)->ceaseEventing();
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:52:// -- internal implementation
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:58:    *buf = SimSourcePluginStateManager::StateManagerInstance()->_readBuffer;
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:70:    // enforce singleton pre-condition
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:108:        devicesConfiguraiton = &_config->lookup("configuration");
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:114:    for (libconfig::SettingIterator iter = devicesConfiguraiton->begin(); iter != devicesConfiguraiton->end(); iter++) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:116:        if (iter->exists("ipAddress")) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:117:            iter->lookupValue("ipAddress", ipAddress);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:120:        if (iter->exists("port")) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:121:            iter->lookupValue("port", port);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:124:        if (iter->exists("transforms")) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:125:            loadTransforms(&iter->lookup("transforms"));
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:160:    _logger(LOG_INFO, "<Transforms> Found %i transforms(s)", transforms->getLength());
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:199:    SimSourcePluginStateManager *self = static_cast<SimSourcePluginStateManager *>(req->data);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:202:        SimSourcePluginStateManager::StateManagerInstance()->_logger(LOG_ERROR, "   - Failed to connect to simulator");
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:204:        self->_enqueueCallback(self, (void *)NULL, self->_callbackArg);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:207:        SimSourcePluginStateManager::StateManagerInstance()->instanceConnectionHandler(req, status);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:213:    SimSourcePluginStateManager::StateManagerInstance()->instanceReadHandler(server, nread, buf);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:219:    SimSourcePluginStateManager::StateManagerInstance()->instanceCloseHandler(handle);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:224:    if (uv_is_readable(req->handle)) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:225:        uv_read_start(req->handle, &SimSourcePluginStateManager::AllocBuffer, &SimSourcePluginStateManager::OnRead);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:236:        memcpy(buffer.base, buf->base, nread);
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:237:        buffer.base[nread - 1] = '\0';
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:243:            SimSourcePluginStateManager::StateManagerInstance()->_logger(LOG_INFO, " - Stopping prepare3d ingest loop");
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:249:            SimSourcePluginStateManager::StateManagerInstance()->_logger(LOG_INFO, " - %s", uv_strerror(nread));
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:269:                buffer[len - 1] = '\0';
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:287:    name[strlen(name) - 1] = '\0';
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:336:        // TODO remove this echo test - or make it a configuartion switch
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:390:    switch (attribute->name().c_str()[0]) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:393:    // retVal = attribute->value<bool>() ? 0 : 1;
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:397:        retVal = attribute->valueToString();
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:409:    TransformFunction transformFunction = transform(attribute->name());
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:413:        val = transformFunction(attribute->valueToString(), "NULL", "NULL");
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:414:        oss << attribute->name() << "=" << val << "\n";
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:417:        oss << attribute->name() << "=" << prosimValueString(attribute) << "\n";
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:429:    if (!_eventLoop->active_handles) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:448:        if (_pluginThread->joinable()) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:449:            _pluginThread->join();
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:461:// -- simple socket send/receive wrapper
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:465:    _sock = -1;
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:486:    if (_sock == -1) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:489:        if (_sock == -1) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:496:    if (inet_addr(_address.c_str()) == -1) {
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.cpp:510:            addr_list = (struct in_addr **)he->h_addr_list;
/Volumes/src/simhub/src/libs/plugins/prepare3d/main.h:29:#define SIM_CONNECT_NOT_FOUND -61
/Volumes/src/simhub/src/libs/queue/concurrent_queue.h:3:// Subject to the BSD 2-Clause License
/Volumes/src/simhub/src/libs/queue/concurrent_queue.h:4:// - see < http://opensource.org/licenses/BSD-2-Clause>
/Volumes/src/simhub/src/libs/tz/date.h:57:# pragma GCC diagnostic ignored "-Wpedantic"
/Volumes/src/simhub/src/libs/tz/date.h:59:   // GCC 4.9 Bug 61489 Wrong warning with -Wmissing-field-initializers
/Volumes/src/simhub/src/libs/tz/date.h:60:#  pragma GCC diagnostic ignored "-Wmissing-field-initializers"
/Volumes/src/simhub/src/libs/tz/date.h:67://---------------+
/Volumes/src/simhub/src/libs/tz/date.h:69://---------------+
/Volumes/src/simhub/src/libs/tz/date.h:101://-----------+
/Volumes/src/simhub/src/libs/tz/date.h:103://-----------+
/Volumes/src/simhub/src/libs/tz/date.h:260:    CONSTCD14 day& operator--()    NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:261:    CONSTCD14 day  operator--(int) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:264:    CONSTCD14 day& operator-=(const days& d) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:279:CONSTCD11 day  operator-(const day&  x, const days& y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:280:CONSTCD11 days operator-(const day&  x, const day&  y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:298:    CONSTCD14 month& operator--()    NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:299:    CONSTCD14 month  operator--(int) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:302:    CONSTCD14 month& operator-=(const months& m) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:317:CONSTCD14 month  operator-(const month&  x, const months& y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:318:CONSTCD14 months operator-(const month&  x,  const month& y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:336:    CONSTCD14 year& operator--()    NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:337:    CONSTCD14 year  operator--(int) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:340:    CONSTCD14 year& operator-=(const years& y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:342:    CONSTCD11 year operator-() const NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:363:CONSTCD11 year  operator-(const year&  x, const years& y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:364:CONSTCD11 years operator-(const year&  x, const year&  y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:384:    CONSTCD14 weekday& operator--()    NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:385:    CONSTCD14 weekday  operator--(int) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:388:    CONSTCD14 weekday& operator-=(const days& d) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:405:CONSTCD14 weekday operator-(const weekday& x, const days&    y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:406:CONSTCD14 days    operator-(const weekday& x, const weekday& y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:469:    CONSTCD14 year_month& operator-=(const months& dm) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:471:    CONSTCD14 year_month& operator-=(const years& dy) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:485:CONSTCD14 year_month operator-(const year_month& ym, const months& dm) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:487:CONSTCD11 months operator-(const year_month& x, const year_month& y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:490:CONSTCD11 year_month operator-(const year_month& ym, const years& dy) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:615:    CONSTCD14 year_month_day& operator-=(const months& m) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:617:    CONSTCD14 year_month_day& operator-=(const years& y)  NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:641:CONSTCD14 year_month_day operator-(const year_month_day& ymd, const months& dm) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:644:CONSTCD11 year_month_day operator-(const year_month_day& ymd, const years& dy)  NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:662:    CONSTCD14 year_month_day_last& operator-=(const months& m) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:664:    CONSTCD14 year_month_day_last& operator-=(const years& y)  NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:707:operator-(const year_month_day_last& ymdl, const months& dm) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:711:operator-(const year_month_day_last& ymdl, const years& dy) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:733:    CONSTCD14 year_month_weekday& operator-=(const months& m) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:735:    CONSTCD14 year_month_weekday& operator-=(const years& y)  NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:775:operator-(const year_month_weekday& ymwd, const months& dm) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:779:operator-(const year_month_weekday& ymwd, const years& dy) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:798:    CONSTCD14 year_month_weekday_last& operator-=(const months& m) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:800:    CONSTCD14 year_month_weekday_last& operator-=(const years& y) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:841:operator-(const year_month_weekday_last& ymwdl, const months& dm) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:845:operator-(const year_month_weekday_last& ymwdl, const years& dy) NOEXCEPT;
/Volumes/src/simhub/src/libs/tz/date.h:882://----------------+
/Volumes/src/simhub/src/libs/tz/date.h:884://----------------+
/Volumes/src/simhub/src/libs/tz/date.h:964:    CONSTDATA auto max = I{1} << (digits-1);
/Volumes/src/simhub/src/libs/tz/date.h:965:    CONSTDATA auto min = -max;
/Volumes/src/simhub/src/libs/tz/date.h:971:            t = -t;
/Volumes/src/simhub/src/libs/tz/date.h:1011:        return t - To{1};
/Volumes/src/simhub/src/libs/tz/date.h:1025:        t1 = -t1;
/Volumes/src/simhub/src/libs/tz/date.h:1026:    auto diff0 = d - t0;
/Volumes/src/simhub/src/libs/tz/date.h:1027:    auto diff1 = t1 - d;
/Volumes/src/simhub/src/libs/tz/date.h:1030:        if (t0 - trunc<To>(t0/2)*2 == To{0})
/Volumes/src/simhub/src/libs/tz/date.h:1061:    return d >= d.zero() ? d : -d;
/Volumes/src/simhub/src/libs/tz/date.h:1122:CONSTCD14 inline day& day::operator--() NOEXCEPT {--d_; return *this;}
/Volumes/src/simhub/src/libs/tz/date.h:1123:CONSTCD14 inline day day::operator--(int) NOEXCEPT {auto tmp(*this); --(*this); return tmp;}
/Volumes/src/simhub/src/libs/tz/date.h:1125:CONSTCD14 inline day& day::operator-=(const days& d) NOEXCEPT {*this = *this - d; return *this;}
/Volumes/src/simhub/src/libs/tz/date.h:1180:operator-(const day& x, const day& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1183:                                     - static_cast<unsigned>(y))};
/Volumes/src/simhub/src/libs/tz/date.h:1205:operator-(const day& x, const days& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1207:    return x + -y;
/Volumes/src/simhub/src/libs/tz/date.h:1228:CONSTCD14 inline month& month::operator--() NOEXCEPT {if (--m_ == 0) m_ = 12; return *this;}
/Volumes/src/simhub/src/libs/tz/date.h:1229:CONSTCD14 inline month month::operator--(int) NOEXCEPT {auto tmp(*this); --(*this); return tmp;}
/Volumes/src/simhub/src/libs/tz/date.h:1243:month::operator-=(const months& m) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1245:    *this = *this - m;
/Volumes/src/simhub/src/libs/tz/date.h:1303:operator-(const month& x, const month& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1305:    auto const d = static_cast<unsigned>(x) - static_cast<unsigned>(y);
/Volumes/src/simhub/src/libs/tz/date.h:1314:    auto const mu = static_cast<long long>(static_cast<unsigned>(x)) - 1 + y.count();
/Volumes/src/simhub/src/libs/tz/date.h:1315:    auto const yr = (mu >= 0 ? mu : mu-11) / 12;
/Volumes/src/simhub/src/libs/tz/date.h:1316:    return month{static_cast<unsigned>(mu - yr * 12 + 1)};
/Volumes/src/simhub/src/libs/tz/date.h:1330:operator-(const month& x, const months& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1332:    return x + -y;
/Volumes/src/simhub/src/libs/tz/date.h:1390:CONSTCD14 inline year& year::operator--() NOEXCEPT {--y_; return *this;}
/Volumes/src/simhub/src/libs/tz/date.h:1391:CONSTCD14 inline year year::operator--(int) NOEXCEPT {auto tmp(*this); --(*this); return tmp;}
/Volumes/src/simhub/src/libs/tz/date.h:1393:CONSTCD14 inline year& year::operator-=(const years& y) NOEXCEPT {*this = *this - y; return *this;}
/Volumes/src/simhub/src/libs/tz/date.h:1394:CONSTCD11 inline year year::operator-() const NOEXCEPT {return year{-y_};}
/Volumes/src/simhub/src/libs/tz/date.h:1475:operator-(const year& x, const year& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1477:    return years{static_cast<int>(x) - static_cast<int>(y)};
/Volumes/src/simhub/src/libs/tz/date.h:1499:operator-(const year& x, const years& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1501:    return year{static_cast<int>(x) - y.count()};
/Volumes/src/simhub/src/libs/tz/date.h:1525:        z >= -4 ? (z+4) % 7 : (z+5) % 7 + 6));
/Volumes/src/simhub/src/libs/tz/date.h:1548:CONSTCD14 inline weekday& weekday::operator--() NOEXCEPT {if (wd_-- == 0) wd_ = 6; return *this;}
/Volumes/src/simhub/src/libs/tz/date.h:1549:CONSTCD14 inline weekday weekday::operator--(int) NOEXCEPT {auto tmp(*this); --(*this); return tmp;}
/Volumes/src/simhub/src/libs/tz/date.h:1563:weekday::operator-=(const days& d) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1565:    *this = *this - d;
/Volumes/src/simhub/src/libs/tz/date.h:1597:operator-(const weekday& x, const weekday& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1599:    auto const diff = static_cast<unsigned>(x) - static_cast<unsigned>(y);
/Volumes/src/simhub/src/libs/tz/date.h:1609:    auto const wk = (wdu >= 0 ? wdu : wdu-6) / 7;
/Volumes/src/simhub/src/libs/tz/date.h:1610:    return weekday{static_cast<unsigned>(wdu - wk * 7)};
/Volumes/src/simhub/src/libs/tz/date.h:1624:operator-(const weekday& x, const days& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1626:    return x + -y;
/Volumes/src/simhub/src/libs/tz/date.h:1834:year_month::operator-=(const months& dm) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1836:    *this = *this - dm;
/Volumes/src/simhub/src/libs/tz/date.h:1852:year_month::operator-=(const years& dy) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1854:    *this = *this - dy;
/Volumes/src/simhub/src/libs/tz/date.h:1913:    auto dmi = static_cast<int>(static_cast<unsigned>(ym.month())) - 1 + dm.count();
/Volumes/src/simhub/src/libs/tz/date.h:1914:    auto dy = (dmi >= 0 ? dmi : dmi-11) / 12;
/Volumes/src/simhub/src/libs/tz/date.h:1915:    dmi = dmi - dy * 12 + 1;
/Volumes/src/simhub/src/libs/tz/date.h:1930:operator-(const year_month& ym, const months& dm) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1932:    return ym + -dm;
/Volumes/src/simhub/src/libs/tz/date.h:1938:operator-(const year_month& x, const year_month& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1940:    return (x.year() - y.year()) +
/Volumes/src/simhub/src/libs/tz/date.h:1941:            months(static_cast<unsigned>(x.month()) - static_cast<unsigned>(y.month()));
/Volumes/src/simhub/src/libs/tz/date.h:1963:operator-(const year_month& ym, const years& dy) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:1965:    return ym + -dy;
/Volumes/src/simhub/src/libs/tz/date.h:2000:    return m_.ok() && date::day{1} <= d_ && d_ <= d[static_cast<unsigned>(m_)-1];
/Volumes/src/simhub/src/libs/tz/date.h:2249:year_month_day_last::operator-=(const months& m) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2251:    *this = *this - m;
/Volumes/src/simhub/src/libs/tz/date.h:2267:year_month_day_last::operator-=(const years& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2269:    *this = *this - y;
/Volumes/src/simhub/src/libs/tz/date.h:2297:        d[static_cast<unsigned>(month()) - 1] : date::day{29};
/Volumes/src/simhub/src/libs/tz/date.h:2399:operator-(const year_month_day_last& ymdl, const months& dm) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2401:    return ymdl + (-dm);
/Volumes/src/simhub/src/libs/tz/date.h:2423:operator-(const year_month_day_last& ymdl, const years& dy) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2425:    return ymdl + (-dy);
/Volumes/src/simhub/src/libs/tz/date.h:2475:year_month_day::operator-=(const months& m) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2477:    *this = *this - m;
/Volumes/src/simhub/src/libs/tz/date.h:2493:year_month_day::operator-=(const years& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2495:    *this = *this - y;
/Volumes/src/simhub/src/libs/tz/date.h:2508:    auto const y = static_cast<int>(y_) - (m_ <= feb);
/Volumes/src/simhub/src/libs/tz/date.h:2511:    auto const era = (y >= 0 ? y : y-399) / 400;
/Volumes/src/simhub/src/libs/tz/date.h:2512:    auto const yoe = static_cast<unsigned>(y - era * 400);       // [0, 399]
/Volumes/src/simhub/src/libs/tz/date.h:2513:    auto const doy = (153*(m > 2 ? m-3 : m+9) + 2)/5 + d-1;      // [0, 365]
/Volumes/src/simhub/src/libs/tz/date.h:2514:    auto const doe = yoe * 365 + yoe/4 - yoe/100 + doy;          // [0, 146096]
/Volumes/src/simhub/src/libs/tz/date.h:2515:    return days{era * 146097 + static_cast<int>(doe) - 719468};
/Volumes/src/simhub/src/libs/tz/date.h:2602:    os << ymd.year() << '-';
/Volumes/src/simhub/src/libs/tz/date.h:2604:    os << static_cast<unsigned>(ymd.month()) << '-';
/Volumes/src/simhub/src/libs/tz/date.h:2619:    auto const era = (z >= 0 ? z : z - 146096) / 146097;
/Volumes/src/simhub/src/libs/tz/date.h:2620:    auto const doe = static_cast<unsigned>(z - era * 146097);          // [0, 146096]
/Volumes/src/simhub/src/libs/tz/date.h:2621:    auto const yoe = (doe - doe/1460 + doe/36524 - doe/146096) / 365;  // [0, 399]
/Volumes/src/simhub/src/libs/tz/date.h:2623:    auto const doy = doe - (365*yoe + yoe/4 - yoe/100);                // [0, 365]
/Volumes/src/simhub/src/libs/tz/date.h:2625:    auto const d = doy - (153*mp+2)/5 + 1;                             // [1, 31]
/Volumes/src/simhub/src/libs/tz/date.h:2626:    auto const m = mp < 10 ? mp+3 : mp-9;                              // [1, 12]
/Volumes/src/simhub/src/libs/tz/date.h:2649:operator-(const year_month_day& ymd, const months& dm) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2651:    return ymd + (-dm);
/Volumes/src/simhub/src/libs/tz/date.h:2673:operator-(const year_month_day& ymd, const years& dy) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2675:    return ymd + (-dy);
/Volumes/src/simhub/src/libs/tz/date.h:2714:year_month_weekday::operator-=(const months& m) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2716:    *this = *this - m;
/Volumes/src/simhub/src/libs/tz/date.h:2732:year_month_weekday::operator-=(const years& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2734:    *this = *this - y;
/Volumes/src/simhub/src/libs/tz/date.h:2788:    auto d2 = wdi_.weekday() - date::weekday(static_cast<sys_days>(y_/m_/1)) + days((wdi_.index()-1)*7 + 1);
/Volumes/src/simhub/src/libs/tz/date.h:2800:    return {ymd.year(), ymd.month(), wd[(static_cast<unsigned>(ymd.day())-1)/7+1]};
/Volumes/src/simhub/src/libs/tz/date.h:2809:    return (d + (wdi_.weekday() - date::weekday(d) + days{(wdi_.index()-1)*7})
/Volumes/src/simhub/src/libs/tz/date.h:2858:operator-(const year_month_weekday& ymwd, const months& dm) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2860:    return ymwd + (-dm);
/Volumes/src/simhub/src/libs/tz/date.h:2882:operator-(const year_month_weekday& ymwd, const years& dy) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2884:    return ymwd + (-dy);
/Volumes/src/simhub/src/libs/tz/date.h:2911:year_month_weekday_last::operator-=(const months& m) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2913:    *this = *this - m;
/Volumes/src/simhub/src/libs/tz/date.h:2929:year_month_weekday_last::operator-=(const years& y) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:2931:    *this = *this - y;
/Volumes/src/simhub/src/libs/tz/date.h:2982:    return (d - (date::weekday{d} - wdl_.weekday())).time_since_epoch();
/Volumes/src/simhub/src/libs/tz/date.h:3029:operator-(const year_month_weekday_last& ymwdl, const months& dm) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:3031:    return ymwdl + (-dm);
/Volumes/src/simhub/src/libs/tz/date.h:3053:operator-(const year_month_weekday_last& ymwdl, const years& dy) NOEXCEPT
/Volumes/src/simhub/src/libs/tz/date.h:3055:    return ymwdl + (-dy);
/Volumes/src/simhub/src/libs/tz/date.h:3486:        , sub_s_(std::chrono::duration_cast<precision>(d - s_))
/Volumes/src/simhub/src/libs/tz/date.h:3596:    return d >= d.zero() ? d : -d;
/Volumes/src/simhub/src/libs/tz/date.h:3685:                h_ = h_ - h12;
/Volumes/src/simhub/src/libs/tz/date.h:3726:            p = -p;
/Volumes/src/simhub/src/libs/tz/date.h:3751:            os << '-';
/Volumes/src/simhub/src/libs/tz/date.h:3792:        , m_(detail::abs(since_midnight) - h_)
/Volumes/src/simhub/src/libs/tz/date.h:3809:            p = -p;
/Volumes/src/simhub/src/libs/tz/date.h:3834:            os << '-';
/Volumes/src/simhub/src/libs/tz/date.h:3877:        , m_(std::chrono::duration_cast<std::chrono::minutes>(detail::abs(since_midnight) - h_))
/Volumes/src/simhub/src/libs/tz/date.h:3878:        , s_(detail::abs(since_midnight) - h_ - m_)
/Volumes/src/simhub/src/libs/tz/date.h:3898:            p = -p;
/Volumes/src/simhub/src/libs/tz/date.h:3924:            os << '-';
/Volumes/src/simhub/src/libs/tz/date.h:3985:        , m_(std::chrono::duration_cast<std::chrono::minutes>(detail::abs(since_midnight) - h_))
/Volumes/src/simhub/src/libs/tz/date.h:3986:        , s_(detail::abs(since_midnight) - h_ - m_)
/Volumes/src/simhub/src/libs/tz/date.h:4008:            p = -p;
/Volumes/src/simhub/src/libs/tz/date.h:4034:            os << '-';
/Volumes/src/simhub/src/libs/tz/date.h:4160:    return os << year_month_day(dp) << ' ' << make_time(tp-dp);
/Volumes/src/simhub/src/libs/tz/date.h:4276:                    tm.tm_mon = static_cast<int>(unsigned(fds.ymd.month())) - 1;
/Volumes/src/simhub/src/libs/tz/date.h:4305:                    tm.tm_mon = static_cast<int>(static_cast<unsigned>(ymd.month()) - 1);
/Volumes/src/simhub/src/libs/tz/date.h:4306:                    tm.tm_year = static_cast<int>(ymd.year()) - 1900;
/Volumes/src/simhub/src/libs/tz/date.h:4308:                    tm.tm_yday = static_cast<int>((ld - local_days(ymd.year()/1/1)).count());
/Volumes/src/simhub/src/libs/tz/date.h:4328:                    tm.tm_year = y - 1900;
/Volumes/src/simhub/src/libs/tz/date.h:4344:                        os << CharT{'-'};
/Volumes/src/simhub/src/libs/tz/date.h:4346:                        os << -(y-99)/100;
/Volumes/src/simhub/src/libs/tz/date.h:4425:                    os << static_cast<int>(ymd.year()) << CharT{'-'};
/Volumes/src/simhub/src/libs/tz/date.h:4427:                    os << static_cast<unsigned>(ymd.month()) << CharT{'-'};
/Volumes/src/simhub/src/libs/tz/date.h:4449:                    auto start = local_days((y - years{1})/date::dec/thu[last]) + (mon-thu);
/Volumes/src/simhub/src/libs/tz/date.h:4451:                        --y;
/Volumes/src/simhub/src/libs/tz/date.h:4510:                    auto doy = ld - local_days(y/jan/1) + days{1};
/Volumes/src/simhub/src/libs/tz/date.h:4534:                    tm.tm_mon = static_cast<int>(m-1);
/Volumes/src/simhub/src/libs/tz/date.h:4746:                    tm.tm_year = static_cast<int>(ymd.year()) - 1900;
/Volumes/src/simhub/src/libs/tz/date.h:4748:                    tm.tm_yday = static_cast<int>((ld - local_days(ymd.year()/1/1)).count());
/Volumes/src/simhub/src/libs/tz/date.h:4759:                        auto wn = duration_cast<weeks>(ld - st).count() + 1;
/Volumes/src/simhub/src/libs/tz/date.h:4783:                    tm.tm_year = static_cast<int>(ymd.year()) - 1900;
/Volumes/src/simhub/src/libs/tz/date.h:4785:                    tm.tm_yday = static_cast<int>((ld - local_days(ymd.year()/1/1)).count());
/Volumes/src/simhub/src/libs/tz/date.h:4792:                    auto st = local_days((y - years{1})/12/thu[last]) + (mon-thu);
/Volumes/src/simhub/src/libs/tz/date.h:4795:                        --y;
/Volumes/src/simhub/src/libs/tz/date.h:4796:                        st = local_days((y - years{1})/12/thu[last]) + (mon-thu);
/Volumes/src/simhub/src/libs/tz/date.h:4798:                    auto wn = duration_cast<weeks>(ld - st).count() + 1;
/Volumes/src/simhub/src/libs/tz/date.h:4846:                    tm.tm_year = static_cast<int>(ymd.year()) - 1900;
/Volumes/src/simhub/src/libs/tz/date.h:4848:                    tm.tm_yday = static_cast<int>((ld - local_days(ymd.year()/1/1)).count());
/Volumes/src/simhub/src/libs/tz/date.h:4859:                        auto wn = duration_cast<weeks>(ld - st).count() + 1;
/Volumes/src/simhub/src/libs/tz/date.h:4906:                    tm.tm_year = y - 1900;
/Volumes/src/simhub/src/libs/tz/date.h:4929:                    tm.tm_year = static_cast<int>(y) - 1900;
/Volumes/src/simhub/src/libs/tz/date.h:4956:                m -= h;
/Volumes/src/simhub/src/libs/tz/date.h:4958:                    os << CharT{'-'};
/Volumes/src/simhub/src/libs/tz/date.h:5143:    fields<CT> fds{year_month_day{ld}, time_of_day<CT>{tp-ld}};
/Volumes/src/simhub/src/libs/tz/date.h:5156:    fields<CT> fds{year_month_day{sd}, time_of_day<CT>{tp-sd}};
/Volumes/src/simhub/src/libs/tz/date.h:5165:    -> decltype(to_stream(std::declval<std::basic_ostream<CharT>&>(), fmt, tp),
/Volumes/src/simhub/src/libs/tz/date.h:5177:    -> decltype(to_stream(std::declval<std::basic_ostream<CharT>&>(), fmt, tp),
/Volumes/src/simhub/src/libs/tz/date.h:5189:    -> decltype(to_stream(std::declval<std::basic_ostream<CharT, Traits>&>(), fmt.c_str(), tp),
/Volumes/src/simhub/src/libs/tz/date.h:5201:    -> decltype(to_stream(std::declval<std::basic_ostream<CharT, Traits>&>(), fmt.c_str(), tp),
/Volumes/src/simhub/src/libs/tz/date.h:5245:        x = 10*x + (c - '0');
/Volumes/src/simhub/src/libs/tz/date.h:5262:        if (('0' <= c && c <= '9') || c == '-' || c == '+')
/Volumes/src/simhub/src/libs/tz/date.h:5264:            if (c == '-' || c == '+')
/Volumes/src/simhub/src/libs/tz/date.h:5269:                if (c == '-')
/Volumes/src/simhub/src/libs/tz/date.h:5270:                    x = -x;
/Volumes/src/simhub/src/libs/tz/date.h:5367:    // No-op if a0 == CharT{}
/Volumes/src/simhub/src/libs/tz/date.h:5412:    if (a0 != -1)
/Volumes/src/simhub/src/libs/tz/date.h:5460:        auto width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5498:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5515:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5530:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5552:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5571:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5589:                        read(is, rs{C, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5598:                            C = (tY >= 0 ? tY : tY-99) / 100;
/Volumes/src/simhub/src/libs/tz/date.h:5603:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5619:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5629:                        read(is, rs{Y, 1, width == -1 ? 4u : width}, CharT{'-'},
/Volumes/src/simhub/src/libs/tz/date.h:5630:                                 ru{m, 1, 2}, CharT{'-'}, ru{d, 1, 2});
/Volumes/src/simhub/src/libs/tz/date.h:5634:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5645:                        read(is, rs{d, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5651:                        width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5660:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5672:                        read(is, ru{H, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5687:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5699:                        read(is, rs{I, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5712:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5722:                        read(is, ru{j, 1, width == -1 ? 3u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5726:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5738:                        read(is, ru{M, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5753:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5763:                        read(is, rs{m, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5769:                        width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5778:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5806:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5832:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5845:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5875:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5889:                        read(is, rld{S, 1, width == -1 ? w : width});
/Volumes/src/simhub/src/libs/tz/date.h:5904:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5932:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5942:                        read(is, rs{Y, 1, width == -1 ? 4u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5948:                        width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5957:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5967:                        read(is, ru{y, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5977:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:5987:                        read(is, ru{g, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:5991:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6001:                        read(is, rs{G, 1, width == -1 ? 4u : width});
/Volumes/src/simhub/src/libs/tz/date.h:6005:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6015:                        read(is, ru{U, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:6019:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6029:                        read(is, ru{V, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:6033:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6043:                        read(is, ru{W, 1, width == -1 ? 2u : width});
/Volumes/src/simhub/src/libs/tz/date.h:6047:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6059:                        read(is, ru{wd, 1, width == -1 ? 1u : width});
/Volumes/src/simhub/src/libs/tz/date.h:6077:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6095:                        width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6110:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6127:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6144:                                auto i = is.rdbuf()->sgetc();
/Volumes/src/simhub/src/libs/tz/date.h:6154:                                        c == '_' || c == '/' || c == '-' || c == '+'))
/Volumes/src/simhub/src/libs/tz/date.h:6157:                                is.rdbuf()->sbumpc();
/Volumes/src/simhub/src/libs/tz/date.h:6166:                    width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6175:                    if (width == -1 && modified == CharT{} && '0' <= *fmt && *fmt <= '9')
/Volumes/src/simhub/src/libs/tz/date.h:6177:                        width = static_cast<char>(*fmt) - '0';
/Volumes/src/simhub/src/libs/tz/date.h:6179:                            width = 10*width + static_cast<char>(*++fmt) - '0';
/Volumes/src/simhub/src/libs/tz/date.h:6188:                        width = -1;
/Volumes/src/simhub/src/libs/tz/date.h:6230:                        C = (Y >= 0 ? Y : Y-100) / 100;
/Volumes/src/simhub/src/libs/tz/date.h:6237:                    tY = 100*(C+1) - (y == 0 ? 100 : y);
/Volumes/src/simhub/src/libs/tz/date.h:6258:                        C = (G >= 0 ? G : G-100) / 100;
/Volumes/src/simhub/src/libs/tz/date.h:6265:                    tG = 100*(C+1) - (g == 0 ? 100 : g);
/Volumes/src/simhub/src/libs/tz/date.h:6275:                auto ymd = year_month_day{local_days(year{G-1}/dec/thu[last]) +
/Volumes/src/simhub/src/libs/tz/date.h:6276:                                          (mon-thu) + weeks{V-1} +
/Volumes/src/simhub/src/libs/tz/date.h:6277:                                          (weekday{static_cast<unsigned>(wd)}-mon)};
/Volumes/src/simhub/src/libs/tz/date.h:6293:                auto ymd = year_month_day{local_days(year{Y}/1/1) + days{j-1}};
/Volumes/src/simhub/src/libs/tz/date.h:6309:                    sd = year{Y-1}/dec/weekday{static_cast<unsigned>(wd)}[last];
/Volumes/src/simhub/src/libs/tz/date.h:6311:                    sd = sys_days(year{Y}/jan/sun[1]) + weeks{U-1} +
/Volumes/src/simhub/src/libs/tz/date.h:6312:                         (weekday{static_cast<unsigned>(wd)} - sun);
/Volumes/src/simhub/src/libs/tz/date.h:6331:                    sd = year{Y-1}/dec/weekday{static_cast<unsigned>(wd)}[last];
/Volumes/src/simhub/src/libs/tz/date.h:6333:                    sd = sys_days(year{Y}/jan/mon[1]) + weeks{W-1} +
/Volumes/src/simhub/src/libs/tz/date.h:6334:                         (weekday{static_cast<unsigned>(wd)} - mon);
/Volumes/src/simhub/src/libs/tz/date.h:6502:        tp = sys_days(fds.ymd) + duration_cast<Duration>(fds.tod.to_duration() - *offptr);
/Volumes/src/simhub/src/libs/tz/date.h:6573:    -> decltype(from_stream(std::declval<std::basic_istream<CharT, Traits>&>(),
/Volumes/src/simhub/src/libs/tz/date.h:6585:    -> decltype(from_stream(std::declval<std::basic_istream<CharT, Traits>&>(),
/Volumes/src/simhub/src/libs/tz/date.h:6597:    -> decltype(from_stream(std::declval<std::basic_istream<CharT, Traits>&>(),
/Volumes/src/simhub/src/libs/tz/date.h:6609:    -> decltype(from_stream(std::declval<std::basic_istream<CharT, Traits>&>(),
/Volumes/src/simhub/src/libs/tz/date.h:6622:    -> decltype(from_stream(std::declval<std::basic_istream<CharT>&>(), format, tp),
/Volumes/src/simhub/src/libs/tz/date.h:6632:    -> decltype(from_stream(std::declval<std::basic_istream<CharT, Traits>&>(), format,
/Volumes/src/simhub/src/libs/tz/date.h:6643:    -> decltype(from_stream(std::declval<std::basic_istream<CharT>&>(), format,
/Volumes/src/simhub/src/libs/tz/date.h:6655:    -> decltype(from_stream(std::declval<std::basic_istream<CharT, Traits>&>(), format,
/Volumes/src/simhub/src/libs/tz/date.h:6711:              class = std::enable_if_t<N1 + N2 - 1 == N>>
/Volumes/src/simhub/src/libs/tz/date.h:6717:        for (; i < N1-1; ++i)
/Volumes/src/simhub/src/libs/tz/date.h:6724:    CONSTCD14 std::size_t size() const NOEXCEPT {return N-1;}
/Volumes/src/simhub/src/libs/tz/date.h:6727:    CONSTCD14 const_iterator end()   const NOEXCEPT {return p_ + N-1;}
/Volumes/src/simhub/src/libs/tz/date.h:6747:               N1 + N2 - 1>
/Volumes/src/simhub/src/libs/tz/date.h:6751:    return string_literal<CharT, N1 + N2 - 1>{string_literal<CharT, N1>{x},
/Volumes/src/simhub/src/libs/tz/tz.cpp:58:// https://msdn.microsoft.com/en-nz/library/windows/desktop/aa383745(v=vs.85).aspx
/Volumes/src/simhub/src/libs/tz/tz.cpp:73:// https://support.microsoft.com/en-us/kb/130869
/Volumes/src/simhub/src/libs/tz/tz.cpp:150:// GCC 4.9 Bug 61489 Wrong warning with -Wmissing-field-initializers
/Volumes/src/simhub/src/libs/tz/tz.cpp:152:# pragma GCC diagnostic ignored "-Wmissing-field-initializers"
/Volumes/src/simhub/src/libs/tz/tz.cpp:236:// +---------------------+
/Volumes/src/simhub/src/libs/tz/tz.cpp:238:// +---------------------+
/Volumes/src/simhub/src/libs/tz/tz.cpp:294:// +-------------------+
/Volumes/src/simhub/src/libs/tz/tz.cpp:296:// +-------------------+
/Volumes/src/simhub/src/libs/tz/tz.cpp:372:                          ->std::size_t
/Volumes/src/simhub/src/libs/tz/tz.cpp:384:        std::size_t name_len = epos - spos;
/Volumes/src/simhub/src/libs/tz/tz.cpp:416:        std::size_t value_len = epos - spos;
/Volumes/src/simhub/src/libs/tz/tz.cpp:432:                                                 sizeof(mapZoneOpeningTag[0]) - 1;
/Volumes/src/simhub/src/libs/tz/tz.cpp:481:            std::size_t commentPos = line.find("<!--");
/Volumes/src/simhub/src/libs/tz/tz.cpp:498:           const date::detail::timezone_mapping& rhs)->bool
/Volumes/src/simhub/src/libs/tz/tz.cpp:597:    auto dow = std::find(std::begin(dow_names), std::end(dow_names), s) - dow_names;
/Volumes/src/simhub/src/libs/tz/tz.cpp:598:    if (dow >= std::end(dow_names) - std::begin(dow_names))
/Volumes/src/simhub/src/libs/tz/tz.cpp:611:    auto m = std::find(std::begin(month_names), std::end(month_names), s) - month_names;
/Volumes/src/simhub/src/libs/tz/tz.cpp:612:    if (m >= std::end(month_names) - std::begin(month_names))
/Volumes/src/simhub/src/libs/tz/tz.cpp:646:    if (in.peek() == '-')
/Volumes/src/simhub/src/libs/tz/tz.cpp:648:        sign = -1;
/Volumes/src/simhub/src/libs/tz/tz.cpp:663:    const auto hms = make_time(tp - dp);
/Volumes/src/simhub/src/libs/tz/tz.cpp:717:        if (std::abs((dp0-dp1).count()) > 1)
/Volumes/src/simhub/src/libs/tz/tz.cpp:718:            return dp0 < dp1 ? -1 : 1;
/Volumes/src/simhub/src/libs/tz/tz.cpp:721:            auto tp0 = to_time_point(y) - prev_save;
/Volumes/src/simhub/src/libs/tz/tz.cpp:723:                tp0 -= offset;
/Volumes/src/simhub/src/libs/tz/tz.cpp:725:            return tp0 < tp1 ? -1 : tp0 == tp1 ? 0 : 1;
/Volumes/src/simhub/src/libs/tz/tz.cpp:732:                tp1 -= prev_save;
/Volumes/src/simhub/src/libs/tz/tz.cpp:734:                tp0 -= offset;
/Volumes/src/simhub/src/libs/tz/tz.cpp:735:            return tp0 < tp1 ? -1 : tp0 == tp1 ? 0 : 1;
/Volumes/src/simhub/src/libs/tz/tz.cpp:741:            tp1 -= offset + prev_save;
/Volumes/src/simhub/src/libs/tz/tz.cpp:743:            tp1 -= offset;
/Volumes/src/simhub/src/libs/tz/tz.cpp:744:        return tp0 < tp1 ? -1 : tp0 == tp1 ? 0 : 1;
/Volumes/src/simhub/src/libs/tz/tz.cpp:748:    return t0 < t1 ? -1 : t0 == t1 ? 0 : 1;
/Volumes/src/simhub/src/libs/tz/tz.cpp:759:        until_utc -= offset;
/Volumes/src/simhub/src/libs/tz/tz.cpp:761:        until_utc -= offset + save;
/Volumes/src/simhub/src/libs/tz/tz.cpp:802:            return sys_days(x) - (wd1-wd0);
/Volumes/src/simhub/src/libs/tz/tz.cpp:810:    return sys_days(x) + (wd1-wd0);
/Volumes/src/simhub/src/libs/tz/tz.cpp:841:            auto const ymd = year_month_day(sys_days(x) - (wd1-wd0));
/Volumes/src/simhub/src/libs/tz/tz.cpp:851:            auto const ymd = year_month_day(sys_days(x) + (wd1-wd0));
/Volumes/src/simhub/src/libs/tz/tz.cpp:967:        if ((static_cast<unsigned>(x.day()) - 1) % 7 == 0)
/Volumes/src/simhub/src/libs/tz/tz.cpp:971:                       (static_cast<unsigned>(x.day()) - 1)/7+1]) << "              ";
/Volumes/src/simhub/src/libs/tz/tz.cpp:1039:        in >> word;  // TYPE (always "-")
/Volumes/src/simhub/src/libs/tz/tz.cpp:1040:        assert(word == "-");
/Volumes/src/simhub/src/libs/tz/tz.cpp:1044:        if (abbrev_ == "-")
/Volumes/src/simhub/src/libs/tz/tz.cpp:1239:            rules[i].ending_year_ = rules[k].starting_year_ - years{1};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1252:            rules[i].ending_year_ = rules[k].starting_year_ - years{1};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1261:            rules[i].ending_year_ = rules[k].starting_year_ - years{1};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1301:            }) - rules.cbegin());
/Volumes/src/simhub/src/libs/tz/tz.cpp:1308:            if (t == last_rule || t->starting_year() >= min_year)
/Volumes/src/simhub/src/libs/tz/tz.cpp:1309:                --t;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1310:            auto d = static_cast<std::size_t>(t - first_rule);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1312:            e -= d;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1319:            auto d = static_cast<std::size_t>(last_rule - t);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1321:            e -= d;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1428:    if (zonelet.u.rule_ == "-")
/Volumes/src/simhub/src/libs/tz/tz.cpp:1447:            (zonelets_.size() > 1 && zonelets_.end()[-2].until_year_ > max_year))
/Volumes/src/simhub/src/libs/tz/tz.cpp:1451:// Find the rule that comes chronologically before Rule r.  For multi-year rules,
/Volumes/src/simhub/src/libs/tz/tz.cpp:1457://     r->starting_year() <= y && y <= r->ending_year()
/Volumes/src/simhub/src/libs/tz/tz.cpp:1464:    if (y == r->starting_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1466:        if (r == &rules.front() || r->name() != r[-1].name())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1468:        --r;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1469:        if (y == r->starting_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1471:        return {r, r->ending_year()};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1473:    if (r == &rules.front() || r->name() != r[-1].name() ||
/Volumes/src/simhub/src/libs/tz/tz.cpp:1474:        r[-1].starting_year() < r->starting_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1476:        while (r < &rules.back() && r->name() == r[1].name() &&
/Volumes/src/simhub/src/libs/tz/tz.cpp:1477:               r->starting_year() == r[1].starting_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1479:        return {r, --y};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1481:    --r;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1485:// Find the rule that comes chronologically after Rule r.  For multi-year rules,
/Volumes/src/simhub/src/libs/tz/tz.cpp:1492://     first <= r && r < last && r->starting_year() <= y && y <= r->ending_year()
/Volumes/src/simhub/src/libs/tz/tz.cpp:1499:    if (y == r->ending_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1501:        if (r == last_rule-1)
/Volumes/src/simhub/src/libs/tz/tz.cpp:1504:        if (y == r->ending_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1506:        return {r, r->starting_year()};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1508:    if (r == last_rule-1 || r->ending_year() < r[1].ending_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1510:        while (r > first_rule && r->starting_year() == r[-1].starting_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1511:            --r;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1518:// Find the rule that comes chronologically after Rule r.  For multi-year rules,
/Volumes/src/simhub/src/libs/tz/tz.cpp:1524://     r->starting_year() <= y && y <= r->ending_year()
/Volumes/src/simhub/src/libs/tz/tz.cpp:1531:    if (y == r->ending_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1533:        if (r == &rules.back() || r->name() != r[1].name())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1536:        if (y == r->ending_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1538:        return {r, r->starting_year()};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1540:    if (r == &rules.back() || r->name() != r[1].name() ||
/Volumes/src/simhub/src/libs/tz/tz.cpp:1541:        r->ending_year() < r[1].ending_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1543:        while (r > &rules.front() && r->name() == r[-1].name() &&
/Volumes/src/simhub/src/libs/tz/tz.cpp:1544:               r->starting_year() == r[-1].starting_year())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1545:            --r;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1557:    auto ry = r->starting_year();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1558:    while (r->save() != std::chrono::minutes{0})
/Volumes/src/simhub/src/libs/tz/tz.cpp:1563:                                     + eqr.first->name());
/Volumes/src/simhub/src/libs/tz/tz.cpp:1580:    auto ry = r->starting_year();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1586:        if (mdt.compare(y, r->mdt(), ry, offset, prev_save) <= 0)
/Volumes/src/simhub/src/libs/tz/tz.cpp:1590:        prev_save = prev_rule->save();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1606:    auto ry = r->starting_year();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1613:        switch (r->mdt().zone())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1616:            found = tp_utc < r->mdt().to_time_point(ry);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1619:            found = sys_seconds{tp_std.time_since_epoch()} < r->mdt().to_time_point(ry);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1622:            found = sys_seconds{tp_loc.time_since_epoch()} < r->mdt().to_time_point(ry);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1629:        prev_save = prev_rule->save();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1651:        auto tr = r->mdt().to_sys(ry, offset, x.save);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1658:                x.end = r->mdt().to_sys(ry, offset, x.save);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1669:                prev_save = find_previous_rule(r, ry).first->save();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1670:            x.begin = r->mdt().to_sys(ry, offset, prev_save);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1671:            x.save = r->save();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1672:            x.abbrev = r->abbrev();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1677:                x.end = r->mdt().to_sys(ry, offset, x.save);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1683:        x.save = r->save();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1701:        // Classify info as rule-based, has save, or neither
/Volumes/src/simhub/src/libs/tz/tz.cpp:1748:                final_save = z.last_rule_.first->save();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1758:                z.first_rule_ = find_rule_for_zone(eqr, prev_zonelet->until_utc_,
/Volumes/src/simhub/src/libs/tz/tz.cpp:1759:                                                        prev_zonelet->until_std_,
/Volumes/src/simhub/src/libs/tz/tz.cpp:1760:                                                        prev_zonelet->until_loc_);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1763:                    z.initial_save_ = z.first_rule_.first->save();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1764:                    z.initial_abbrev_ = z.first_rule_.first->abbrev();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1780:                z.first_rule_ = std::make_pair(eqr.first, eqr.first->starting_year());
/Volumes/src/simhub/src/libs/tz/tz.cpp:1781:                z.initial_abbrev_ = find_first_std_rule(eqr)->abbrev();
/Volumes/src/simhub/src/libs/tz/tz.cpp:1830:                    temp = '-';
/Volumes/src/simhub/src/libs/tz/tz.cpp:1831:                    off = -off;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1836:                off -= h;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1843:                    off -= m;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1873:    auto tps = sys_seconds{(tp - i.first.offset).time_since_epoch()};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1877:        i.first = get_info_impl(i.second.begin - seconds{1}, static_cast<int>(tz::utc));
/Volumes/src/simhub/src/libs/tz/tz.cpp:1880:    else if (i.first.end - tps <= days{1})
/Volumes/src/simhub/src/libs/tz/tz.cpp:1883:        tps = sys_seconds{(tp - i.second.offset).time_since_epoch()};
/Volumes/src/simhub/src/libs/tz/tz.cpp:1908:                       const_cast<time_zone*>(this)->adjust_infos(get_tzdb().rules);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1921:        if (i->tag_ == zonelet::has_save)
/Volumes/src/simhub/src/libs/tz/tz.cpp:1924:                r.begin = i[-1].until_utc_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1927:            r.end = i->until_utc_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1928:            r.offset = i->gmtoff_ + i->u.save_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1929:            r.save = i->u.save_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1931:        else if (i->u.rule_.empty())
/Volumes/src/simhub/src/libs/tz/tz.cpp:1934:                r.begin = i[-1].until_utc_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1937:            r.end = i->until_utc_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1938:            r.offset = i->gmtoff_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1942:            r = find_rule(i->first_rule_, i->last_rule_, y, i->gmtoff_,
/Volumes/src/simhub/src/libs/tz/tz.cpp:1944:                          i->initial_save_, i->initial_abbrev_);
/Volumes/src/simhub/src/libs/tz/tz.cpp:1945:            r.offset = i->gmtoff_ + r.save;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1946:            if (i != zonelets_.begin() && r.begin < i[-1].until_utc_)
/Volumes/src/simhub/src/libs/tz/tz.cpp:1947:                r.begin = i[-1].until_utc_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1948:            if (r.end > i->until_utc_)
/Volumes/src/simhub/src/libs/tz/tz.cpp:1949:                r.end = i->until_utc_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:1951:        r.abbrev = format_abbrev(i->format_, r.abbrev, r.offset, r.save);
/Volumes/src/simhub/src/libs/tz/tz.cpp:2032:    return os << x.name_ << " --> " << x.target_;
/Volumes/src/simhub/src/libs/tz/tz.cpp:2102:                                      void* userp) -> std::size_t
/Volumes/src/simhub/src/libs/tz/tz.cpp:2130:                                      void* userp) -> std::size_t
/Volumes/src/simhub/src/libs/tz/tz.cpp:2156:    if (download_to_string("http://www.iana.org/time-zones", str))
/Volumes/src/simhub/src/libs/tz/tz.cpp:2158:        CONSTDATA char db[] = "/time-zones/repository/releases/tzdata";
/Volumes/src/simhub/src/libs/tz/tz.cpp:2159:        CONSTDATA auto db_size = sizeof(db) - 1;
/Volumes/src/simhub/src/libs/tz/tz.cpp:2205:    return std::system(("rm -R " + folder).c_str()) == EXIT_SUCCESS;
/Volumes/src/simhub/src/libs/tz/tz.cpp:2229:        if (strcmp(p->d_name, ".") == 0 || strcmp(p->d_name, "..") == 0)
/Volumes/src/simhub/src/libs/tz/tz.cpp:2233:        std::size_t buf_len = folder_len + strlen(p->d_name) + 2;
/Volumes/src/simhub/src/libs/tz/tz.cpp:2236:            snprintf(&filename[0], buf_len, "%s/%s", folder.c_str(), p->d_name));
/Volumes/src/simhub/src/libs/tz/tz.cpp:2237:        assert(path_len == buf_len - 1);
/Volumes/src/simhub/src/libs/tz/tz.cpp:2261:    // Re-create the folder.
/Volumes/src/simhub/src/libs/tz/tz.cpp:2337:    // 7-Zip appears to note its location in the registry.
/Volumes/src/simhub/src/libs/tz/tz.cpp:2340:    if (RegOpenKeyExA(HKEY_LOCAL_MACHINE, "SOFTWARE\\7-Zip", 0, KEY_READ, &hKey) == ERROR_SUCCESS)
/Volumes/src/simhub/src/libs/tz/tz.cpp:2344:        DWORD size = sizeof(value_buffer) - sizeof(value_buffer[0]);
/Volumes/src/simhub/src/libs/tz/tz.cpp:2346:        // Testing shows Path key value is "C:\Program Files\7-Zip\" i.e. always with trailing \.
/Volumes/src/simhub/src/libs/tz/tz.cpp:2364:    path += "7-Zip\\7z.exe";
/Volumes/src/simhub/src/libs/tz/tz.cpp:2389:        // return in some cases without INFINITE-ly waiting.
/Volumes/src/simhub/src/libs/tz/tz.cpp:2420:    // "C:\Program Files\7-Zip\7z.exe" x "C:\Users\SomeUser\Downloads\tzdata2016d.tar.gz"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2421:    //     -o"C:\Users\SomeUser\Downloads\tzdata"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2427:    cmd += "\" -o\"";
/Volumes/src/simhub/src/libs/tz/tz.cpp:2453:    cmd += "\" -o\"";
/Volumes/src/simhub/src/libs/tz/tz.cpp:2479:    if (pid == -1) // Child failed to start.
/Volumes/src/simhub/src/libs/tz/tz.cpp:2487:        while ((ret = waitpid(pid, &status, 0)) == -1)
/Volumes/src/simhub/src/libs/tz/tz.cpp:2492:        if (ret != -1)
/Volumes/src/simhub/src/libs/tz/tz.cpp:2504:        if (execv(prog, const_cast<char**>(args)) == -1) // Does not return.
/Volumes/src/simhub/src/libs/tz/tz.cpp:2524:    bool unzipped = std::system(("tar -xzf " + gz_file + " -C " + get_install()).c_str()) == EXIT_SUCCESS;
/Volumes/src/simhub/src/libs/tz/tz.cpp:2529:        prog, "-xzf", gz_file.c_str(), "-C", get_install().c_str(), nullptr
/Volumes/src/simhub/src/libs/tz/tz.cpp:2559:    auto url = "http://www.iana.org/time-zones/repository/releases/tzdata" + version +
/Volumes/src/simhub/src/libs/tz/tz.cpp:2798:    if (zi == db.zones.end() || zi->name() != tz_name)
/Volumes/src/simhub/src/libs/tz/tz.cpp:2805:        if (li != db.links.end() && li->name() == tz_name)
/Volumes/src/simhub/src/libs/tz/tz.cpp:2807:            zi = std::lower_bound(db.zones.begin(), db.zones.end(), li->target(),
/Volumes/src/simhub/src/libs/tz/tz.cpp:2812:            if (zi != db.zones.end() && zi->name() == li->target())
/Volumes/src/simhub/src/libs/tz/tz.cpp:2824:    std::string title("--------------------------------------------"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2825:                      "--------------------------------------------\n"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2829:                      "--------------------------------------------"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2830:                      "--------------------------------------------\n");
/Volumes/src/simhub/src/libs/tz/tz.cpp:2839:    title = std::string("---------------------------------------------------------"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2840:                        "--------------------------------------------------------\n"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2843:                        "---------------------------------------------------------"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2844:                        "--------------------------------------------------------\n");
/Volumes/src/simhub/src/libs/tz/tz.cpp:2853:    title = std::string("---------------------------------------------------------"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2854:                        "--------------------------------------------------------\n"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2856:                        "---------------------------------------------------------"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2857:                        "--------------------------------------------------------\n");
/Volumes/src/simhub/src/libs/tz/tz.cpp:2866:    title = std::string("---------------------------------------------------------"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2867:                        "--------------------------------------------------------\n"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2869:                        "---------------------------------------------------------"
/Volumes/src/simhub/src/libs/tz/tz.cpp:2870:                        "--------------------------------------------------------\n");
/Volumes/src/simhub/src/libs/tz/tz.cpp:2877:// -----------------------
/Volumes/src/simhub/src/libs/tz/tz.cpp:2915:    // Currently Win32 requires iana <--> windows tz name mappings
/Volumes/src/simhub/src/libs/tz/tz.cpp:2958:        const size_t zonepath_len = sizeof(zonepath)/sizeof(zonepath[0])-1;
/Volumes/src/simhub/src/libs/tz/tz.h:31:// Get more recent database at http://www.iana.org/time-zones
/Volumes/src/simhub/src/libs/tz/tz.h:211:       << tp - first_offset << " UTC or\n"
/Volumes/src/simhub/src/libs/tz/tz.h:213:       << tp - second_offset  << " UTC";
/Volumes/src/simhub/src/libs/tz/tz.h:511:            return sys_time<Duration>{tp.time_since_epoch()} - i.second.offset;
/Volumes/src/simhub/src/libs/tz/tz.h:513:    return sys_time<Duration>{tp.time_since_epoch()} - i.first.offset;
/Volumes/src/simhub/src/libs/tz/tz.h:537:    return sys_time<Duration>{tp.time_since_epoch()} - i.first.offset;
/Volumes/src/simhub/src/libs/tz/tz.h:694:// display column "windows" -> xml field "other".
/Volumes/src/simhub/src/libs/tz/tz.h:695:// display column "region"  -> xml field "territory".
/Volumes/src/simhub/src/libs/tz/tz.h:696:// display column "tzid"    -> xml field "type".
/Volumes/src/simhub/src/libs/tz/tz.h:814:    , tp_(z->to_sys(t))
/Volumes/src/simhub/src/libs/tz/tz.h:834:    , tp_(z->to_sys(t, c))
/Volumes/src/simhub/src/libs/tz/tz.h:923:    tp_ = zone_->to_sys(ut);
/Volumes/src/simhub/src/libs/tz/tz.h:954:    return zone_->to_local(tp_);
/Volumes/src/simhub/src/libs/tz/tz.h:970:    return zone_->get_info(tp_);
/Volumes/src/simhub/src/libs/tz/tz.h:1107:    return utc_time<duration>{st.time_since_epoch() + seconds{lt-leaps.begin()}};
/Volumes/src/simhub/src/libs/tz/tz.h:1123:    auto ds = seconds{lt-leaps.begin()};
/Volumes/src/simhub/src/libs/tz/tz.h:1124:    tp -= ds;
/Volumes/src/simhub/src/libs/tz/tz.h:1128:        if (tp < lt[-1])
/Volumes/src/simhub/src/libs/tz/tz.h:1130:            if (tp >= lt[-1].date() - seconds{1})
/Volumes/src/simhub/src/libs/tz/tz.h:1133:                --ds;
/Volumes/src/simhub/src/libs/tz/tz.h:1147:    auto tp = sys_time<duration>{ut.time_since_epoch() - ls.second};
/Volumes/src/simhub/src/libs/tz/tz.h:1149:        tp = floor<seconds>(tp) + seconds{1} - duration{1};
/Volumes/src/simhub/src/libs/tz/tz.h:1172:    auto tp = sys_time<CT>{t.time_since_epoch() - ls.second};
/Volumes/src/simhub/src/libs/tz/tz.h:1175:    auto time = make_time(tp - sd);
/Volumes/src/simhub/src/libs/tz/tz.h:1208:            fds.tod.seconds() -= seconds{1};
/Volumes/src/simhub/src/libs/tz/tz.h:1209:        auto tmp = to_utc_time(sys_days(fds.ymd) + (fds.tod.to_duration() - *offptr));
/Volumes/src/simhub/src/libs/tz/tz.h:1247:    return utc_time<duration>{t.time_since_epoch()} -
/Volumes/src/simhub/src/libs/tz/tz.h:1248:            (sys_days(year{1970}/jan/1) - sys_days(year{1958}/jan/1) + seconds{10});
/Volumes/src/simhub/src/libs/tz/tz.h:1259:            (sys_days(year{1970}/jan/1) - sys_days(year{1958}/jan/1) + seconds{10});
/Volumes/src/simhub/src/libs/tz/tz.h:1288:    auto tp = sys_time<CT>{t.time_since_epoch()} -
/Volumes/src/simhub/src/libs/tz/tz.h:1289:              (sys_days(year{1970}/jan/1) - sys_days(year{1958}/jan/1));
/Volumes/src/simhub/src/libs/tz/tz.h:1292:    auto time = make_time(tp - sd);
/Volumes/src/simhub/src/libs/tz/tz.h:1323:                (sys_days(fds.ymd) + fds.tod.to_duration() + (sys_days(year{1970}/jan/1) -
/Volumes/src/simhub/src/libs/tz/tz.h:1324:                sys_days(year{1958}/jan/1)) - *offptr).time_since_epoch())};
/Volumes/src/simhub/src/libs/tz/tz.h:1354:            (sys_days(year{1980}/jan/sun[1]) - sys_days(year{1970}/jan/1) + seconds{9});
/Volumes/src/simhub/src/libs/tz/tz.h:1364:    return gps_time<duration>{t.time_since_epoch()} -
/Volumes/src/simhub/src/libs/tz/tz.h:1365:            (sys_days(year{1980}/jan/sun[1]) - sys_days(year{1970}/jan/1) + seconds{9});
/Volumes/src/simhub/src/libs/tz/tz.h:1395:              (sys_days(year{1980}/jan/sun[1]) - sys_days(year{1970}/jan/1));
/Volumes/src/simhub/src/libs/tz/tz.h:1398:    auto time = make_time(tp - sd);
/Volumes/src/simhub/src/libs/tz/tz.h:1429:                (sys_days(fds.ymd) + fds.tod.to_duration() -
/Volumes/src/simhub/src/libs/tz/tz.h:1430:                (sys_days(year{1980}/jan/sun[1]) -
/Volumes/src/simhub/src/libs/tz/tz.h:1431:                sys_days(year{1970}/jan/1)) - *offptr).time_since_epoch())};
/Volumes/src/simhub/src/libs/tz/tz.h:1458:            (sys_days(year{1980}/jan/sun[1]) - sys_days(year{1958}/jan/1) + seconds{19});
/Volumes/src/simhub/src/libs/tz/tz.h:1468:    return gps_time<duration>{t.time_since_epoch()} -
/Volumes/src/simhub/src/libs/tz/tz.h:1469:            (sys_days(year{1980}/jan/sun[1]) - sys_days(year{1958}/jan/1) + seconds{19});
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:9:  - cmd: git submodule -q update --init
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:12:  - x86
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:13:  - x64
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:16:  - Debug
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:17:  - Release
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:20:  - mkdir build
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:21:  - cd build
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:22:  - set GENERATOR=Visual Studio 14 2015
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:23:  - if "%PLATFORM%" == "x64" set GENERATOR=%GENERATOR% Win64
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:24:  - cmake -G "%GENERATOR%"
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:25:          -T "LLVM-vs2014"
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:26:          -DCMAKE_C_COMPILER=clang-cl
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:27:          -DCMAKE_CXX_COMPILER=clang-cl
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:28:          -DMPARK_VARIANT_INCLUDE_TESTS="mpark" ..
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:29:  - cmake --build . --config %CONFIGURATION%
/Volumes/src/simhub/src/libs/variant/.appveyor.yml:30:  - ctest -V
/Volumes/src/simhub/src/libs/variant/.clang-format:1:---
/Volumes/src/simhub/src/libs/variant/.travis.yml:8:    # ubuntu 14.04, gcc-5, debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:9:    - env: VERSION=5 BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:17:            - g++-5
/Volumes/src/simhub/src/libs/variant/.travis.yml:19:            - ubuntu-toolchain-r-test
/Volumes/src/simhub/src/libs/variant/.travis.yml:20:    # ubuntu 14.04, gcc-5, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:21:    - env: VERSION=5 BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:27:    # ubuntu 14.04, gcc-6, debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:28:    - env: VERSION=6 BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:36:            - g++-6
/Volumes/src/simhub/src/libs/variant/.travis.yml:38:            - ubuntu-toolchain-r-test
/Volumes/src/simhub/src/libs/variant/.travis.yml:39:    # ubuntu 14.04, gcc-6, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:40:    - env: VERSION=6 BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:46:    # ubuntu 14.04, clang-3.5, debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:47:    - env: VERSION=3.5 BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:55:            - libc++-dev
/Volumes/src/simhub/src/libs/variant/.travis.yml:56:    # ubuntu 14.04, clang-3.5, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:57:    - env: VERSION=3.5 BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:63:    # ubuntu 14.04, clang-3.6, debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:64:    - env: VERSION=3.6 BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:70:    # ubuntu 14.04, clang-3.6, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:71:    - env: VERSION=3.6 BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:77:    # ubuntu 14.04, clang-3.7, debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:78:    - env: VERSION=3.7 BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:84:    # ubuntu 14.04, clang-3.7, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:85:    - env: VERSION=3.7 BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:91:    # ubuntu 14.04, clang-3.8, debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:92:    - env: VERSION=3.8 BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:98:    # ubuntu 14.04, clang-3.8, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:99:    - env: VERSION=3.8 BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:105:    # ubuntu 14.04, clang-3.9, debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:106:    - env: VERSION=3.9 BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:112:    # ubuntu 14.04, clang-3.9, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:113:    - env: VERSION=3.9 BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:120:    - env: BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:125:    - env: BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:130:    - env: BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:134:    # OS X El Capitan 10.11, apple-clang-8, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:135:    - env: BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:139:    # OS X Sierra 10.12, apple-clang-8, debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:140:    - env: BUILD_TYPE=Debug
/Volumes/src/simhub/src/libs/variant/.travis.yml:144:    # OS X Sierra 10.12, apple-clang-8, release
/Volumes/src/simhub/src/libs/variant/.travis.yml:145:    - env: BUILD_TYPE=Release
/Volumes/src/simhub/src/libs/variant/.travis.yml:152:  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then
/Volumes/src/simhub/src/libs/variant/.travis.yml:157:      wget https://cmake.org/files/v3.7/cmake-3.7.1-Linux-x86_64.sh;
/Volumes/src/simhub/src/libs/variant/.travis.yml:158:      chmod u+x cmake-3.7.1-Linux-x86_64.sh;
/Volumes/src/simhub/src/libs/variant/.travis.yml:159:      sudo ./cmake-3.7.1-Linux-x86_64.sh --skip-license --prefix=/usr/local;
/Volumes/src/simhub/src/libs/variant/.travis.yml:162:  - if [ "${TRAVIS_OS_NAME}" = "linux" ] && [ "${CC}" = "clang" ] && [ -n "${VERSION}" ]; then
/Volumes/src/simhub/src/libs/variant/.travis.yml:163:      wget -nv -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -;
/Volumes/src/simhub/src/libs/variant/.travis.yml:164:      sudo apt-add-repository -y "deb http://llvm.org/apt/trusty llvm-toolchain-trusty-${VERSION} main";
/Volumes/src/simhub/src/libs/variant/.travis.yml:165:      sudo apt-get update -qq;
/Volumes/src/simhub/src/libs/variant/.travis.yml:166:      sudo apt-get install -qq -y "clang-${VERSION}";
/Volumes/src/simhub/src/libs/variant/.travis.yml:169:  - if [ "${TRAVIS_OS_NAME}" = "linux" ] && [ "${CC}" = "clang" ]; then
/Volumes/src/simhub/src/libs/variant/.travis.yml:170:      export CXXFLAGS="${CXXFLAGS} -stdlib=libc++";
/Volumes/src/simhub/src/libs/variant/.travis.yml:173:  - if [ -n "${VERSION}" ]; then
/Volumes/src/simhub/src/libs/variant/.travis.yml:174:      export CC="${CC}-${VERSION}";
/Volumes/src/simhub/src/libs/variant/.travis.yml:175:      export CXX="${CXX}-${VERSION}";
/Volumes/src/simhub/src/libs/variant/.travis.yml:177:  - ${CXX} --version
/Volumes/src/simhub/src/libs/variant/.travis.yml:180:  - mkdir build
/Volumes/src/simhub/src/libs/variant/.travis.yml:181:  - cd build
/Volumes/src/simhub/src/libs/variant/.travis.yml:182:  - cmake -DCMAKE_BUILD_TYPE=${BUILD_TYPE}
/Volumes/src/simhub/src/libs/variant/.travis.yml:183:          -DMPARK_VARIANT_INCLUDE_TESTS="mpark;libc++" ..
/Volumes/src/simhub/src/libs/variant/.travis.yml:184:  - cmake --build .
/Volumes/src/simhub/src/libs/variant/.travis.yml:187:  - ctest -V
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:3:# Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:16:    "Semicolon-separated list of tests to build. \
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:29:  cmake/mpark_variant-config.cmake.in
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:30:  "${CMAKE_CURRENT_BINARY_DIR}/cmake/mpark_variant-config.cmake"
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:35:  "${CMAKE_CURRENT_BINARY_DIR}/cmake/mpark_variant-config-version.cmake"
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:41:  FILE "${CMAKE_CURRENT_BINARY_DIR}/cmake/mpark_variant-targets.cmake")
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:48:  FILE mpark_variant-targets.cmake
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:55:  "${CMAKE_CURRENT_BINARY_DIR}/cmake/mpark_variant-config.cmake"
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:56:  "${CMAKE_CURRENT_BINARY_DIR}/cmake/mpark_variant-config-version.cmake"
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:63:if(NOT MPARK_VARIANT_INDEX EQUAL -1)
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:69:if(NOT MPARK_VARIANT_INDEX EQUAL -1)
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:84:    add_compile_options(-Qunused-arguments)
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:85:    add_compile_options(-Wno-deprecated-declarations)
/Volumes/src/simhub/src/libs/variant/CMakeLists.txt:86:    add_compile_options(-Wno-unknown-argument)
/Volumes/src/simhub/src/libs/variant/LICENSE_1_0.txt:1:Boost Software License - Version 1.0 - August 17th, 2003
/Volumes/src/simhub/src/libs/variant/LICENSE_1_0.txt:7:Software, and to permit third-parties to whom the Software is furnished to
/Volumes/src/simhub/src/libs/variant/LICENSE_1_0.txt:14:works are solely in the form of machine-executable object code generated by
/Volumes/src/simhub/src/libs/variant/LICENSE_1_0.txt:19:FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
/Volumes/src/simhub/src/libs/variant/README.md:12:[badge.stability]: https://img.shields.io/badge/stability-stable-brightgreen.svg
/Volumes/src/simhub/src/libs/variant/README.md:13:[badge.travis]: https://travis-ci.org/mpark/variant.svg?branch=master
/Volumes/src/simhub/src/libs/variant/README.md:15:[badge.license]: http://img.shields.io/badge/license-boost-blue.svg
/Volumes/src/simhub/src/libs/variant/README.md:17:[badge.wandbox]: https://img.shields.io/badge/try%20it-on%20wandbox-green.svg
/Volumes/src/simhub/src/libs/variant/README.md:19:[stability]: http://github.com/badges/stability-badges
/Volumes/src/simhub/src/libs/variant/README.md:20:[travis]: https://travis-ci.org/mpark/variant
/Volumes/src/simhub/src/libs/variant/README.md:30:The implementation is based on my [implementation of `std::variant` for __libc++__][libcxx-impl]
/Volumes/src/simhub/src/libs/variant/README.md:35:Refer to [`std::variant` - cppreference.com][cppreference] for the `std::variant`
/Volumes/src/simhub/src/libs/variant/README.md:42:  -  __`MPARK_VARIANT_INCLUDE_TESTS`__:`STRING` (__default__: `""`)
/Volumes/src/simhub/src/libs/variant/README.md:44:      Semicolon-separated list of tests to build. Possible values are `mpark` and `libc++`.
/Volumes/src/simhub/src/libs/variant/README.md:46:      __NOTE__: The __libc++__ `std::variant` tests are built with `-std=c++1z`.
/Volumes/src/simhub/src/libs/variant/README.md:54:|----------------------------------------|---------------------------------------------|-----------------------------------------------------------------------------------------|
/Volumes/src/simhub/src/libs/variant/README.md:55:| GCC 5.4.1                              | Ubuntu 14.04.5 LTS                          | g++-5 (Ubuntu 5.4.1-2ubuntu1~14.04) 5.4.1 20160904                                      |
/Volumes/src/simhub/src/libs/variant/README.md:56:| GCC 6.2.0                              | Ubuntu 14.04.5 LTS                          | g++-6 (Ubuntu 6.2.0-3ubuntu11~14.04) 6.2.0 20160901                                     |
/Volumes/src/simhub/src/libs/variant/README.md:57:| Clang 3.5.2                            | Ubuntu 14.04.5 LTS                          | Ubuntu clang version 3.5.2-svn232544-1~exp1 (branches/release_35) (based on LLVM 3.5.2) |
/Volumes/src/simhub/src/libs/variant/README.md:58:| Clang 3.6.2                            | Ubuntu 14.04.5 LTS                          | Ubuntu clang version 3.6.2-svn240577-1~exp1 (branches/release_36) (based on LLVM 3.6.2) |
/Volumes/src/simhub/src/libs/variant/README.md:59:| Clang 3.7.1                            | Ubuntu 14.04.5 LTS                          | Ubuntu clang version 3.7.1-svn253742-1~exp1 (branches/release_37) (based on LLVM 3.7.1) |
/Volumes/src/simhub/src/libs/variant/README.md:60:| Clang 3.8.0                            | Ubuntu 14.04.5 LTS                          | clang version 3.8.0-2ubuntu3~trusty4 (tags/RELEASE_380/final)                           |
/Volumes/src/simhub/src/libs/variant/README.md:61:| Clang 3.9.1                            | Ubuntu 14.04.5 LTS                          | clang version 3.9.1-svn288847-1~exp1 (branches/release_39)                              |
/Volumes/src/simhub/src/libs/variant/README.md:62:| Clang Xcode 6.4                        | Darwin Kernel Version 14.5.0 (OS X 10.10.3) | Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)                      |
/Volumes/src/simhub/src/libs/variant/README.md:63:| Clang Xcode 7.3                        | Darwin Kernel Version 15.6.0 (OS X 10.10.5) | Apple LLVM version 7.3.0 (clang-703.0.31)                                               |
/Volumes/src/simhub/src/libs/variant/README.md:64:| Clang Xcode 8.2                        | Darwin Kernel Version 16.1.0 (OS X 10.12.1) | Apple LLVM version 8.0.0 (clang-800.0.42.1)                                             |
/Volumes/src/simhub/src/libs/variant/README.md:67:__NOTE__: Enabling __libc++__ `std::variant` tests require `-std=c++1z` support.
/Volumes/src/simhub/src/libs/variant/README.md:73:[libcxx-impl]: https://reviews.llvm.org/rL288547
/Volumes/src/simhub/src/libs/variant/cmake/mpark_variant-config.cmake.in:3:# Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/cmake/mpark_variant-config.cmake.in:11:#   `MPARK_VARIANT_INCLUDE_DIRS` - include directories
/Volumes/src/simhub/src/libs/variant/cmake/mpark_variant-config.cmake.in:12:#   `MPARK_VARIANT_LIBRARIES`    - libraries to link against
/Volumes/src/simhub/src/libs/variant/cmake/mpark_variant-config.cmake.in:20:include("${CMAKE_CURRENT_LIST_DIR}/mpark_variant-targets.cmake")
/Volumes/src/simhub/src/libs/variant/include/mpark/in_place.hpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:98:  constexpr size_t variant_npos = -1;
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:264:  constexpr std::size_t variant_npos = static_cast<std::size_t>(-1);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:277:    constexpr std::size_t not_found = static_cast<std::size_t>(-1);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:278:    constexpr std::size_t ambiguous = static_cast<std::size_t>(-2);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:377:          return get_alt(std::forward<V>(v).tail_, in_place_index<I - 1>);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:619:        : tail_(in_place_index<I - 1>, std::forward<Args>(args)...) {} \
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:652:          : data_(tag), index_(static_cast<index_t>(-1)) {}
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:659:        return index_ == static_cast<index_t>(-1);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:707:                               this->index_ = static_cast<index_t>(-1);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:713:                               if (!this->valueless_by_exception()) {
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:722:                               this->index_ = static_cast<index_t>(-1);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:793:          this->generic_construct(*this, std::move(that));
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:830:          this->generic_construct(*this, that);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:849:        this->destroy();
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:850:        auto &result = this->construct_alt(access::base::get_alt<I>(*this),
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:852:        this->index_ = I;
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:861:        if (this->index() == I) {
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:866:              this_->emplace<I>(T(std::forward<Arg>(arg_)));
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:869:              this_->emplace<I>(std::forward<Arg>(arg_));
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:880:        if (this->valueless_by_exception() && that.valueless_by_exception()) {
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:883:          this->destroy();
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:888:                this->assign_alt(
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:929:          this->generic_assign(std::move(that));
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:966:          this->generic_assign(that);
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:986:        this->assign_alt(access::base::get_alt<I>(*this),
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:992:        if (this->valueless_by_exception() && that.valueless_by_exception()) {
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:994:        } else if (this->index() == that.index()) {
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:995:          visitation::base::visit_alt_at(this->index(),
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:1006:          if (lhs->move_nothrow() && !rhs->move_nothrow()) {
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:1014:            this->generic_construct(*rhs, std::move(*lhs));
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:1017:              this->generic_construct(*rhs, std::move(tmp));
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:1021:          this->generic_construct(*lhs, std::move(tmp));
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:1029:        return this->valueless_by_exception() || results[this->index()];
/Volumes/src/simhub/src/libs/variant/include/mpark/variant.hpp:1443:      -> decltype(lhs.swap(rhs)) {
/Volumes/src/simhub/src/libs/variant/include/mpark/variants/config.hpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/include/mpark/variants/lib.hpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/include/mpark/variants/lib.hpp:108:  noexcept(noexcept(__VA_ARGS__)) -> decltype(__VA_ARGS__) { \
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:3:# Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:21:    add_test(${name} ${name} --gtest_color=yes)
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:50:  set(MPARK_VARIANT_LLVM_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/llvm-build)
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:55:    CMAKE_ARGS        "-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}"
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:56:                      "-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}"
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:59:    BUILD_COMMAND     ${CMAKE_COMMAND} --build . --target cxx
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:60:          COMMAND     ${CMAKE_COMMAND} --build . --target cxxabi
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:61:          COMMAND     ${CMAKE_COMMAND} --build . --target cxx_experimental
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:69:  ExternalProject_Add(libcxx-download
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:72:    DEPENDS           llvm-download
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:83:  ExternalProject_Add(libcxxabi-download
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:86:    DEPENDS           llvm-download
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:94:  ExternalProject_Add_StepDependencies(llvm configure libcxx-download libcxxabi-download)
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:97:    ${CMAKE_COMMAND} -E
/Volumes/src/simhub/src/libs/variant/test/CMakeLists.txt:102:        env MPARK_VARIANT_LIT=${MPARK_VARIANT_LLVM_BINARY_DIR}/bin/llvm-lit
/Volumes/src/simhub/src/libs/variant/test/README.md:12:[badge.stability]: https://img.shields.io/badge/stability-stable-brightgreen.svg
/Volumes/src/simhub/src/libs/variant/test/README.md:13:[badge.travis]: https://travis-ci.org/mpark/variant.svg?branch=master
/Volumes/src/simhub/src/libs/variant/test/README.md:15:[badge.license]: http://img.shields.io/badge/license-boost-blue.svg
/Volumes/src/simhub/src/libs/variant/test/README.md:17:[badge.wandbox]: https://img.shields.io/badge/try%20it-on%20wandbox-green.svg
/Volumes/src/simhub/src/libs/variant/test/README.md:19:[stability]: http://github.com/badges/stability-badges
/Volumes/src/simhub/src/libs/variant/test/README.md:20:[travis]: https://travis-ci.org/mpark/variant
/Volumes/src/simhub/src/libs/variant/test/README.md:32:Execute the following commands from the top-level directory:
/Volumes/src/simhub/src/libs/variant/test/README.md:37:cmake -DMPARK_VARIANT_INCLUDE_TESTS="mpark;libc++" ..
/Volumes/src/simhub/src/libs/variant/test/README.md:38:cmake --build .
/Volumes/src/simhub/src/libs/variant/test/README.md:39:ctest -V
/Volumes/src/simhub/src/libs/variant/test/access.get.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/access.get_if.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/access.holds_alternative.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/assign.conversion.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/assign.conversion.cpp:54:  // `char` -> `int` is better than `char` -> `double`
/Volumes/src/simhub/src/libs/variant/test/assign.copy.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/assign.emplace.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/assign.move.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/cnstr.conversion.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/cnstr.copy.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/cnstr.default.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/cnstr.in_place.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/cnstr.move.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/dtor.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/hash.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/intro.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/intro.cpp:35:  // diff-type assignment.
/Volumes/src/simhub/src/libs/variant/test/intro.cpp:46:  // same-type assignment.
/Volumes/src/simhub/src/libs/variant/test/rel.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:3:# Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:11:set -e
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:17:$(grep -v "#include <mpark/in_place.hpp>" ${MPARK_VARIANT_SOURCE_DIR}/include/mpark/variant.hpp)
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:22:    -v \
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:23:    --param color_diagnostics \
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:24:    --param compile_flags=-I${MPARK_VARIANT_SOURCE_DIR}/include \
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:25:    --param cxx_under_test=${MPARK_VARIANT_CXX_COMPILER} \
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:26:    --param std=c++1z \
/Volumes/src/simhub/src/libs/variant/test/run_libcxx_tests.sh:27:    --param libcxx_site_config=${MPARK_VARIANT_LIBCXX_SITE_CONFIG} \
/Volumes/src/simhub/src/libs/variant/test/swap.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/libs/variant/test/visit.cpp:3:// Copyright Michael Park, 2015-2017
/Volumes/src/simhub/src/test/test_main.cpp:12: * - sets up a capture-less lambda that is called by a plugin instance
/Volumes/src/simhub/src/test/test_main.cpp:15: * - the lambda callback then uses the final arg of the callback, a
/Volumes/src/simhub/src/test/test_main.cpp:37:    if (data->type == CONFIG_FLOAT)
/Volumes/src/simhub/src/test/test_main.cpp:38:        logger.log(LOG_INFO, "[SimHubEventController] %s %2.6f", data->name, data->value.float_value);
/Volumes/src/simhub/src/test/test_main.cpp:40:    if (data->type == CONFIG_STRING)
/Volumes/src/simhub/src/test/test_main.cpp:41:        logger.log(LOG_INFO, "[SimHubEventController] %s %s", data->name, data->value.string_value);
/Volumes/src/simhub/src/test/test_main.cpp:43:    if (data->type == CONFIG_INT)
/Volumes/src/simhub/src/test/test_main.cpp:44:        logger.log(LOG_INFO, "[SimHubEventController] %s %i", data->name, data->value.int_value);
/Volumes/src/simhub/src/test/test_main.cpp:46:    if (data->type == CONFIG_BOOL)
/Volumes/src/simhub/src/test/test_main.cpp:47:        logger.log(LOG_INFO, "[SimHubEventController] %s %i", data->name, data->value.int_value);
/Volumes/src/simhub/src/test/test_main.cpp:70:        configValues[0]->type = CONFIG_INT;
/Volumes/src/simhub/src/test/test_main.cpp:71:        configValues[0]->value.int_value = 42;
/Volumes/src/simhub/src/test/test_main.cpp:72:        configValues[0]->length = sizeof(configValues[0]->value.int_value);
/Volumes/src/simhub/src/test/test_main.cpp:74:        configValues[1]->type = CONFIG_STRING;
/Volumes/src/simhub/src/test/test_main.cpp:75:        configValues[1]->value.string_value = (char *)"42";
/Volumes/src/simhub/src/test/test_main.cpp:76:        configValues[1]->length = strlen(configValues[1]->value.string_value);
/Volumes/src/simhub/src/test/test_main.cpp:78:        configValues[2]->type = CONFIG_FLOAT;
/Volumes/src/simhub/src/test/test_main.cpp:79:        configValues[2]->value.float_value = 42.42;
/Volumes/src/simhub/src/test/test_main.cpp:80:        configValues[2]->length = sizeof(configValues[2]->value.float_value);
/Volumes/src/simhub/src/test/test_main.cpp:88:            auto testFn = [](SPHANDLE eventSource, void *eventData, void *arg) { static_cast<EventConsumer *>(arg)->eventCallback(eventSource, eventData); };
